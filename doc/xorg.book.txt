                    Part VI. X + Window and Display Managers

Chapter 24. X Window System Environment

   This chapter contains instructions to build and configure a graphical user
   environment.

   Xorg, in addition to clearing up some licensing issues with XFree86,
   introduced a completely auto-tooled build for the X Window system. This
   means that the packages build and install using the conventional
   configure, make, and make install commands, as opposed to a proprietary
   build system that required hand editing of configuration parameters in a
   C-like syntax.

   Xorg also brought with it a modular build system. While this separation
   into modules resulted in full control of the features available to the X
   server on any given installation, it also made the installation more
   tedious as it requires installing more than 100 different packages to
   obtain a functional X Window environment. Most large commercial
   distributions have elected to use Xorg over the XFree86 distribution due
   to both licensing issues and the increased functionality provided by it
   over XFree86. With the modular build system, also came incremental updates
   to individual packages. The distribution of Xorg is given a release number
   by the developers, in this case Xorg-7, and is referred to as the
   "katamari" by the upstream developers.

Introduction to Xorg-7

   Xorg is a freely redistributable, open-source implementation of the X
   Window System. This system provides a client/server interface between
   display hardware (the mouse, keyboard, and video displays) and the desktop
   environment, while also providing both the windowing infrastructure and a
   standardized application interface (API).

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/Xorg7

    Xorg Download and Installation Instructions

   Xorg-7.0 introduced a completely auto-tooled, modular build system. With
   the new modular build system, it is no longer possible to download the
   entire package in a single file. In fact, there will be well over 100
   packages that need to be fetched from the download location. To assist
   with such a large task, installing Wget-1.20.3 is strongly recommended for
   downloading the needed files. A complete wget file list is provided for
   each page that includes multiple packages.

   Given the number of packages available, deciding which packages you need
   to install for your particular setup may seem a bit overwhelming at first.
   Take a look at this page and this thread to get an idea of what you will
   need. If you are unsure, you should install all packages at the cost of
   extra disk space.

  Note

   Even if you intend to download only the necessary packages, you should
   download the wget file lists. The list of files are ordered by dependency,
   and the package versions listed in the files are known to work well with
   each other. Further, the wget file lists contain comments for specific
   packages that are deprecated or are not recommended to install. Newer
   packages are likely intended for the next release of Xorg and have already
   proved to be incompatible with current versions of software installed in
   BLFS. The installed size of Xorg can be reduced considerably by installing
   only the packages that you will need and use, however, the BLFS book
   cannot account for all dependencies and build options for the individual
   Xorg packages. The instructions assume that all packages have been built.
   A wiki page containing dependency information is under development. You
   are encouraged to add to these pages if you discover additional
   information that may be helpful to other users who selectively install
   individual packages.

   Additionally, because of the large number of repetitive commands, you are
   encouraged to partially automate the build. Instructions have been given
   that utilize the Sudo-1.8.27 package. It is recommended that you use the
   :NOPASSWD configuration option for the user that will be building the xorg
   packages.

  Setting up the Xorg Build Environment

  Note

   The following instructions assume that the shell startup files have been
   set up as described in The Bash Shell Startup Files.

   First, you'll need to create a working directory:

 mkdir xc &&
 cd xc

   As with previous releases of the X Window System, it may be desirable to
   install Xorg into an alternate prefix. This is no longer common practice
   among Linux distributions. The common installation prefix for Xorg on
   Linux is /usr. There is no standard alternate prefix, nor is there any
   exception in the current revision of the Filesystem Hierarchy Standard for
   Release 7 of the X Window System. Alan Coopersmith of Sun Microsystems,
   has recently stated "At Sun, we were using /usr/X11 and plan to stick with
   it." Only the /opt/* prefix or the /usr prefix adhere to the current FHS
   guidelines.

   Choose your installation prefix, and set the XORG_PREFIX variable with the
   following command:

 export XORG_PREFIX="<PREFIX>"

   Throughout these instructions, you will use the following configure
   switches for all of the packages. Create the XORG_CONFIG variable to use
   for this parameter substitution:

 export XORG_CONFIG="--prefix=$XORG_PREFIX --sysconfdir=/etc \
     --localstatedir=/var --disable-static"

   Create an /etc/profile.d/xorg.sh configuration file containing these
   variables as the root user:

 cat > /etc/profile.d/xorg.sh << EOF
 XORG_PREFIX="$XORG_PREFIX"
 XORG_CONFIG="--prefix=\$XORG_PREFIX --sysconfdir=/etc --localstatedir=/var --disable-static"
 export XORG_PREFIX XORG_CONFIG
 EOF
 chmod 644 /etc/profile.d/xorg.sh

  Note

   There is some confustion about the above 'here' document. The backslash in
   front of the dollar sign is correct. Bash will remove it when creating
   /etc/profile.d/xorg.sh. However, if you are creating the file with an
   editor, a copy and paste operation will not remove the baskslash. It must
   then be removed manually.

  Note

   If you've decided to use the standard /usr prefix, you can omit the
   remainder of this page and continue at util-macros-1.19.2.

   If you've decided to not use the standard prefix, be sure to add
   $XORG_PREFIX/bin to your PATH environment variable, and
   $XORG_PREFIX/lib/pkgconfig and $XORG_PREFIX/share/pkgconfig to your
   PKG_CONFIG_PATH variable. It is also helpful to specify additional search
   paths for gcc and an include directory for the aclocal program. Issue the
   following commands as the root user:

 cat >> /etc/profile.d/xorg.sh << "EOF"
 pathappend $XORG_PREFIX/bin             PATH
 pathappend $XORG_PREFIX/lib/pkgconfig   PKG_CONFIG_PATH
 pathappend $XORG_PREFIX/share/pkgconfig PKG_CONFIG_PATH

 pathappend $XORG_PREFIX/lib             LIBRARY_PATH
 pathappend $XORG_PREFIX/include         C_INCLUDE_PATH
 pathappend $XORG_PREFIX/include         CPLUS_INCLUDE_PATH

 ACLOCAL="aclocal -I $XORG_PREFIX/share/aclocal"

 export PATH PKG_CONFIG_PATH ACLOCAL LIBRARY_PATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH
 EOF

   The script above needs to be activated. Normally it will be automatic at
   login, but to activate it now, as a regular user, run:

 source /etc/profile.d/xorg.sh

   You should also add $XORG_PREFIX/lib to the /etc/ld.so.conf file. Again,
   as the root user, issue the following command:

 echo "$XORG_PREFIX/lib" >> /etc/ld.so.conf

   You should also modify /etc/man_db.conf, adding appropriate
   MANDATORY_MANPATH, MANPATH_MAP, and MANDB_MAP entries following the
   examples for /usr/X11R6. Issue the following command as the root user:

 sed "s@/usr/X11R6@$XORG_PREFIX@g" -i /etc/man_db.conf

   Some applications look for shared files in /usr/share/X11. Create a
   symbolic link to the proper location as the root user:

 ln -svf $XORG_PREFIX/share/X11 /usr/share/X11

   If building KDE, some cmake files look for Xorg in places other than
   $XORG_PREFIX. Allow cmake to find Xorg with:

 ln -svf $XORG_PREFIX /usr/X11R6

   Last updated on 2019-06-27 13:55:17 -0700

util-macros-1.19.2

  Introduction to util-macros

   The util-macros package contains the m4 macros used by all of the Xorg
   packages.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/util/util-macros-1.19.2.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/util/util-macros-1.19.2.tar.bz2

     * Download MD5 sum: 58edef899364f78fbde9479ded20211e

     * Download size: 88 KB

     * Estimated disk space required: 508 KB

     * Estimated build time: less than 0.1 SBU

    util-macros Dependencies

      Required

   Xorg build environment (should be set for the following instructions to
   work)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/util-macros

  Installation of util-macros

   Install util-macros by running the following commands:

 ./configure $XORG_CONFIG

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directory: $XORG_PREFIX/share/pkgconfig and
   $XORG_PREFIX/share/util-macros

   Last updated on 2019-08-16 15:28:01 -0700

xorgproto-2019.1

  Introduction to xorgproto

   The xorgproto package provides the header files required to build the X
   Window system, and to allow other applications to build against the
   installed X Window system.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://xorg.freedesktop.org/archive/individual/proto/xorgproto-2019.1.tar.bz2

     * Download MD5 sum: 802ccb9e977ba3cf94ba798ddb2898a4

     * Download size: 848 KB

     * Estimated disk space required: 8.2 MB

     * Estimated build time: less than 0.1 SBU

    xorgproto Dependencies

      Required

   util-macros-1.19.2

      Optional

   fop-2.3, libxslt-1.1.33, xmlto-0.0.28 and asciidoc-8.6.9 (to build
   additional documentation)

  Note

   There is a reciprocal dependency with fop-2.3. If you wish to build the
   documentation, you'll need to re-install the Protocol Headers after the
   installation is complete and fop-2.3 has been installed.

   User Notes:
   http://wiki.linuxfromscratch.org/blfs/wiki/Xorg7ProtocolHeaders

  Installation of xorgproto

   Install xorgproto by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=$XORG_PREFIX .. &&
 ninja

   This package does not come with a test suite.

   Now, as the root user:

 ninja install &&

 install -vdm 755 $XORG_PREFIX/share/doc/xorgproto-2019.1 &&
 install -vm 644 ../[^m]*.txt ../PM_spec $XORG_PREFIX/share/doc/xorgproto-2019.1

  Command Explanations

   install -vm 644 ../[^m]*.txt ../PM_spec ...: The meson build system does
   not install the text files into /usr/share/doc. The [^m] part prevents
   copying the meson_config.txt file.

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directories: $XORG_PREFIX/include/GL, $XORG_PREFIX/include/X11,
   and $XORG_PREFIX/share/doc/xorgproto-2019.1

   Last updated on 2018-02-18 22:04:14 +0100

libXau-1.0.9

  Introduction to libXau

   The libXau package contains a library implementing the X11 Authorization
   Protocol. This is useful for restricting client access to the display.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/lib/libXau-1.0.9.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/lib/libXau-1.0.9.tar.bz2

     * Download MD5 sum: c5f16288f2da9f071b29111d68797480

     * Download size: 316 KB

     * Estimated disk space required: 2.8 MB

     * Estimated build time: less than 0.1 SBU

    libXau Dependencies

      Required

   xorgproto-2019.1

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libXau

  Installation of libXau

   Install libXau by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   To test the results, issue: make check.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libXau.so
   Installed Directories: None

    Short Descriptions

   libXau.so is the library of X authority database routines. 

   Last updated on 2019-08-16 15:28:01 -0700

libXdmcp-1.1.3

  Introduction to libXdmcp

   The libXdmcp package contains a library implementing the X Display Manager
   Control Protocol. This is useful for allowing clients to interact with the
   X Display Manager.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/lib/libXdmcp-1.1.3.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/lib/libXdmcp-1.1.3.tar.bz2

     * Download MD5 sum: 115c5c12ecce0e749cd91d999a5fd160

     * Download size: 328 KB

     * Estimated disk space required: 2.8 MB

     * Estimated build time: less than 0.1 SBU

    libXdmcp Dependencies

      Required

   xorgproto-2019.1

      Optional

   xmlto-0.0.28, fop-2.3, and libxslt-1.1.33 (for documentation)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libXdmcp

  Installation of libXdmcp

   Install libXdmcp by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libXdmcp.so
   Installed Directory: $XORG_PREFIX/share/doc/libXdmcp

    Short Descriptions

   libXdmcp.so is the X Display Manager Control Protocol library. 

   Last updated on 2019-08-16 15:28:01 -0700

xcb-proto-1.13

  Introduction to xcb-proto

   The xcb-proto package provides the XML-XCB protocol descriptions that
   libxcb uses to generate the majority of its code and API.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://xcb.freedesktop.org/dist/xcb-proto-1.13.tar.bz2

     * Download MD5 sum: abe9aa4886138150bbc04ae4f29b90e3

     * Download size: 148 KB

     * Estimated disk space required: 2.2 MB

     * Estimated build time: less than 0.1 SBU

    xcb-proto Dependencies

      Required

   Xorg build environment (should be set for the following instructions to
   work)

      Optional

   libxml2-2.9.9 (required to run the tests)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xcb-proto

  Installation of xcb-proto

   Install xcb-proto by running the following commands:

 ./configure $XORG_CONFIG

   To test the results, issue: make check.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directory: $XORG_PREFIX/share/xcb and
   $XORG_PREFIX/lib/python2.7/site-packages/xcbgen or
   $XORG_PREFIX/lib/python3.7/site-packages/xcbgen

   Last updated on 2019-08-16 15:28:01 -0700

libxcb-1.13.1

  Introduction to libxcb

   The libxcb package provides an interface to the X Window System protocol,
   which replaces the current Xlib interface. Xlib can also use XCB as a
   transport layer, allowing software to make requests and receive responses
   with both.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://xcb.freedesktop.org/dist/libxcb-1.13.1.tar.bz2

     * Download MD5 sum: f33cdfc67346f7217a9326c0d8679975

     * Download size: 496 KB

     * Estimated disk space required: 43 MB (with tests, add 62 MB for
       doxygen docs)

     * Estimated build time: 0.2 SBU (with tests, add 1.4 SBU for doxygen
       docs)

    libxcb Dependencies

      Required

   libXau-1.0.9 and xcb-proto-1.13

      Recommended

   libXdmcp-1.1.3

      Optional

   Doxygen-1.8.16 (to generate API documentation) and libxslt-1.1.33

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libxcb

  Installation of libxcb

   Install libxcb by running the following commands:

 sed -i "s/pthread-stubs//" configure &&

 ./configure $XORG_CONFIG      \
             --without-doxygen \
             --docdir='${datadir}'/doc/libxcb-1.13.1 &&
 make

   To test the results, issue: make check.

   Now, as the root user:

 make install

  Command Explanations

   sed "s/pthread-stubs//" -i configure: This sed removes a dependency on the
   libpthread-stubs package which is useless on Linux.

   --without-doxygen: Do not use doxygen to generate API documentation
   (default: auto). Without it, if Doxygen-1.8.16 is installed, the API
   documentation will be generated and installed.

  Contents

   Installed Programs: None
   Installed Libraries: libxcb.so, libxcb-composite.so, libxcb-damage.so,
   libxcb-dpms.so, libxcb-dri2.so, libxcb-dri3.so, libxcb-glx.so,
   libxcb-present.so, libxcb-randr.so, libxcb-record.so, libxcb-render.so,
   libxcb-res.so, libxcb-screensaver.so, libxcb-shape.so, libxcb-shm.so,
   libxcb-sync.so, libxcb-xf86dri.so, libxcb-xfixes.so, libxcb-xinerama.so,
   libxcb-xinput.so, libxcb-xkb.so, libxcb-xtest.so, libxcb-xvmc.so, and
   libxcb-xv.so
   Installed Directories: $XORG_PREFIX/include/xcb and
   $XORG_PREFIX/share/doc/libxcb-1.13.1

    Short Descriptions

   libxcb.so is an interface to the X Window System protocol. 

   Last updated on 2019-08-16 15:28:01 -0700

Xorg Libraries

  Introduction to Xorg Libraries

   The Xorg libraries provide library routines that are used within all X
   Window applications.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP): https://www.x.org/pub/individual/lib/

     * Download (FTP): ftp://ftp.x.org/pub/individual/lib/

     * Download size: 13 MB

     * Estimated disk space required: 224 MB (34 MB installed) - if source
       directories not deleted

     * Estimated build time: 2.4 SBU

    Xorg Libraries Dependencies

      Required

   Fontconfig-2.13.1 and libxcb-1.13.1

      Recommended

   elogind-241.3

      Optional

   xmlto-0.0.28 with one or more of the following: fop-2.3, Links-2.19,
   Lynx-2.8.9rel.1, and W3m (to generate additional PDF or text documentation
   for the libXfont package).

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/Xorg7Libraries

  Downloading Xorg Libraries

   First, create a list of files to be downloaded. This file will also be
   used to verify the integrity of the downloads when complete:

 cat > lib-7.md5 << "EOF"
 ce2fb8100c6647ee81451ebe388b17ad  xtrans-1.4.0.tar.bz2
 c5fa5a86a20e3591bed6c046498d4b8f  libX11-1.6.8.tar.bz2
 f5b48bb76ba327cd2a8dc7a383532a95  libXext-1.3.4.tar.bz2
 4e1196275aa743d6ebd3d3d5ec1dff9c  libFS-1.0.8.tar.bz2
 76d77499ee7120a56566891ca2c0dbcf  libICE-1.0.10.tar.bz2
 87c7fad1c1813517979184c8ccd76628  libSM-1.2.3.tar.bz2
 eeea9d5af3e6c143d0ea1721d27a5e49  libXScrnSaver-1.2.3.tar.bz2
 a9019421d3ee8b4937b6afd9025f018a  libXt-1.2.0.tar.bz2
 ac774cff8b493f566088a255dbf91201  libXmu-1.1.3.tar.bz2
 20f4627672edb2bd06a749f11aa97302  libXpm-3.5.12.tar.bz2
 e5e06eb14a608b58746bdd1c0bd7b8e3  libXaw-1.0.13.tar.bz2
 07e01e046a0215574f36a3aacb148be0  libXfixes-5.0.3.tar.bz2
 3fa0841ea89024719b20cd702a9b54e0  libXcomposite-0.4.5.tar.bz2
 802179a76bded0b658f4e9ec5e1830a4  libXrender-0.9.10.tar.bz2
 9b9be0e289130fb820aedf67705fc549  libXcursor-1.2.0.tar.bz2
 e3f554267a7a04b042dc1f6352bd6d99  libXdamage-1.1.5.tar.bz2
 6447db6a689fb530c218f0f8328c3abc  libfontenc-1.1.4.tar.bz2
 b7ca87dfafeb5205b28a1e91ac3efe85  libXfont2-2.0.3.tar.bz2
 4a433c24627b4ff60a4dd403a0990796  libXft-2.3.3.tar.bz2
 62c4af0839072024b4b1c8cbe84216c7  libXi-1.7.10.tar.bz2
 0d5f826a197dae74da67af4a9ef35885  libXinerama-1.1.4.tar.bz2
 18f3b20d522f45e4dadd34afb5bea048  libXrandr-1.5.2.tar.bz2
 5d6d443d1abc8e1f6fc1c57fb27729bb  libXres-1.2.0.tar.bz2
 ef8c2c1d16a00bd95b9fdcef63b8a2ca  libXtst-1.2.3.tar.bz2
 210b6ef30dda2256d54763136faa37b9  libXv-1.0.11.tar.bz2
 707175185a2e0490b8173686c657324f  libXvMC-1.0.11.tar.bz2
 0ddeafc13b33086357cfa96fae41ee8e  libXxf86dga-1.1.5.tar.bz2
 298b8fff82df17304dfdb5fe4066fe3a  libXxf86vm-1.1.4.tar.bz2
 d2f1f0ec68ac3932dd7f1d9aa0a7a11c  libdmx-1.1.4.tar.bz2
 b34e2cbdd6aa8f9cc3fa613fd401a6d6  libpciaccess-0.16.tar.bz2
 dd7e1e946def674e78c0efbc5c7d5b3b  libxkbfile-1.1.0.tar.bz2
 42dda8016943dc12aff2c03a036e0937  libxshmfence-1.3.tar.bz2
 EOF

   To download the needed files using wget, use the following commands:

 mkdir lib &&
 cd lib &&
 grep -v '^#' ../lib-7.md5 | awk '{print $2}' | wget -i- -c \
     -B https://www.x.org/pub/individual/lib/ &&
 md5sum -c ../lib-7.md5

  Installation of Xorg Libraries

  Note

   When installing multiple packages in a script, the installation needs to
   be done as the root user. There are three general options that can be used
   to do this:

    1. Run the entire script as the root user (not recommended).

    2. Use the sudo command from the Sudo-1.8.27 package.

    3. Use su -c "command arguments" (quotes required) which will ask for the
       root password for every iteration of the loop.

   One way to handle this situation is to create a short bash function that
   automatically selects the appropriate method. Once the command is set in
   the environment, it does not need to be set again.

 as_root()
 {
   if   [ $EUID = 0 ];        then $*
   elif [ -x /usr/bin/sudo ]; then sudo $*
   else                            su -c \\"$*\\"
   fi
 }

 export -f as_root

   Some libraries come with a test suite. If you wish to execute them, either
   comment out the rm -rf ... below, so that, after all libraries are
   installed, you can come back to the corresponding directory and run make
   check, or do individual builds, running the tests for each of those
   distributed with working test suites. Alternatively, you can uncomment the
   line #make check ..., and at the end, check the test results with:

 grep -A9 summary *make_check.log

   BLFS developers have confirmed that libX11, libXt and libxshmfence are
   distributed with working test suites.

   First, start a subshell that will exit on error:

 bash -e

   Install all of the packages by running the following commands:

 for package in $(grep -v '^#' ../lib-7.md5 | awk '{print $2}')
 do
   packagedir=${package%.tar.bz2}
   tar -xf $package
   pushd $packagedir
   case $packagedir in
     libICE* )
       ./configure $XORG_CONFIG ICE_LIBS=-lpthread
     ;;

     libXfont2-[0-9]* )
       ./configure $XORG_CONFIG --disable-devel-docs
     ;;

     libXt-[0-9]* )
       ./configure $XORG_CONFIG \
                   --with-appdefaultdir=/etc/X11/app-defaults
     ;;

     * )
       ./configure $XORG_CONFIG
     ;;
   esac
   make
   #make check 2>&1 | tee ../$packagedir-make_check.log
   as_root make install
   popd
   rm -rf $packagedir
   as_root /sbin/ldconfig
 done

   Finally, exit the shell that was started earlier:

 exit

  Command Explanations

   ./configure $XORG_CONFIG ICE_LIBS=-lpthread: This fixes a change in glibc
   which breaks pulseaudio at runtime.

   --disable-devel-docs: Disable generation of text documentation in the
   libXfont2 package if xmlto-0.0.28 is installed without a text browser.
   Omit this parameter (or the entire case statement) if a text browser is
   installed.

   --with-fop: Use fop-2.3 to generate PDF documentation (only for the
   libXfont package).

  Configuration of Xorg Libraries

   If you've chosen to install Xorg into /usr, then no further configuration
   is necessary and you can skip the rest of this section. If you've opted
   for an alternate prefix, you should create two symlinks to satisfy the
   expected environment of several packages. Execute the following commands
   as the root user:

 ln -sv $XORG_PREFIX/lib/X11 /usr/lib/X11 &&
 ln -sv $XORG_PREFIX/include/X11 /usr/include/X11

  Contents

   Installed Programs: cxpm and sxpm
   Installed Libraries: libdmx.so, libfontenc.so, libFS.so, libICE.so,
   libpciaccess.so, libSM.so, libX11.so, libXaw6.so, libXaw7.so, libXaw.so,
   libXcomposite.so, libXcursor.so, libXdamage.so, libXext.so, libXfixes.so,
   libXfont2.so, libXft.so, libXinerama.so, libXi.so, libxkbfile.so,
   libXmu.so, libXmuu.so, libXpm.so, libXrandr.so, libXrender.so, libXRes.so,
   libxshmfence.so, libXss.so, libXt.so, libXtst.so, libXvMC.so, libXvMCW.so,
   libXv.so, libXxf86dga.so and libXxf86vm.so
   Installed Directories: $XORG_PREFIX/include/X11/fonts,
   $XORG_PREFIX/include/X11/Xtrans, $XORG_PREFIX/share/doc/libFS,
   $XORG_PREFIX/share/doc/libICE, $XORG_PREFIX/share/doc/libSM,
   $XORG_PREFIX/share/doc/libX11, $XORG_PREFIX/share/doc/libXaw,
   $XORG_PREFIX/share/doc/libXext, $XORG_PREFIX/share/doc/libXi,
   $XORG_PREFIX/share/doc/libXmu, $XORG_PREFIX/share/doc/libXrender,
   $XORG_PREFIX/share/doc/libXt, $XORG_PREFIX/share/doc/libXtst,
   $XORG_PREFIX/share/doc/libXvMC, $XORG_PREFIX/share/doc/xtrans and
   $XORG_PREFIX/share/X11/locale

    Short Descriptions

   cxpm             checks the format of an XPM file.                         
   sxpm             shows an XPM file and/or converts XPM 1 or 2 files to XPM 
                    3.                                                        
   libdmx.so        is the X Window System DMX (Distributed Multihead X)      
                    extension library.                                        
   libfontenc.so    is the X11 font encoding library.                         
   libFS.so         is the library interface to the X Font Server.            
   libICE.so        is the X Inter Client Exchange Library.                   
   libpciaccess.so  is the generic PCI Access library for X.                  
   libSM.so         is the X Session Management Library.                      
   libX11.so        is the Xlib Library.                                      
   libXaw6.so       is the X Athena Widgets Library, version 6.               
   libXaw7.so       is the X Athena Widgets Library, version 7.               
   libXaw.so        are symbolic links to the current X Athena Widgets        
                    Library, version 7.                                       
   libXcomposite.so is the X Composite Library.                               
   libXcursor.so    is the X Cursor management library.                       
   libXdamage.so    is the X Damage Library.                                  
   libXext.so       is the Misc X Extension Library.                          
   libXfixes.so     provides augmented versions of core protocol requests.    
   libXfont2.so     is the X font library.                                    
   libXft.so        is the X FreeType interface library.                      
   libXinerama.so   is the Xinerama Library.                                  
   libXi.so         is the X Input Extension Library.                         
   libxkbfile.so    is the xkbfile Library.                                   
   libXmu.so        is the X interface library for miscellaneous utilities    
                    not part of the Xlib standard.                            
   libXmuu.so       is the Mini Xmu Library.                                  
   libXpm.so        is the X Pixmap Library.                                  
   libXrandr.so     is the X Resize, Rotate and Reflection extension library. 
   libXrender.so    is the X Render Library.                                  
   libXRes.so       is the X-Resource extension client library.               
   libxshmfence.so  exposes an event API on top of Linux futexes.             
   libXss.so        is the X11 Screen Saver extension client library.         
   libXt.so         is the X Toolkit Library.                                 
   libXtst.so       is the Xtst Library.                                      
   libXvMC.so       is the X-Video Motion Compensation Library.               
   libXvMCW.so      is the XvMC Wrapper including the Nonstandard VLD         
                    extension.                                                
   libXv.so         is the X Window System video extension library.           
   libXxf86dga.so   is the client library for the XFree86-DGA extension.      
   libXxf86vm.so    is the client library for the XFree86-VidMode X           
                    extension.                                                

   Last updated on 2019-08-16 15:28:01 -0700

xcb-util-0.4.0

  Introduction to xcb-util

   The xcb-util package provides additional extensions to the XCB library,
   many that were previously found in Xlib, but are not part of core X
   protocol.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://xcb.freedesktop.org/dist/xcb-util-0.4.0.tar.bz2

     * Download MD5 sum: 2e97feed81919465a04ccc71e4073313

     * Download size: 292 KB

     * Estimated disk space required: 2.6 MB

     * Estimated build time: less than 0.1 SBU

    xcb-util Dependencies

      Required

   libxcb-1.13.1

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xcb-util

  Installation of xcb-util

   Install xcb-util by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libxcb-util.so
   Installed Directories: None

    Short Descriptions

   libxcb-util.so Provides utility functions for other XCB utilities. 

   Last updated on 2019-08-16 15:28:01 -0700

xcb-util-image-0.4.0

  Introduction to xcb-util-image

   The xcb-util-image package provides additional extensions to the XCB
   library.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://xcb.freedesktop.org/dist/xcb-util-image-0.4.0.tar.bz2

     * Download MD5 sum: 08fe8ffecc8d4e37c0ade7906b3f4c87

     * Download size: 324 KB

     * Estimated disk space required: 3.2 MB

     * Estimated build time: less than 0.1 SBU

    xcb-util-image Dependencies

      Required

   xcb-util-0.4.0

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xcb-util-image

  Installation of xcb-util-image

   Install xcb-util-image by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   To test the results, issue: LD_LIBRARY_PATH=$XORG_PREFIX/lib make check.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libxcb-image.so
   Installed Directories: None

    Short Descriptions

   libxcb-image.so Is a port of Xlib's XImage and XShmImage functions. 

   Last updated on 2019-08-16 15:28:01 -0700

xcb-util-keysyms-0.4.0

  Introduction to xcb-util-keysyms

   The xcb-util-keysyms package contains a library for handling standard X
   key constants and conversion to/from keycodes.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://xcb.freedesktop.org/dist/xcb-util-keysyms-0.4.0.tar.bz2

     * Download MD5 sum: 1022293083eec9e62d5659261c29e367

     * Download size: 284 KB

     * Estimated disk space required: 2.2 MB

     * Estimated build time: less than 0.1 SBU

    xcb-util-keysyms Dependencies

      Required

   libxcb-1.13.1

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xcb-util-keysyms

  Installation of xcb-util-keysyms

   Install xcb-util-keysyms by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libxcb-keysyms.so
   Installed Directories: None

    Short Descriptions

   libxcb-keysyms.so provides the standard X key constants and API functions  
                     for conversion to/from keycodes.                         

   Last updated on 2019-08-16 15:28:01 -0700

xcb-util-renderutil-0.3.9

  Introduction to xcb-util-renderutil

   The xcb-util-renderutil package provides additional extensions to the XCB
   library.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://xcb.freedesktop.org/dist/xcb-util-renderutil-0.3.9.tar.bz2

     * Download MD5 sum: 468b119c94da910e1291f3ffab91019a

     * Download size: 288 KB

     * Estimated disk space required: 2.4 MB

     * Estimated build time: less than 0.1 SBU

    xcb-util-renderutil Dependencies

      Required

   libxcb-1.13.1

      Optional

   Doxygen-1.8.16 (for documentation)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xcb-util-renderutil

  Installation of xcb-util-renderutil

   Install xcb-util-renderutil by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libxcb-render-util.so
   Installed Directories: None

    Short Descriptions

   libxcb-render-util.so Provides convenience functions for the Render        
                         extension.                                           

   Last updated on 2019-08-16 15:28:01 -0700

xcb-util-wm-0.4.1

  Introduction to xcb-util-wm

   The xcb-util-wm package contains libraries which provide client and
   window-manager helpers for EWMH and ICCCM.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://xcb.freedesktop.org/dist/xcb-util-wm-0.4.1.tar.bz2

     * Download MD5 sum: 87b19a1cd7bfcb65a24e36c300e03129

     * Download size: 316 KB

     * Estimated disk space required: 3.3 MB

     * Estimated build time: less than 0.1 SBU

    xcb-util-wm Dependencies

      Required

   libxcb-1.13.1

      Optional

   Doxygen-1.8.16

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xcb-util-wm

  Installation of xcb-util-wm

   Install xcb-util-wm by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: libxcb-ewmh.so and libxcb-icccm.so
   Installed Directories: None

    Short Descriptions

   libxcb-ewmh.so  provides the client and window-manager helpers for EWMH.  
   libxcb-icccm.so provides the client and window-manager helpers for ICCCM. 

   Last updated on 2019-08-16 15:28:01 -0700

xcb-util-cursor-0.1.3

  Introduction to xcb-util-cursor

   The xcb-util-cursor package provides a module that implements the XCB
   cursor library. It is the XCB replacement for libXcursor.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://xcb.freedesktop.org/dist/xcb-util-cursor-0.1.3.tar.bz2

     * Download MD5 sum: 6ac3b17cba51aaaa36ba035a53527214

     * Download size: 292 KB

     * Estimated disk space required: 2.5 MB

     * Estimated build time: less than 0.1 SBU

    xcb-util-cursor Dependencies

      Required

   xcb-util-0.4.0

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xcb-util-cursor

  Installation of xcb-util-cursor

   Install xcb-util-cursor by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libxcb-cursor.so
   Installed Directories: None

    Short Descriptions

   libxcb-cursor.so Is a port of Xlib's libXcursor functions. 

   Last updated on 2015-09-20 17:38:20 -0500

Mesa-19.1.4

  Introduction to Mesa

   Mesa is an OpenGL compatible 3D graphics library.

  Note

   Mesa is updated relatively often. You may want to use the latest available
   19.1.x mesa version.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://mesa.freedesktop.org/archive/mesa-19.1.4.tar.xz

     * Download (FTP): ftp://ftp.freedesktop.org/pub/mesa/mesa-19.1.4.tar.xz

     * Download MD5 sum: 90eed05e3239c96ad9e92eb11eb67ada

     * Download size: 10 MB

     * Estimated disk space required: 350 MB (with demos and docs), add 147
       MB if tests are enabled

     * Estimated build time: 2.3 SBU (with parallelism=4, demos, and docs),
       add 0.5 SBU if tests are enabled

    Additional Downloads

     * Recommended patch:
       http://www.linuxfromscratch.org/patches/blfs/9.0/mesa-19.1.4-add_xdemos-1.patch
       (installs 2 demo programs for testing Mesa - not needed if you install
       the mesa-demos package)

    Mesa Dependencies

      Required

   Xorg Libraries, libdrm-2.4.99, and Mako-1.1.0

      Recommended

   libva-2.5.0 (to provide VA-API support for some gallium drivers, note that
   there is a circular dependency. You must build libva first without EGL and
   GLX support, install this package, and rebuild libva), libvdpau-1.2 (to
   build VDPAU drivers), LLVM-8.0.1 (required for Gallium3D, nouveau, r300,
   and radeonsi drivers and for swrast, the software rasterizer which is
   sometimes referred to as llvmpipe. See http://www.mesa3d.org/systems.html
   for more information), and wayland-protocols-1.18 (required for
   Plasma-5.16.4, GNOME, and recommended for GTK+-3.24.10)

      Optional

   libgcrypt-1.8.5, lm_sensors-3.4.0 , Nettle-3.5.1, Valgrind-3.15.0,
   mesa-demos (provides more than 300 extra demos to test Mesa; this includes
   the same programs added by the patch above), Bellagio OpenMAX Integration
   Layer (for mobile platforms), and libtizonia

  Note

   The instructions below assume that LLVM with the r600/amdgpu and host
   backends and run-time type information (RTTI - needed for nouveau) are
   installed. You will need to modify the instructions if you choose not to
   install all of these. For an explanation of Gallium3D see
   https://en.wikipedia.org/wiki/Gallium3D.

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/mesa

  Installation of Mesa

   If you have downloaded the xdemos patch (needed if testing the Xorg
   installation per BLFS instructions), apply it by running the following
   command:

 patch -Np1 -i ../mesa-19.1.4-add_xdemos-1.patch

  Note

   The measurements above, and the Contents below, are for a full build. Many
   people will not wish to install drivers they cannot use, so the following
   paragraphs explain how to limit the drivers, and give an example which can
   be be reduced or amended as necessary.

   Now, select the drivers you wish to install. For the X86 architecture, the
   available gallium drivers are auto, or alternatively a choice from i915,
   nouveau, r300, r600, radeonsi, svga, swrast, and virgl. The latter is
   recommended if you intend to run the system under qemu-4.1.0. If you wish
   to build all available gallium drivers, use 'auto'.

   The (non-gallium) DRI drivers available in X86 are auto, or alternatively
   a choice from i915, i965, nouveau, r100, r200, and swrast. Use 'auto' to
   build all available DRI drivers, or use an empty string (DRI_DRIVERS="")
   if you wish to only build gallium drivers.

   The platforms ("window systems") available for X86 linux are x11, wayland,
   drm, and surfaceless. By not specifying anything, the meson build-system
   will build for all these platforms if you have the dependencies, identical
   to if you had specified '-Dplatforms=auto'.

   Modify the commands below for your desired drivers. The drivers listed
   below will cover most modern video cards and virtual machines. For help in
   selecting drivers see http://www.mesa3d.org/systems.html.

  Note

   Although the nouveau drivers can be built for both gallium and dri, the
   i915 driver can only be built for one or the other.

 GALLIUM_DRV="i915,nouveau,r600,radeonsi,svga,swrast,virgl"
 DRI_DRIVERS="i965,nouveau"

   Install Mesa by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=$XORG_PREFIX          \
       -Dbuildtype=release            \
       -Ddri-drivers=$DRI_DRIVERS     \
       -Dgallium-drivers=$GALLIUM_DRV \
       -Dgallium-nine=false           \
       -Dglx=dri                      \
       -Dosmesa=gallium               \
       -Dvalgrind=false               \
       ..                             &&

 unset GALLIUM_DRV DRI_DRIVERS &&

 ninja

   If you built the tests (see 'Command Explanations'), to run them issue:
   ninja test.

   Now, as the root user:

 ninja install

   If desired, install the optional documentation by running the following
   commands as the root user:

 install -v -dm755 /usr/share/doc/mesa-19.1.4 &&
 cp -rfv ../docs/* /usr/share/doc/mesa-19.1.4

  Command Explanations

   -Dbuildtype=release: This switch ensures a fully-optimized build, and
   disables debug assertions which will severely slow down the libraries in
   certain use-cases.

   -Ddri-drivers="...": This parameter controls which (non-gallium) dri
   drivers should be built.

   -Dgallium-drivers="...": This parameter controls which Gallium3D drivers
   should be built.

   -Dgallium-nine=true: This switch provides support for (MS Windows) games
   designed for DX9. It requires swrast.

   -Dosmesa=gallium: This switch enables building the libOSMesa library and
   provides Gallium3D support in it.

   -Dvalgrind=false: This parameter disables the usage of Valgrind during the
   build process. Remove this parameter if you have Valgrind installed, and
   wish to check for memory leaks.

   -Dbuild-tests=true: This option will cause the test code to be enabled.

  Contents

   Installed Programs: glxgears and glxinfo
   Installed Libraries: d3dadapter9.so, i915_dri.so, i965_dri.so,
   kms_swrast_dri.so, nouveau_dri.so, nouveau_drv_video.so,
   nouveau_vieux_dri.so, r200_dri.so, r300_dri.so, r600_dri.so,
   r600_drv_video.so, radeon_dri.so, radeonsi_dri.so, radeonsi_drv_video.so,
   swrast_dri.so, virtio_gpu_dri.so, vmwgfx_dri.so libEGL.so, libGL.so,
   libGLESv1_CM.so, libGLESv2.so, libOSMesa.so, libXvMCnouveau.so,
   libXvMCr600.so, libgbm.so, libglapi.so, libvulkan_intel.so,
   libvulkan_radeon.so, libxatracker.so, libvdpau_nouveau.so,
   libvdpau_r300.so, libvdpau_r600.so, and libvdpau_radeonsi.so
   Installed Directories:
   $XORG_PREFIX/{include/{EGL,GL,GLES,GLES2,GLES3,KHR,vulkan},lib/{d3d,dri,vdpau}}
   $XORG_PREFIX/share/drirc.d (contains workarounds for various applications,
   particularly browsers and games) $XORG_PREFIX/share/vulkan/icd.d, and
   /usr/share/doc/mesa-19.1.4 (optional)

    Short Descriptions

   glxgears        is a GL demo useful for troubleshooting graphics problems. 
   glxinfo         is a diagnostic program that displays information about    
                   the graphics hardware and installed GL libraries.          
   libEGL.so       provides a native platform graphics interface as defined   
                   by the EGL-1.4 specification.                              
   libgbm.so       is the Mesa Graphics Buffer Manager library.               
   libGLESv1_CM.so is the Mesa OpenGL ES 1.1 library.                         
   libGLES2.so     is the Mesa OpenGL ES 2.0 library.                         
   libGL.so        is the main Mesa OpenGL library.                           
   libOSMesa.so    is the Mesa Off-screen Rendering library.                  

   Last updated on 2019-08-17 01:22:18 -0700

xbitmaps-1.1.2

  Introduction to xbitmaps

   The xbitmaps package contains bitmap images used by multiple applications
   built in Xorg chapter.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/data/xbitmaps-1.1.2.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/data/xbitmaps-1.1.2.tar.bz2

     * Download MD5 sum: cedeef095918aca86da79a2934e03daf

     * Download size: 126 KB

     * Estimated disk space required: 1.6 MB

     * Estimated build time: less than 0.1 SBU

    xbitmaps Dependencies

      Required

   util-macros-1.19.2

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xbitmaps

  Installation of xbitmaps

   Install xbitmaps by running the following commands:

 ./configure $XORG_CONFIG

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directory: $XORG_PREFIX/include/X11/bitmaps

   Last updated on 2019-08-16 15:28:01 -0700

Xorg Applications

  Introduction to Xorg Applications

   The Xorg applications provide the expected applications available in
   previous X Window implementations.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP): https://www.x.org/pub/individual/app/

     * Download (FTP): ftp://ftp.x.org/pub/individual/app/

     * Download size: 4.9 MB

     * Estimated disk space required: 48 MB

     * Estimated build time: 1.5 SBU (ignoring the time to download)

    Xorg Applications Dependencies

      Required

   libpng-1.6.37, Mesa-19.1.4, xbitmaps-1.1.2, and xcb-util-0.4.0

      Optional

   Linux-PAM-1.3.1 and both cairo-5c and Nickle (only if you wish to try to
   run the undocumented xkeyhost script).

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/Xorg7Applications

  Downloading Xorg Applications

   First, create a list of files to be downloaded. This file will also be
   used to verify the integrity of the downloads when complete:

 cat > app-7.md5 << "EOF"
 3b9b79fa0f9928161f4bad94273de7ae  iceauth-1.0.8.tar.bz2
 c4a3664e08e5a47c120ff9263ee2f20c  luit-1.1.1.tar.bz2
 18c429148c96c2079edda922a2b67632  mkfontdir-1.0.7.tar.bz2
 215940de158b1a3d8b3f8b442c606e2f  mkfontscale-1.2.1.tar.bz2
 92be564d4be7d8aa7b5024057b715210  sessreg-1.1.2.tar.bz2
 93e736c98fb75856ee8227a0c49a128d  setxkbmap-1.3.2.tar.bz2
 3a93d9f0859de5d8b65a68a125d48f6a  smproxy-1.0.6.tar.bz2
 e96b56756990c56c24d2d02c2964456b  x11perf-1.6.1.tar.bz2
 e50587c1bb832aafd1a19d91a0890a0b  xauth-1.1.tar.bz2
 5b6405973db69c0443be2fba8e1a8ab7  xbacklight-1.2.3.tar.bz2
 9956d751ea3ae4538c3ebd07f70736a0  xcmsdb-1.0.5.tar.bz2
 25cc7ca1ce5dcbb61c2b471c55e686b5  xcursorgen-1.0.7.tar.bz2
 8809037bd48599af55dad81c508b6b39  xdpyinfo-1.3.2.tar.bz2
 480e63cd365f03eb2515a6527d5f4ca6  xdriinfo-1.0.6.tar.bz2
 eec82a5d4b599736f0fa637e96136746  xev-1.2.3.tar.bz2
 90b4305157c2b966d5180e2ee61262be  xgamma-1.0.6.tar.bz2
 a48c72954ae6665e0616f6653636da8c  xhost-1.0.8.tar.bz2
 ac6b7432726008b2f50eba82b0e2dbe4  xinput-1.6.3.tar.bz2
 12610df19df2af3797f2c130ee2bce97  xkbcomp-1.4.2.tar.bz2
 c747faf1f78f5a5962419f8bdd066501  xkbevd-1.1.4.tar.bz2
 502b14843f610af977dffc6cbf2102d5  xkbutils-1.0.4.tar.bz2
 938177e4472c346cf031c1aefd8934fc  xkill-1.0.5.tar.bz2
 61671fee12535347db24ec3a715032a7  xlsatoms-1.1.3.tar.bz2
 4fa92377e0ddc137cd226a7a87b6b29a  xlsclients-1.1.4.tar.bz2
 e50ffae17eeb3943079620cb78f5ce0b  xmessage-1.0.5.tar.bz2
 51f1d30a525e9903280ffeea2744b1f6  xmodmap-1.0.10.tar.bz2
 eaac255076ea351fd08d76025788d9f9  xpr-1.0.5.tar.bz2
 cc369c28383a5d7144e7197ee7d30bfa  xprop-1.2.4.tar.bz2
 fe40f7a4fd39dd3a02248d3e0b1972e4  xrandr-1.5.1.tar.xz
 34ae801ef994d192c70fcce2bdb2a1b2  xrdb-1.2.0.tar.bz2
 c56fa4adbeed1ee5173f464a4c4a61a6  xrefresh-1.0.6.tar.bz2
 70ea7bc7bacf1a124b1692605883f620  xset-1.2.4.tar.bz2
 5fe769c8777a6e873ed1305e4ce2c353  xsetroot-1.1.2.tar.bz2
 b13afec137b9b331814a9824ab03ec80  xvinfo-1.1.4.tar.bz2
 11794a8eba6d295a192a8975287fd947  xwd-1.0.7.tar.bz2
 26d46f7ef0588d3392da3ad5802be420  xwininfo-1.1.5.tar.bz2
 79972093bb0766fcd0223b2bd6d11932  xwud-1.0.5.tar.bz2
 EOF

   To download the needed files using wget, use the following commands:

 mkdir app &&
 cd app &&
 grep -v '^#' ../app-7.md5 | awk '{print $2}' | wget -i- -c \
     -B https://www.x.org/pub/individual/app/ &&
 md5sum -c ../app-7.md5

  Installation of Xorg Applications

  Note

   When installing multiple packages in a script, the installation needs to
   be done as the root user. There are three general options that can be used
   to do this:

    1. Run the entire script as the root user (not recommended).

    2. Use the sudo command from the Sudo-1.8.27 package.

    3. Use su -c "command arguments" (quotes required) which will ask for the
       root password for every iteration of the loop.

   One way to handle this situation is to create a short bash function that
   automatically selects the appropriate method. Once the command is set in
   the environment, it does not need to be set again.

 as_root()
 {
   if   [ $EUID = 0 ];        then $*
   elif [ -x /usr/bin/sudo ]; then sudo $*
   else                            su -c \\"$*\\"
   fi
 }

 export -f as_root

   First, start a subshell that will exit on error:

 bash -e

   Install all of the packages by running the following commands:

 for package in $(grep -v '^#' ../app-7.md5 | awk '{print $2}')
 do
   packagedir=${package%.tar.?z*}
   tar -xf $package
   pushd $packagedir
      case $packagedir in
        luit-[0-9]* )
          sed -i -e "/D_XOPEN/s/5/6/" configure
        ;;
      esac

      ./configure $XORG_CONFIG
      make
      as_root make install
   popd
   rm -rf $packagedir
 done

   Finally, exit the shell that was started earlier:

 exit

   Unless you installed the optional dependencies, remove an undocumented
   script which is reported to be broken (xkeystone provided by the xrandr
   package).

 as_root rm -f $XORG_PREFIX/bin/xkeystone

  Contents

   Installed Programs: iceauth, luit, mkfontdir, mkfontscale, sessreg,
   setxkbmap, smproxy, x11perf, x11perfcomp, xauth, xbacklight, xcmsdb,
   xcursorgen, xdpr, xdpyinfo, xdriinfo, xev, xgamma, xhost, xinput, xkbbell,
   xkbcomp, xkbevd, xkbvleds, xkbwatch, xkill, xlsatoms, xlsclients,
   xmessage, xmodmap, xpr, xprop, xrandr, xrdb, xrefresh, xset, xsetroot,
   xvinfo, xwd, xwininfo, and xwud
   Installed Libraries: None
   Installed Directories: None

    Short Descriptions

   iceauth     is the ICE authority file utility.                             
   luit        provides locale and ISO 2022 support for Unicode terminals.    
   mkfontdir   creates an index of X font files in a directory.               
   mkfontscale creates an index of scalable font files for X.                 
   sessreg     manages utmp/wtmp entries for non-init clients.                
   setxkbmap   sets the keyboard using the X Keyboard Extension.              
   smproxy     is the Session Manager Proxy.                                  
   x11perf     is an X11 server performance test program.                     
   x11perfcomp is an X11 server performance comparison program.               
   xauth       is the X authority file utility.                               
   xbacklight  adjusts backlight brightness using RandR extension.            
   xcmsdb      is the Device Color Characterization utility for the X Color   
               Management System.                                             
   xcursorgen  creates an X cursor file from a collection of PNG images.      
   xdpr        dumps an X window directly to a printer.                       
   xdpyinfo    is a display information utility for X.                        
   xdriinfo    queries configuration information of DRI drivers.              
   xev         prints contents of X events.                                   
   xgamma      alters a monitor's gamma correction through the X server.      
   xhost       is a server access control program for X.                      
   xinput      is a utility to configure and test X input devices.            
   xkbbell     is an XKB utility program that raises a bell event.            
   xkbcomp     compiles an XKB keyboard description.                          
   xkbevd      is the XKB event daemon.                                       
   xkbvleds    shows the XKB status of keyboard LEDs.                         
   xkbwatch    monitors modifier keys and LEDs.                               
   xkill       kills a client by its X resource.                              
   xlsatoms    lists interned atoms defined on the server.                    
   xlsclients  lists client applications running on a display.                
   xmessage    displays a message or query in a window.                       
   xmodmap     is a utility for modifying keymaps and pointer button mappings 
               in X.                                                          
   xpr         prints an X window dump.                                       
   xprop       is a property displayer for X.                                 
   xrandr      is a primitive command line interface to RandR extension.      
   xrdb        is the X server resource database utility.                     
   xrefresh    refreshes all or part of an X screen.                          
   xset        is the user preference utility for X.                          
   xsetroot    is the root window parameter setting utility for X.            
   xvinfo      prints out X-Video extension adaptor information.              
   xwd         dumps an image of an X window.                                 
   xwininfo    is a window information utility for X.                         
   xwud        is an image displayer for X.                                   

   Last updated on 2019-08-16 15:28:01 -0700

xcursor-themes-1.0.6

  Introduction to xcursor-themes

   The xcursor-themes package contains the redglass and whiteglass animated
   cursor themes.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/data/xcursor-themes-1.0.6.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/data/xcursor-themes-1.0.6.tar.bz2

     * Download MD5 sum: aea14eabf40528ec4db18f1cfcf5c458

     * Download size: 2.3 MB

     * Estimated disk space required: 15 MB

     * Estimated build time: less than 0.1 SBU

    xcursor-themes Dependencies

      Required

   Xorg Applications

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xcursor-themes

  Installation of xcursor-themes

   Install xcursor-themes by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directories: $XORG_PREFIX/share/icons/handhelds,
   $XORG_PREFIX/share/icons/redglass and $XORG_PREFIX/share/icons/whiteglass

   Last updated on 2019-08-16 15:28:01 -0700

Xorg Fonts

  Introduction to Xorg Fonts

   The Xorg font packages provide some scalable fonts and supporting packages
   for Xorg applications. Many people will want to install other TTF or OTF
   fonts in addition to, or instead of, these. Some are listed at the section
   called âTTF and OTF fontsâ.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP): https://www.x.org/pub/individual/font/

     * Download (FTP): ftp://ftp.x.org/pub/individual/font/

     * Download size: 3.0 MB

     * Estimated disk space required: 8.8 MB

     * Estimated build time: 0.1 SBU

    Xorg Fonts Dependencies

      Required

   xcursor-themes-1.0.6

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/Xorg7Fonts

  Downloading Xorg Fonts

   First, create a list of files to be downloaded. This file will also be
   used to verify the integrity of the downloads when complete:

 cat > font-7.md5 << "EOF"
 23756dab809f9ec5011bb27fb2c3c7d6  font-util-1.3.1.tar.bz2
 bbae4f247b88ccde0e85ed6a403da22a  encodings-1.0.5.tar.bz2
 6d25f64796fef34b53b439c2e9efa562  font-alias-1.0.3.tar.bz2
 fcf24554c348df3c689b91596d7f9971  font-adobe-utopia-type1-1.0.4.tar.bz2
 e8ca58ea0d3726b94fe9f2c17344be60  font-bh-ttf-1.0.3.tar.bz2
 53ed9a42388b7ebb689bdfc374f96a22  font-bh-type1-1.0.3.tar.bz2
 bfb2593d2102585f45daa960f43cb3c4  font-ibm-type1-1.0.3.tar.bz2
 6306c808f7d7e7d660dfb3859f9091d2  font-misc-ethiopic-1.0.3.tar.bz2
 3eeb3fb44690b477d510bbd8f86cf5aa  font-xfree86-type1-1.0.4.tar.bz2
 EOF

   To download the needed files using wget, use the following commands:

 mkdir font &&
 cd font &&
 grep -v '^#' ../font-7.md5 | awk '{print $2}' | wget -i- -c \
     -B https://www.x.org/pub/individual/font/ &&
 md5sum -c ../font-7.md5

  Installation of Xorg Fonts

  Note

   When installing multiple packages in a script, the installation needs to
   be done as the root user. There are three general options that can be used
   to do this:

    1. Run the entire script as the root user (not recommended).

    2. Use the sudo command from the Sudo-1.8.27 package.

    3. Use su -c "command arguments" (quotes required) which will ask for the
       root password for every iteration of the loop.

   One way to handle this situation is to create a short bash function that
   automatically selects the appropriate method. Once the command is set in
   the environment, it does not need to be set again.

 as_root()
 {
   if   [ $EUID = 0 ];        then $*
   elif [ -x /usr/bin/sudo ]; then sudo $*
   else                            su -c \\"$*\\"
   fi
 }

 export -f as_root

   First, start a subshell that will exit on error:

 bash -e

   Install all of the packages by running the following commands:

 for package in $(grep -v '^#' ../font-7.md5 | awk '{print $2}')
 do
   packagedir=${package%.tar.bz2}
   tar -xf $package
   pushd $packagedir
     ./configure $XORG_CONFIG
     make
     as_root make install
   popd
   as_root rm -rf $packagedir
 done

   Finally, exit the shell that was started earlier:

 exit

   When all of the fonts have been installed, the system must be configured
   so that Fontconfig can find the TrueType fonts since they are outside of
   the default search path of /usr/share/fonts. Make symlinks to the Xorg
   TrueType font directories by running the following commands as the root
   user:

 install -v -d -m755 /usr/share/fonts                               &&
 ln -svfn $XORG_PREFIX/share/fonts/X11/OTF /usr/share/fonts/X11-OTF &&
 ln -svfn $XORG_PREFIX/share/fonts/X11/TTF /usr/share/fonts/X11-TTF

  Contents

   Installed Programs: bdftruncate and ucs2any
   Installed Libraries: None
   Installed Directories: $XORG_PREFIX/share/fonts

    Short Descriptions

   bdftruncate generates a truncated BDF font from an ISO 10646-1 encoded BDF 
               font.                                                          
   ucs2any     generates BDF fonts in any encoding from an ISO 10646-1        
               encoded BDF font.                                              

   Last updated on 2019-08-16 15:28:01 -0700

XKeyboardConfig-2.27

  Introduction to XKeyboardConfig

   The XKeyboardConfig package contains the keyboard configuration database
   for the X Window System.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/data/xkeyboard-config/xkeyboard-config-2.27.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/data/xkeyboard-config/xkeyboard-config-2.27.tar.bz2

     * Download MD5 sum: 316753e35d3906d042c74230612eab9f

     * Download size: 1.6 MB

     * Estimated disk space required: 14 MB

     * Estimated build time: less than 0.1 SBU

    XKeyboardConfig Dependencies

      Required

   Xorg Libraries

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xkeyboard-config

  Installation of XKeyboardConfig

   Install XKeyboardConfig by running the following commands:

 ./configure $XORG_CONFIG --with-xkb-rules-symlink=xorg &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   --with-xkb-rules-symlink=xorg: By default, the XKB rules installed are
   named "base". This creates symlinks named "xorg" to those rules, which is
   the default name used by Xorg.

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directory: $XORG_PREFIX/share/X11/xkb

   Last updated on 2019-08-16 15:28:01 -0700

Xorg-Server-1.20.5

  Introduction to Xorg Server

   The Xorg Server is the core of the X Window system.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/xserver/xorg-server-1.20.5.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/xserver/xorg-server-1.20.5.tar.bz2

     * Download MD5 sum: c9fc7e21e11286dbedd22c00df652130

     * Download size: 5.8 MB

     * Estimated disk space required: 256 MB (with tests)

     * Estimated build time: 0.8 SBU (using parallelism=4; with tests)

    Xorg Server Dependencies

      Required

   Pixman-0.38.4 and Xorg Fonts (only font-util), and at runtime:
   xkeyboard-config-2.27

      Recommended

   elogind-241.3, libepoxy-1.5.3 (needed for glamor and Xwayland),
   Polkit-0.116 (runtime), Wayland-1.17.0 (needed for Xwayland), and
   wayland-protocols-1.18

      Optional

   acpid-2.0.32 (runtime), Doxygen-1.8.16 (to build API documentation),
   fop-2.3 (to build documentation), Nettle-3.5.1, libgcrypt-1.8.5,
   xcb-util-keysyms-0.4.0, xcb-util-image-0.4.0, xcb-util-renderutil-0.3.9,
   xcb-util-wm-0.4.1 (all three to build Xephyr), xmlto-0.0.28 (to build
   documentation), libunwind, and xorg-sgml-doctools (to build documentation)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/Xorg7Server

  Installation of Xorg Server

   Install the server by running the following commands:

 ./configure $XORG_CONFIG            \
             --enable-glamor         \
             --enable-suid-wrapper   \
             --with-xkb-output=/var/lib/xkb &&
 make

   To test the results, issue: make check. You will need to run ldconfig as
   the root user first or some tests may fail.

   Now as the root user:

 make install &&
 mkdir -pv /etc/X11/xorg.conf.d &&
 cat >> /etc/sysconfig/createfiles << "EOF"
 /tmp/.ICE-unix dir 1777 root root
 /tmp/.X11-unix dir 1777 root root
 EOF

  Command Explanations

   --enable-glamor: Build the Glamor DIX (Device Independent X) module which
   is currently used by: R600 or later radeon video chipsets, the modesetting
   driver (which is part of this package) for hardware using KMS which offers
   acceleration, and (optionally) the intel driver.

   --enable-suid-wrapper: Build suid-root wrapper for legacy driver support
   on rootless xserver systems.

   --disable-systemd-logind: This switch disables elogind integration
   allowing Xorg Server to work without having the PAM module configured.

   --enable-install-setuid: This switch restores the setuid bit to the Xorg
   executable allowing Xorg Server to work with a virtual terminal designated
   on the startx command line.

   cat >> /etc/sysconfig/createfiles...: This command creates the
   /tmp/.ICE-unix and /tmp/.X11-unix directories at startup, and ensures that
   the permissions and ownership are correct as required by the server.

   --enable-dmx: Build DMX (Distributed Multihead X) server.

   --enable-kdrive: this option allows the configure script to enable Xephyr
   if its dependencies are met.

  Contents

   Installed Programs: cvt, gtf, X, Xnest, Xorg, and Xvfb; optional:
   dmxaddinput, dmxaddscreen, dmxinfo, dmxreconfig, dmxresize, dmxrminput,
   dmxrmscreen, dmxtodmx, dmxwininfo, vdltodmx, Xdmx, xdmxconfig, Xephyr,
   Xfbdev and Xwayland
   Installed Libraries: several under
   $XORG_PREFIX/lib/xorg/modules/{,drivers,extensions} including
   modesetting_drv.so
   Installed Directories:
   $XORG_PREFIX/{include/xorg,lib/xorg,share/X11/xorg.conf.d} and
   /var/lib/xkb

    Short Descriptions

   cvt                calculates VESA CVT mode lines.                         
   dmx*               are various tools used for manipulating the dmx server. 
   gtf                calculates VESA GTF mode lines.                         
   vdltodmx           is a tool used to convert VDL config files to DMX       
                      config files.                                           
   X                  is a symbolic link to Xorg.                             
   Xdmx               is a proxy X server that uses one or more other X       
                      servers as its display devices.                         
   Xephyr             is a nested X server which supports modern X            
                      extensions.                                             
   Xnest              is a nested X server.                                   
   Xorg               is the X11R7 X Server.                                  
   Xvfb               is the virtual framebuffer X server for X Version 11.   
   xdmxconfig         is a graphical configuration utility for the dmx        
                      server.                                                 
   Xwayland           allows the X server to run X clients under wayland      
                      (i.e. wayland provides the input devices and handles    
                      the presentation of the windows).                       
   modesetting_drv.so provides a video driver for machines using Kernel Mode  
                      Setting (KMS). This will use glamor if that has been    
                      enabled and the hardware offers acceleration.           

   Last updated on 2019-08-16 15:28:01 -0700

Xorg Drivers

  Introduction to Xorg Drivers

   The Xorg Drivers page contains the instructions for building Xorg drivers
   that are necessary in order for Xorg Server to take advantage of the
   hardware that it is running on. At least one input and one video driver
   are required for Xorg Server to start.

   On machines using KMS, the modesetting driver is provided by xorg-server
   and can be used instead of the video driver for the specific hardware, but
   with reduced performance. It can also be used (without hardware
   acceleration) in virtual machines running under qemu.

  Note

   If you are unsure which video hardware you have, you can use lspci from
   pciutils-3.6.2 to find out which video hardware you have and then look at
   the descriptions of the packages in order to find out which driver you
   need.

  Note

   In addition to the drivers listed below, there are several other drivers
   for very old hardware that may still be relevant. The latest versions of
   these drivers may be downloaded from
   https://www.x.org/archive/individual/driver. Instructions for building
   these now intermittently maintained drivers may be found in a prior
   version of BLFS:
   http://www.linuxfromscratch.org/blfs/view/7.6/x/x7driver.html

    Xorg Input Drivers

     * libevdev-1.7.0

     * Xorg Evdev Driver-2.10.6

     * libinput-1.14.0

     * Xorg Libinput-0.29.0

     * Xorg Synaptics Driver-1.9.1

     * Xorg Wacom Driver-0.37.0

    Xorg Video Drivers

     * Xorg AMDGPU Driver-19.0.1

     * Xorg ATI Driver-19.0.1

     * Xorg Fbdev Driver-0.5.0

     * Xorg Intel Driver-20190723

     * Xorg Nouveau Driver-1.0.16

     * Xorg VMware Driver-13.3.0

    Hardware Video Acceleration

     * libva-2.5.0

     * libvdpau-1.2

     * libvdpau-va-gl-0.4.0

  libevdev 1.7.0

    Introduction to libevdev

   The libevdev package contains common functions for Xorg input drivers.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://www.freedesktop.org/software/libevdev/libevdev-1.7.0.tar.xz

     * Download MD5 sum: fabe87d8d7d7f7cdb4a26e5dc99fc517

     * Download size: 428 KB

     * Estimated disk space required: 8.1 MB (with tests)

     * Estimated build time: 0.2 SBU (with tests)

      libevdev Dependencies

        Optional

   Doxygen-1.8.16, Python-2.7.16, and Valgrind-3.15.0 (optional for tests)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libevdev

    Kernel Configuration

   Enable the following options in the kernel configuration and recompile the
   kernel if necessary:

 Device Drivers  --->
   Input device support --->
     <*> Generic input layer (needed for...) [CONFIG_INPUT]
     <*>   Event interface                   [CONFIG_INPUT_EVDEV]
     [*]   Miscellaneous devices  --->       [CONFIG_INPUT_MISC]
       <*>    User level driver support      [CONFIG_INPUT_UINPUT]

    Installation of libevdev

   Install libevdev by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   The regression tests can be run as the root user with make check, in a
   graphical session. Note that on some systems, the tests may cause a hard
   lockup and require a reboot. On laptops, the system will go into Sleep and
   need to be woken up to finish the test suites.

   Now, as the root user:

 make install

    Contents

   Installed Xorg Programs: libevdev-tweak-device, mouse-dpi-tool, and
   touchpad-edge-detector
   Installed Xorg Library: libevdev.so
   Installed Xorg Directory: $XORG_PREFIX/include/libevdev-1.0

      Short Descriptions

   libevdev-tweak-device  is a tool to change some kernel device properties.  
   mouse-dpi-tool         is a tool to estimate the resolution of a mouse.    
   touchpad-edge-detector touchpad-edge-detector is a tool that reads the     
                          touchpad events from the kernel and calculates the  
                          minimum and maximum for the x and y coordinates,    
                          respectively.                                       
   libevdev.so            is a library of Xorg driver input functions.        

  Xorg Evdev Driver-2.10.6

    Introduction to Xorg Evdev Driver

   The Xorg Evdev Driver package contains a Generic Linux input driver for
   the Xorg X server. It handles keyboard, mouse, touchpads and wacom
   devices, though for touchpad and wacom advanced handling, additional
   drivers are required.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/driver/xf86-input-evdev-2.10.6.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/driver/xf86-input-evdev-2.10.6.tar.bz2

     * Download MD5 sum: e8bd1edc6751f92e425cae7eba3c61eb

     * Download size: 400 KB

     * Estimated disk space required: 3.9 MB

     * Estimated build time: less than 0.1 SBU

      Xorg Evdev Driver Dependencies

        Required

   libevdev-1.7.0, mtdev-1.1.5, and Xorg-Server-1.20.5

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xorg-evdev-driver

    Installation of Xorg Evdev Driver

   Install Xorg Evdev Driver by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

    Contents

   Installed Xorg Driver: evdev_drv.so

      Short Descriptions

   evdev_drv.so is an Xorg input driver for Linux generic event devices. 

  libinput-1.14.0

    Introduction to libinput

   libinput is a library that handles input devices for display servers and
   other applications that need to directly deal with input devices.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://www.freedesktop.org/software/libinput/libinput-1.14.0.tar.xz

     * Download MD5 sum: 1c33d49fc7985926eab877e3de9c17eb

     * Download size: 552 KB

     * Estimated disk space required: 11 MB

     * Estimated build time: less than 0.1 SBU

      libinput Dependencies

        Required

   libevdev-1.7.0 and mtdev-1.1.5

        Optional

   Valgrind-3.15.0 (to run the tests), Sphinx (required to build
   documentation), GTK+-3.24.10 (to build the GUI event viewer), libunwind
   (required for tests), libwacom-0.29, and PyParsing (for one non-root test)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libinput

    kernel configuration for running the libinput testsuite

   Although libinput works with the same kernel configuration used by
   libevdev-1.7.0, its extensive testsuite requires the presence of
   /dev/uinput (as well as both Valgrind-3.15.0 and libunwind).

   If you wish to run the full tests, enable the following option in the
   kernel configuration and recompile the kernel if necessary:

 Device Drivers --->
   Input device support --->
     Miscellaneous Devices --->
     <*/M>   User level driver support        [CONFIG_INPUT_UINPUT]

   If you build this as a module, it needs to be inserted before the
   testsuite runs.

   On an Xorg system you will also need to prevent the events generated
   during the testsuite from interfering with your desktop. Copy the file
   test/50-litest.conf into ${XORG_PREFIX}/share/X11/xorg.conf.d and restart
   X. For further information see libinput test suite.

    Installation of libinput

   Install libinput by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=$XORG_PREFIX \
       -Dudev-dir=/lib/udev  \
       -Ddebug-gui=false     \
       -Dtests=false         \
       -Ddocumentation=false \
       -Dlibwacom=false      \
       ..                    &&
 ninja

  Note

   If you want to run the full tests, remove -Dtests from the meson command
   above. Please read "kernel configuration for running the libinput
   testsuite" (above).

   If you have enabled the full tests, you can run the main tests as the root
   user by executing: ninja test. A very large number of tests will be run,
   about 20 fail (at least on an Xorg system).

   Now, as the root user:

 ninja install

   If Doxygen-1.8.16, Graphviz-2.40.1, and Sphinx were present during the
   build, you can install the generated documentation by running the
   following commands as the root user:

 install -v -dm755      /usr/share/doc/libinput-1.14.0/{html,api} &&
 cp -rv Documentation/* /usr/share/doc/libinput-1.14.0/html &&
 cp -rv api/*           /usr/share/doc/libinput-1.14.0/api

    Command Explanations

   -Dudev-dir=/lib/udev: This switch specifies where UDev rules and hwdb
   files will be installed.

   -Ddebug-gui=false: This switch disables creation of a visual debug helper
   for libinput. Remove if you want it, and you have GTK+-3.24.10 installed.

   -Dtests=false: This switch disables compilation of the main tests. Even
   with the tests defined as false, you can still run the first four minor
   tests, as a regular user, but one will be skipped if PyParsing is not
   installed.

   -Ddocumentation=false: This switch disables generation of the
   documentation. Remove if you want to generate it, and you have
   Doxygen-1.8.16 and Graphviz-2.40.1 installed.

   -Dlibwacom=false: Remove this option if you have the external library
   libwacom installed.

    Contents

   Installed Programs: libinput
   Installed Libraries: libinput.so
   Installed Directories: $XORG_PREFIX/libexec/libinput, /usr/share/libinput,
   and (optionally) /usr/share/doc/libinput-1.14.0

    Short Descriptions

   libinput    is a set of tools to interface with the libinput library. 
   libinput.so contains API functions for handling input devices.        

  Xorg Libinput Driver-0.29.0

    Introduction to Xorg Libinput Driver

   The X.Org Libinput Driver is a thin wrapper around libinput and allows for
   libinput to be used for input devices in X. This driver can be used as as
   drop-in replacement for evdev and synaptics.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/driver/xf86-input-libinput-0.29.0.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/driver/xf86-input-libinput-0.29.0.tar.bz2

     * Download MD5 sum: d600e8e2e30747b8ce49ec5294ff0ab6

     * Download size: 550 KB

     * Estimated disk space required: 3.6 MB (with tests)

     * Estimated build time: less than 0.1 SBU (with tests)

      Xorg Libinput Driver Dependencies

        Required

   libinput-1.14.0 and Xorg-Server-1.20.5

   User Notes:
   http://wiki.linuxfromscratch.org/blfs/wiki/xorg-libinput-driver

    Installation of Xorg Libinput Driver

   Install Xorg Libinput Driver by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   To test the results, issue make check.

   Now, as the root user:

 make install

    Contents

   Installed Xorg Driver: libinput_drv.so

      Short Descriptions

   libinput_drv.so is an Xorg input driver for mouse, keyboard, touchpad,     
                   touchscreen, and tablet devices.                           

  Xorg Synaptics Driver-1.9.1

    Introduction to Xorg Synaptics Driver

   The Xorg Synaptics Driver package contains the X.Org Input Driver, support
   programs and SDK for Synaptics touchpads. Even though the evdev driver can
   handle touchpads very well, this driver is required if you want to use
   advanced features like multi tapping, scrolling with touchpad, turning the
   touchpad off while typing, etc.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/driver/xf86-input-synaptics-1.9.1.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/driver/xf86-input-synaptics-1.9.1.tar.bz2

     * Download MD5 sum: cfb79d3c975151f9bbf30b727c260cb9

     * Download size: 492 KB

     * Estimated disk space required: 4.8 MB

     * Estimated build time: less than 0.1 SBU

      Xorg Synaptics Driver Dependencies

        Required

   libevdev-1.7.0 and Xorg-Server-1.20.5

   User Notes:
   http://wiki.linuxfromscratch.org/blfs/wiki/xorg-synaptics-driver

    Installation of Xorg Synaptics Driver

   Install Xorg Synaptics Driver by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

    Contents

   Installed Programs: synclient and syndaemon
   Installed Xorg Driver: synaptics_drv.so

      Short Descriptions

   synclient        is a command line utility used to query and modify        
                    Synaptics driver options.                                 
   syndaemon        is a program that monitors keyboard activity and disables 
                    the touchpad when the keyboard is being used.             
   synaptics_drv.so is an Xorg input driver for touchpads.                    

  Xorg Wacom Driver-0.37.0

    Introduction to Xorg Wacom Driver

   The Xorg Wacom Driver package contains the X.Org X11 driver and SDK for
   Wacom and Wacom-like tablets. It is not required to use a Wacom tablet,
   the xf86-input-evdev driver can handle these devices without problems.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://github.com/linuxwacom/xf86-input-wacom/releases/download/xf86-input-wacom-0.37.0/xf86-input-wacom-0.37.0.tar.bz2

     * Download MD5 sum: c6e9409e2fa3ae3f01eaf913a6ca9c9f

     * Download size: 636 KB

     * Estimated disk space required: 11 MB (with tests)

     * Estimated build time: 0.1 SBU (with tests)

      Xorg Wacom Drivers Dependencies

        Required

   Xorg-Server-1.20.5

        Optional

   Doxygen-1.8.16 and Graphviz-2.40.1

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xorg-wacom-driver

    Kernel Configuration

   To use a Wacom tablet with USB interface, enable the following options in
   your kernel configuration and recompile. Note that other configuration
   options could be required for tablet with a serial or bluetooth interface:

 Device Drivers  --->
   HID support  --->
     <*/M> HID bus support                                      [CONFIG_HID]
             Special HID drivers --->
               <*/M> Wacom Intuos/Graphire tablet support (USB) [CONFIG_HID_WACOM]

    Installation of Xorg Wacom Driver

   Install Xorg Wacom Driver by running the following commands:

 ./configure $XORG_CONFIG --with-systemd-unit-dir=no \
             --with-udev-rules-dir=/lib/udev/rules.d &&
 make

   To test the results, issue: make check.

   Now, as the root user:

 make install

    Contents

   Installed Programs: isdv4-serial-debugger, isdv4-serial-inputattach, and
   xsetwacom
   Installed Xorg Driver: wacom_drv.so

      Short Descriptions

   xsetwacom    is a commandline utility used to query and modify wacom       
                driver settings.                                              
   wacom_drv.so is an Xorg input driver for Wacom devices.                    

  Xorg AMDGPU Driver-19.0.1

    Introduction to Xorg AMDGPU Driver

   The Xorg AMDGPU Driver package contains the X.Org Video Driver for newer
   AMD Radeon video cards starting from Volcanic Islands. It can also be used
   for Southern and Sea Islands if the experimental support was enabled in
   the kernel.

   This package is known to build and work properly using an LFS-9.0
   platform.

  Note

   For Direct Rendering to work, you need to enable the radeonsi Gallium
   driver at Mesa-19.1.4 build time. Also, all cards require Firmware to be
   available when the kernel driver is loaded. Firmware can be obtained from
   http://anduin.linuxfromscratch.org/BLFS/linux-firmware/. See the section
   called âKernel Configuration for additional firmwareâ below for additional
   firmware.

      Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/driver/xf86-video-amdgpu-19.0.1.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/driver/xf86-video-amdgpu-19.0.1.tar.bz2

     * Download MD5 sum: f3b33958e99c896084f12cd48f7ba007

     * Download size: 432 KB

     * Estimated disk space required: 6.6 MB

     * Estimated build time: less than 0.1 SBU

      Xorg AMDGPU Driver Dependencies

        Required

   Xorg-Server-1.20.5 (must be built with glamor enabled)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xorg-amdgpu-driver

    Kernel Configuration

   Enable the following options in the kernel configuration and recompile the
   kernel if necessary:

 Device Drivers  --->
   Graphics support --->
    <*> Direct Rendering Manager (XFree86 ... support) ---> [CONFIG_DRM]
    <*/M> AMD GPU                                           [CONFIG_DRM_AMDGPU]
     [ /*] Enable amdgpu support for SI parts               [CONFIG_DRM_AMDGPU_SI]
     [ /*] Enable amdgpu support for CIK parts              [CONFIG_DRM_AMDGPU_CIK]

   The last two options enable experimental support for Southern and Sea
   Islands AMD GPUs so they can be used with this driver. Note that the
   support is marked experimental and disabled by default. Xorg ATI
   Driver-19.0.1 should be used for those GPUs.

    Kernel Configuration for additional firmware

   If you need to add firmware, install the file(s) and then point to them in
   the kernel configuration and recompile the kernel if necessary. To find
   out which firmware you need, consult the Decoder ring for engineering vs
   marketing names. Download any firmware for your card which is named like:
   <ENGINEERING_NAME>_rlc.bin, etc. Below is an example for Radeon R7 M340
   GPU, which is codenamed Iceland/Topaz, along with a network card that also
   requires the firmware:

 CONFIG_EXTRA_FIRMWARE="amdgpu/topaz_ce.bin amdgpu/topaz_k_smc.bin amdgpu/topaz_mc.bin
                        amdgpu/topaz_me.bin amdgpu/topaz_mec2.bin amdgpu/topaz_mec.bin
                        amdgpu/topaz_pfp.bin amdgpu/topaz_rlc.bin amdgpu/topaz_sdma1.bin
                        amdgpu/topaz_sdma.bin amdgpu/topaz_smc.bin rtl_nic/rtl8168e-3.fw"
 CONFIG_EXTRA_FIRMWARE_DIR="/lib/firmware"

  Note

   CONFIG_EXTRA_FIRMWARE should all be on one line. It is shown above as
   multiple lines for presentation only.

  Tip

   You can check dmesg output after boot to see which firmware is missing.

   Alternatively, if you change CONFIG_DRM_AMDGPU to '=m' in your linux
   kernel .config the firmware can be loaded automatically from
   /lib/firmware/amdgpu/ when it installs the module. This offers a tiny
   space saving, but also means that the screen will be blank for a longer
   time before the framebuffer appears. Distros take this approach because it
   is not practical to specify every possible firmware and the kernel would
   be excessively big.

    Installation of Xorg AMDGPU Driver

   Install Xorg AMDGPU Driver by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

    Contents

   Installed Xorg Driver: âamdgpu_drv.so

      Short Descriptions

   amdgpu_drv.so is an Xorg video driver for latest AMD Radeon video cards. 

  Xorg ATI Driver-19.0.1

    Introduction to Xorg ATI Driver

   The Xorg ATI Driver package contains the X.Org Video Driver for ATI Radeon
   video cards including all chipsets ranging from R100 to the "Volcanic
   Islands" chipsets.

   This package is known to build and work properly using an LFS-9.0
   platform.

  Note

   For Direct Rendering to work with newer Radeon Cards (R300 and later
   chipsets), you need to enable the r300, r600 and radeonsi Gallium drivers
   at Mesa-19.1.4 build time. Also, some cards require Firmware to be
   available when the kernel driver is loaded. Firmware can be obtained from
   http://anduin.linuxfromscratch.org/BLFS/linux-firmware/. See the section
   called âKernel Configuration for additional firmwareâ below for additional
   firmware.

      Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/driver/xf86-video-ati-19.0.1.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/driver/xf86-video-ati-19.0.1.tar.bz2

     * Download MD5 sum: 47eccf71823206ade9629cba69de7ef6

     * Download size: 884 KB

     * Estimated disk space required: 21 MB

     * Estimated build time: 0.2 SBU

      Xorg ATI Driver Dependencies

        Required

   Xorg-Server-1.20.5 (recommended to be built with glamor enabled)

  Note

   Glamor is required for Southern, Sea or Volcanic Islands GPUs, and used by
   default in all other R600 or later radeon GPUs. To see which GPUs are in
   these categories, read the Decoder ring for engineering vs marketing
   names.

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xorg-ati-driver

    Kernel Configuration

   Enable the following options in the kernel configuration and recompile the
   kernel if necessary:

 Device Drivers  --->
   Graphics support --->
    <*> Direct Rendering Manager (XFree86 ... support) ---> [CONFIG_DRM]
    <*> ATI Radeon                                          [CONFIG_DRM_RADEON]

    Kernel Configuration for additional firmware

   If you need to add firmware, install the file(s) and then point to them in
   the kernel configuration and recompile the kernel if necessary. To find
   out which firmware you need, consult the Decoder ring for engineering vs
   marketing names. Download any firmware for your card which is named like:
   <ENGINEERING_NAME>_rlc.bin, etc. Note that for R600 and R700 family,
   generic R600_rlc.bin and R700_rlc.bin are necessary in addition to the
   model specific firmware, while for later generations you need the
   BTC_rlc.bin in addition to the model specific firmware. Below is an
   example for a Radeon HD6470 which is a "Northern Islands" GPU, plus an RTL
   network chip that also requests extra firmware:

 CONFIG_EXTRA_FIRMWARE="radeon/BTC_rlc.bin radeon/CAICOS_mc.bin radeon/CAICOS_me.bin
 radeon/CAICOS_pfp.bin radeon/CAICOS_smc.bin rtl_nic/rtl8168e-3.fw"
 CONFIG_EXTRA_FIRMWARE_DIR="/lib/firmware"

  Note

   CONFIG_EXTRA_FIRMWARE should all be on one line. It is shown above as two
   lines for presentation only.

  Tip

   You can check dmesg output after boot to see which firmware is missing.

   Alternatively, if you change CONFIG_DRM_RADEON to '=m' in your .config the
   firmware can be loaded automatically from /lib/firmware/radeon when it
   installs the module. This offers a tiny space saving, but also means that
   the screen will be blank for a longer time before the framebuffer appears.
   Distros take this approach because it is not practical to specify every
   possible firmware and the kernel would be excessively big.

    Installation of Xorg ATI Driver

   Install Xorg ATI Driver by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

    Contents

   Installed Xorg Drivers: ati_drv.so and radeon_drv.so

      Short Descriptions

   ati_drv.so    is a wrapper driver for ATI video cards that autodetects ATI 
                 video hardware and loads radeon, mach64 or r128 driver.      
   radeon_drv.so is an Xorg video driver for ATI Radeon based video cards.    

  Xorg Fbdev Driver-0.5.0

    Introduction to Xorg Fbdev Driver

   The Xorg Fbdev Driver package contains the X.Org Video Driver for
   framebuffer devices. This driver is often used as fallback driver if the
   hardware specific and VESA drivers fail to load or are not present. If
   this driver is not installed, Xorg Server will print a warning on startup,
   but it can be safely ignored if hardware specific driver works well.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/driver/xf86-video-fbdev-0.5.0.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/driver/xf86-video-fbdev-0.5.0.tar.bz2

     * Download MD5 sum: f07475655376be5a124d8187aacd87b6

     * Download size: 292 KB

     * Estimated disk space required: 2.5 MB

     * Estimated build time: less than 0.1 SBU

      Xorg Fbdev Driver Dependencies

        Required

   Xorg-Server-1.20.5

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xorg-fbdev-driver

    Installation of Xorg Fbdev Driver

   Install Xorg Fbdev Driver by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

    Contents

   Installed Xorg Driver: fbdev_drv.so

      Short Descriptions

   fbdev_drv.so is an Xorg video driver for framebuffer devices. 

  Xorg Intel Driver-20190723

    Introduction to Xorg Intel Driver

   The Xorg Intel Driver package contains the X.Org Video Driver for Intel
   integrated video chips including 8xx, 9xx, Gxx, Qxx, HD, Iris, and Iris
   Pro graphics processors.

   This package is known to build and work properly using an LFS-9.0
   platform.

  Note

   This is a development version of the Intel driver which is needed to work
   properly with the latest hardware.

      Package Information

     * Download (HTTP):
       http://anduin.linuxfromscratch.org/BLFS/xf86-video-intel/xf86-video-intel-20190723.tar.xz

     * Download (FTP):
       ftp://anduin.linuxfromscratch.org/BLFS/xf86-video-intel/xf86-video-intel-20190723.tar.xz

     * Download MD5 sum: 2a57bf1548916305bdb8e092b07dfc35

     * Download size: 934 KB

     * Estimated disk space required: 85 MB

     * Estimated build time: 0.7 SBU

      Xorg Intel Driver Dependencies

        Required

   xcb-util-0.4.0 and Xorg-Server-1.20.5

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xorg-intel-driver

    Kernel Configuration

   Enable the following options in the kernel configuration. Recompile the
   kernel if necessary:

 Device Drivers  --->
   Graphics support --->
    <*> Direct Rendering Manager (XFree86 ... support) ---> [CONFIG_DRM]
    <*> Intel 8xx/9xx/G3x/G4x/HD Graphics                   [CONFIG_DRM_I915]

    Installation of Xorg Intel Driver

   Install Xorg Intel Driver by running the following commands:

 ./autogen.sh $XORG_CONFIG     \
             --enable-kms-only \
             --enable-uxa      \
             --mandir=/usr/share/man &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install &&
      
 mv -v /usr/share/man/man4/intel-virtual-output.4 \
       /usr/share/man/man1/intel-virtual-output.1 &&
      
 sed -i '/\.TH/s/4/1/' /usr/share/man/man1/intel-virtual-output.1

    Working around problems with the Intel driver

   The SandyBridge New Acceleration (SNA) code is intended to replace the old
   UXA (UMA Acceleration Architecture), but it is a large body of code and
   may cause problems. However, the version of the code in the version
   control system listed above has been tested successfully with both SNA and
   UXA capabilities.

   To work around this problem, as well as enabling support for UXA, it is
   necessary to force UXA to be used by creating a configuration file. If
   this problem applies to you, create the following file as the root user
   and modify it as needed:

 cat >> /etc/X11/xorg.conf.d/20-intel.conf << "EOF"
 Section   "Device"
         Identifier "Intel Graphics"
         Driver     "intel"
         #Option     "DRI" "2"            # DRI3 is default
         #Option     "AccelMethod"  "sna" # default
         #Option     "AccelMethod"  "uxa" # fallback
 EndSection
 EOF

    Command Explanations

   --enable-kms-only: This switch omits the UMS (User Mode Setting) code.

   --enable-uxa: This switch allows the old UXA code to be compiled in
   addition to the default SNA.

    Contents

   Installed Program: intel-virtual-output
   Installed Library: libIntelXvMC.so
   Installed Xorg Driver: intel_drv.so

      Short Descriptions

   intel_drv.so is an Xorg video driver for Intel integrated graphics         
                chipsets.                                                     

  Xorg Nouveau Driver-1.0.16

    Introduction to Xorg Nouveau Driver

   The Xorg Nouveau Driver package contains the X.Org Video Driver for NVidia
   Cards including RIVA TNT, RIVA TNT2, GeForce 256, QUADRO, GeForce2,
   QUADRO2, GeForce3, QUADRO DDC, nForce, nForce2, GeForce4, QUADRO4, GeForce
   FX, QUADRO FX, GeForce 6XXX and GeForce 7xxx chipsets.

  Note

   This is a development version of the Nouveau driver which is needed to
   build properly with the latest xorg-server.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/driver/xf86-video-nouveau-1.0.16.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/driver/xf86-video-nouveau-1.0.16.tar.bz2

     * Download MD5 sum: ecd9be89d853301167e3d564c49f7a8e

     * Download size: 616 KB

     * Estimated disk space required: 15 MB

     * Estimated build time: 0.1 SBU

      Xorg Nouveau Drivers Dependencies

        Required

   Xorg-Server-1.20.5 (recommended to be built with glamor enabled)

  Note

   The new âMaxwellâ and âPascalâ GPUs require Glamor to be built with the
   Xorg server.

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xorg-nouveau-driver

    Kernel Configuration

   Enable the following options in the kernel configuration and recompile the
   kernel if necessary:

 Device Drivers  --->
   Graphics support --->
    <*> Direct Rendering Manager (XFree86 ... support) ---> [CONFIG_DRM]
    <*> Nouveau (NVIDIA) cards                              [CONFIG_DRM_NOUVEAU]
       [*]   Support for backlight control                     [CONFIG_DRM_NOUVEAU_BACKLIGHT]

    Installation of Xorg Nouveau Driver

   Install Xorg Nouveau Driver by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

    Glamor Acceleration

   Glamor is an acceleration library which uses cards' 3D capabilities to
   accelerate 2D rendering. Glamor acceleration is enabled by default for the
   new âMaxwellâ GPU's. According to the documentation, Glamor acceleration
   can be used with other chips as well, but that does not seem functional
   yet.

   If you want anyway to try to enable Glamor for GPU's other than the new
   âMaxwellâ ones, create the following file as the root user:

 cat >> /etc/X11/xorg.conf.d/nvidia.conf << "EOF"
 Section "Device"
         Identifier "nvidia"
         Driver "nouveau"
         Option "AccelMethod" "glamor"
 EndSection
 EOF

    Contents

   Installed Xorg Driver: nouveau_drv.so

      Short Descriptions

   nouveau_drv.so is an Xorg video driver for nVidia video cards. 

  Xorg VMware Driver-13.3.0

    Introduction to Xorg VMware Driver

   The Xorg VMware Driver package contains the X.Org Video Driver for VMware
   SVGA virtual video cards.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/driver/xf86-video-vmware-13.3.0.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/driver/xf86-video-vmware-13.3.0.tar.bz2

     * Download MD5 sum: 08d66d062055080ff699ab4869726ea2

     * Download size: 464 KB

     * Estimated disk space required: 12 MB

     * Estimated build time: 0.1 SBU

      Xorg VMware Driver Dependencies

        Required

   Xorg-Server-1.20.5

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xorg-vmware-driver

    Kernel Configuration

   Enable the following options in the kernel configuration and recompile the
   kernel if necessary:

 Device Drivers  --->
   Graphics support  --->
    <*> Direct Rendering Manager (XFree86 ... support) --->  [CONFIG_DRM]
    <*> DRM driver for VMware Virtual GPU                    [CONFIG_DRM_VMWGFX]
       [*]   Enable framebuffer console under vmwgfx by default [CONFIG_DRM_VMWGFX_FBCON]

    Installation of Xorg VMware Driver

   Install Xorg VMware Driver by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

    Contents

   Installed Xorg Driver: vmware_drv.so

      Short Descriptions

   vmware_drv.so is an Xorg video driver for VMware SVGA virtual video card. 

  libva-2.5.0

    Introduction to libva

   The libva package contains a library which provides access to hardware
   accelerated video processing, using hardware to accelerate video
   processing in order to offload the central processing unit (CPU) to decode
   and encode compressed digital video. The VA API video decode/encode
   interface is platform and window system independent targeted at Direct
   Rendering Infrastructure (DRI) in the X Window System however it can
   potentially also be used with direct framebuffer and graphics sub-systems
   for video output. Accelerated processing includes support for video
   decoding, video encoding, subpicture blending, and rendering.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://github.com/intel/libva/releases/download/2.5.0/libva-2.5.0.tar.bz2

     * Download MD5 sum: 3688212fb7a87947070f3729e91ff7cf

     * Download size: 452 KB

     * Estimated disk space required: 7.3 MB

     * Estimated build time: less than 0.1 SBU

      Additional Downloads

     * Intel Driver Download (HTTP):
       https://github.com/intel/intel-vaapi-driver/releases/download/2.3.0/intel-vaapi-driver-2.3.0.tar.bz2

     * Intel Driver Download MD5 sum: 9d835d1a3f7a9ef394f0f4c348cd4b3e

     * Intel Driver Download size: 2.8 MB

     * Estimated disk space required: 97 MB

     * Estimated build time: 0.3 SBU

      libva Dependencies

        Required

   libdrm-2.4.99

        Recommended

   Mesa-19.1.4

        Optional

   Doxygen-1.8.16 and Wayland-1.17.0

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libva

    Installation of libva

  Caution

   If you are reinstalling this package, you will need to remove the older
   versions of the libraries. These are in the form of libva*.so.1 and any
   symbolic links pointing to them. In addition, any packages that use these
   files need to be rebuilt.

   Install libva by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

    Installation of intel-vaapi-driver

   The intel-vaapi-driver is designed specifically for video cards based on
   an Intel GPU. Unpack the intel-vaapi tarball using the normal procedures
   and install the driver by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

    Contents

   Installed Programs: None
   Installed Libraries: libva-drm.so, libva-glx.so, libva.so,
   libva-wayland.so, and libva-x11.so
   Installed Driver: i965_drv_video.so
   Installed Directory: $XORG_PREFIX/include/va

    Short Descriptions

   libva.so contains API functions which provide access to hardware           
            accelerated video processing.                                     

  libvdpau-1.2

    Introduction to libvdpau

   The libvdpau package contains a library which implements the VDPAU
   library.

   VDPAU (Video Decode and Presentation API for Unix) is an open source
   library (libvdpau) and API originally designed by Nvidia for its GeForce 8
   series and later GPU hardware targeted at the X Window System This VDPAU
   API allows video programs to offload portions of the video decoding
   process and video post-processing to the GPU video-hardware.

   Currently, the portions capable of being offloaded by VDPAU onto the GPU
   are motion compensation (mo comp), inverse discrete cosine transform
   (iDCT), VLD (variable-length decoding) and deblocking for MPEG-1, MPEG-2,
   MPEG-4 ASP (MPEG-4 Part 2), H.264/MPEG-4 AVC and VC-1, WMV3/WMV9 encoded
   videos. Which specific codecs of these that can be offloaded to the GPU
   depends on the version of the GPU hardware; specifically, to also decode
   MPEG-4 ASP (MPEG-4 Part 2), Xvid/OpenDivX (DivX 4), and DivX 5 formats, a
   GeForce 200M (2xxM) Series (the eleventh generation of Nvidia's GeForce
   graphics processing units) or newer GPU hardware is required.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Download (HTTP):
       https://gitlab.freedesktop.org/vdpau/libvdpau/uploads/14b620084c027d546fa0b3f083b800c6/libvdpau-1.2.tar.bz2

     * Download MD5 sum: 7cca645c49d9cb11cba35516bfc21c1d

     * Download size: 428 KB

     * Estimated disk space required: 6.2 MB (with tests)

     * Estimated build time: less than 0.1 SBU (with tests)

      libvdpau Dependencies

        Required

   Xorg Libraries

        Optional

   Doxygen-1.8.16, Graphviz-2.40.1, and texlive-20190410 or install-tl-unx

        Runtime Dependency

   Mesa-19.1.4

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libvdpau

    Installation of libvdpau

   Install libvdpau by running the following commands:

 ./configure $XORG_CONFIG \
             --docdir=/usr/share/doc/libvdpau-1.2 &&
 make

   To test the results, issue: make check.

   Now, as the root user:

 make install

    Contents

   Installed Programs: None
   Installed Library: libvdpau.so
   Installed Directories: $XORG_PREFIX/{include,lib}/vdpau and
   $XORG_PREFIX/share/doc/libvdpau-1.2

    Short Descriptions

   libvdpau.so contains functions to offload portions of the video decoding   
               process and video post-processing to the GPU video-hardware.   

  libvdpau-va-gl-0.4.0

    Introduction to libvdpau-va-gl

   The libvdpau-va-gl package contains a library which implements the VDPAU
   library. Libvdpau_va_gl uses OpenGL under the hood to accelerate drawing
   and scaling and the VA-API (if available) to accelerate video decoding.
   For now VA-API is available on some Intel chips, and on some AMD video
   adapters with the help of the libvdpau driver.

   This package is known to build and work properly using an LFS-9.0
   platform.

      Package Information

     * Libvdpau-va-gl Driver Download (HTTP):
       https://github.com/i-rinat/libvdpau-va-gl/archive/v0.4.0/libvdpau-va-gl-0.4.0.tar.gz

     * Libvdpau-va-gl Driver Download MD5 sum:
       638244652a702d0262039890904f37ce

     * Libvdpau-va-gl Driver Download size: 120 KB

     * Estimated disk space required: 3.4 MB

     * Estimated build time: less than 0.1 SBU

      libvdpau-va-gl Dependencies

        Required

   CMake-3.15.2, FFmpeg-4.2, libvdpau-1.2, and libva-2.5.0

        Optional

   Doxygen-1.8.16, Graphviz-2.40.1, and texlive-20190410 or install-tl-unx

        Runtime Dependency

   Mesa-19.1.4

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libvdpau

    Installation of libvdpau-va-gl

   Install libvdpau-va-gl by running the following commands:

 mkdir build &&
 cd    build &&

 cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$XORG_PREFIX .. &&
 make

   To test the results, issue: make check. The tests must be run from an Xorg
   environment.

   Now, as the root user:

 make install

    Configuration

   To allow libvdpau to find libvdpau-va-gl, set an environment variable. As
   the root user:

 echo "export VDPAU_DRIVER=va_gl" >> /etc/profile.d/xorg.sh

    Contents

   Installed Programs: None
   Installed Library: libvdpau_va_gl.so
   Installed Directories: None

    Short Descriptions

   libvdpau_va_gl.so contains functions to implement the OpenGL backend to    
                     the VDPAU (Video Decode and Presentation API for Unix)   
                     API.                                                     

   Last updated on 2019-05-19 21:28:20 -0700

twm-1.0.10

  Introduction to twm

   The twm package contains a very minimal window manager.

   This package is not a part of the Xorg katamari and is provided only as a
   dependency to other packages or for testing the completed Xorg
   installation.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/app/twm-1.0.10.tar.bz2

     * Download (FTP): ftp://ftp.x.org/pub/individual/app/twm-1.0.10.tar.bz2

     * Download MD5 sum: e322c08eeb635f924ede5b8eba3db54e

     * Download size: 284 KB

     * Estimated disk space required: 3.7 MB

     * Estimated build time: less than 0.1 SBU

    twm Dependencies

      Required

   Xorg-Server-1.20.5

      Recommended

   Xorg Legacy Fonts

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/twm

  Installation of twm

   Install twm by running the following commands:

 sed -i -e '/^rcdir =/s,^\(rcdir = \).*,\1/etc/X11/app-defaults,' src/Makefile.in &&
 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   sed -i -e '/^rcdir =/s...: This command ensures the twm configuration file
   gets installed in the proper location.

  Contents

   Installed Programs: twm
   Installed Libraries: None
   Installed Directory: /etc/X11/app-defaults

    Short Descriptions

   twm is the Tab Window Manager for the X Window System. 

   Last updated on 2019-08-16 15:28:01 -0700

xterm-348

  Introduction to xterm

   xterm is a terminal emulator for the X Window System.

   This package is not a part of the Xorg katamari and is provided only as a
   dependency to other packages or for testing the completed Xorg
   installation.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://invisible-mirror.net/archives/xterm/xterm-348.tgz

     * Download MD5 sum: 05340ef6eabb96826953346c64b35225

     * Download size: 1.3 MB

     * Estimated disk space required: 13 MB

     * Estimated build time: 0.2 SBU

    xterm Dependencies

      Required

   Xorg Applications

      Required (at runtime)

   A monospace TTF or OTF font such as Dejavu fonts

      Optional

   Valgrind-3.15.0 and man2html

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/Xterm

  Installation of xterm

   Install xterm by running the following commands:

 sed -i '/v0/{n;s/new:/new:kb=^?:/}' termcap &&
 printf '\tkbs=\\177,\n' >> terminfo &&

 TERMINFO=/usr/share/terminfo \
 ./configure $XORG_CONFIG     \
     --with-app-defaults=/etc/X11/app-defaults &&

 make

   This package does not come with a test suite.

   Now, as the root user:

 make install    &&
 make install-ti &&

 mkdir -pv /usr/share/applications &&
 cp -v *.desktop /usr/share/applications/

  Command Explanations

   sed -i ... termcap, printf ... >> terminfo: These commands modify the
   terminal description so that the Backspace key is expected to send the
   character with ASCII code 127. This is done for consistency with the Linux
   console.

   TERMINFO=/usr/share/terminfo: This ensures that the xterm terminfo files
   are installed to the system terminfo database.

   --with-app-defaults=...: Sets the location for the app-defaults directory.

   make install-ti: This command installs corrected terminfo description
   files for use with xterm.

  Configuring xterm

   There are two ways to configure xterm. You can add the X resource
   definitions to the user's ~/.Xresources file, or add them to the
   system-wide $XORG_PREFIX/share/X11/app-defaults/Xterm file.

   In order for xterm to follow the locale settings in the environment, use
   TrueType fonts, and follow the Linux convention about the code sent by the
   Backspace key, add the following definitions as the root user:

 cat >> /etc/X11/app-defaults/XTerm << "EOF"
 *VT100*locale: true
 *VT100*faceName: Monospace
 *VT100*faceSize: 10
 *backarrowKeyIsErase: true
 *ptyInitialErase: true
 EOF

  Contents

   Installed Programs: koi8rxterm, resize, uxterm, and xterm
   Installed Libraries: None
   Installed Directories: None

    Short Descriptions

   koi8rxterm is a wrapper script to set up xterm with a KOI8-R locale.       
   resize     prints a shell command for setting the TERM and TERMCAP         
              environment variables to indicate the current size of xterm     
              window.                                                         
   uxterm     is a wrapper script that modifies the current locale to use     
              UTF-8 and starts xterm with the proper settings.                
   xterm      is a terminal emulator for the X Window System.                 

   Last updated on 2019-08-16 15:28:01 -0700

xclock-1.0.9

  Introduction to xclock

   The xclock package contains a simple clock application which is used in
   the default xinit configuration.

   This package is not a part of the Xorg katamari and is provided only as a
   dependency to other packages or for testing the completed Xorg
   installation.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/app/xclock-1.0.9.tar.bz2

     * Download (FTP):
       ftp://ftp.x.org/pub/individual/app/xclock-1.0.9.tar.bz2

     * Download MD5 sum: 437522a96f424f68fc64ed34ece9b211

     * Download size: 172 KB

     * Estimated disk space required: 1.5 MB

     * Estimated build time: less than 0.1 SBU

    xclock Dependencies

      Required

   Xorg Libraries

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xclock

  Installation of xclock

   Install xclock by running the following commands:

 ./configure $XORG_CONFIG &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: xclock
   Installed Libraries: None
   Installed Directory: None

    Short Descriptions

   xclock is an analog/digital clock for X. 

   Last updated on 2019-08-16 15:28:01 -0700

xinit-1.4.1

  Introduction to xinit

   The xinit package contains a usable script to start the xserver.

   This package is not a part of the Xorg katamari and is provided only as a
   dependency to other packages or for testing the completed Xorg
   installation.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.x.org/pub/individual/app/xinit-1.4.1.tar.bz2

     * Download (FTP): ftp://ftp.x.org/pub/individual/app/xinit-1.4.1.tar.bz2

     * Download MD5 sum: 6d506ab2efc17a08e87778654e099d37

     * Download size: 178 KB

     * Estimated disk space required: 1.5 MB

     * Estimated build time: less than 0.1 SBU

    xinit Dependencies

      Required

   Xorg Libraries

      Recommended (runtime only)

   twm-1.0.10, xclock-1.0.9, and xterm-348 (used in the default xinitrc file)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/xinit

  Installation of xinit

   Install xinit by running the following commands:

 ./configure $XORG_CONFIG --with-xinitdir=/etc/X11/app-defaults &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install &&
 ldconfig

  Note

   If starting Xorg from the command line, the default instructions above
   starts Xorg on the current virtual terminal. It may be convenient to see
   Xorg and associated application messages on the current virtual terminal,
   normally tty1, and start the graphical environment on the first available
   unused virtual terminal, normally tty7. To do this, set the suid bit on
   the Xorg application as the root user:

 chmod u+s $XORG_PREFIX/libexec/Xorg

   At this point you can start Xorg on virtual terminal 7 with startx <client
   arguments> -- vt7. Now you can toggle between tty1 and tty7 with the
   Ctrl-Alt-F1 and Ctrl-Alt-F7 key combinations.

   To automatically start Xorg on the first available virtual terminal,
   modify the startx script as the root user with:

 sed -e '/$serverargs $vtarg/ s/serverargs/: #&/' $XORG_PREFIX/bin/startx

   After this change, the virtual terminal does not need to be specified on
   the startx command line.

  Contents

   Installed Programs: xinit and startx
   Installed Libraries: None
   Installed Directories: None

    Short Descriptions

   startx initializes an X session.           
   xinit  is the X Window System initializer. 

   Last updated on 2019-08-16 15:28:01 -0700

Xorg-7 Testing and Configuration

  Testing Xorg

  Note

   Before starting Xorg for the first time, is is useful to rebuild the
   library cache by running ldconfig as the root user.

  Note

   Before starting Xorg for the first time, is is often needed to reboot the
   system to ensure all appropriate daemons are started and approprite
   security issues are properly set. As an alternative, logging out and
   logging back in may work, but as of this writing has not been tested.

   To test the Xorg installation, issue startx. This command brings up a
   rudimentary window manager called twm with three xterm windows and one
   xclock window. The xterm window in the upper left is a login terminal and
   running exit from this terminal will exit the X Window session. The third
   xterm window may be obscured on your system by the other two xterms.

  Note

   When testing Xorg with the twm window manager, there will be several
   warnings in the Xorg log file, $HOME/.local/share/xorg/Xorg.0.log, about
   missing font files. In addition, there will be several warnings on the
   text mode terminal (usually tty1) about missing fonts. These warnings do
   not affect functionality, but can be removed if desired by installing the
   Xorg Legacy Fonts.

   Generally, there is no specific configuration required for Xorg, but
   customization is possible. For details, see the section called âSetting up
   Xorg Devicesâ below.

  Checking the Direct Rendering Infrastructure (DRI) Installation

   DRI is a framework for allowing software to access graphics hardware in a
   safe and efficient manner. It is installed in X by default (using Mesa) if
   you have a supported video card.

   To check if DRI drivers are installed properly, check the log file
   /var/log/Xorg.0.log for statements such as:

 (II) intel(0): direct rendering: DRI2 Enabled

   or

 (II) NOUVEAU(0): Loaded DRI module

  Note

   DRI configuration may differ if you are using alternate drivers, such as
   those from NVIDIA or AMD.

   Another way to determine if DRI is working properly is to use one of the
   two optionally installed OpenGL demo programs in Mesa-19.1.4. From an X
   terminal, run glxinfo and look for the phrase:

 name of display: :0
 display: :0  screen: 0
 direct rendering: Yes

   If direct rendering is enabled, you can add verbosity by running
   LIBGL_DEBUG=verbose glxinfo. This will show the drivers, device nodes and
   files used by the DRI system.

   To confirm that DRI2 hardware acceleration is working, you can (still in
   the X terminal) run the command glxinfo | egrep "(OpenGL vendor|OpenGL
   renderer|OpenGL version)". If that reports something other than Software
   Rasterizer then you have working acceleration for the user who ran the
   command.

   If your hardware does not have any DRI2 driver available, it will use a
   Software Rasterizer for Direct Rendering. In such cases, you can use a
   new, LLVM-accelerated, Software Rasterizer called LLVMPipe. In order to
   build LLVMPipe just make sure that LLVM-8.0.1 is present at Mesa build
   time. Note that all decoding is done on the CPU instead of the GPU, so the
   display will run slower than with hardware acceleration. To check if you
   are using LLVMpipe, review the output of the glxinfo command above. An
   example of the output using the Software Rasterizer is shown below:

 OpenGL vendor string: VMware, Inc.
 OpenGL renderer string: Gallium 0.4 on llvmpipe (LLVM 3.5, 256 bits)
 OpenGL version string: 3.0 Mesa 10.4.5

   You can also force LLVMPipe by exporting the LIBGL_ALWAYS_SOFTWARE=1
   environment variable when starting Xorg.

   Again, if you have built the Mesa OpenGL demos, you can also run the test
   program glxgears. This program brings up a window with three gears
   turning. The X terminal will display how many frames were drawn every five
   seconds, so this will give a rough benchmark. The window is scalable, and
   the frames drawn per second is highly dependent on the size of the window.
   On some hardware, glxgears will run synchronized with the vertical refresh
   signal and the frame rate will be approximately the same as the monitor
   refresh rate.

  Hybrid Graphics

   Hybrid Graphics is still in experimental state for Linux. Xorg Developers
   have developed a technology called PRIME that can be used for switching
   between integrated and muxless discrete GPU at will. Automatic switching
   is not possible at the moment.

   In order to use PRIME for GPU switching, make sure that you are using
   Linux Kernel 3.4 or later (recommended). You will need latest DRI and DDX
   drivers for your hardware and Xorg Server 1.13 or later.

   Xorg Server should load both GPU drivers automaticaly. You can check that
   by running:

 xrandr --listproviders

   There should be two (or more) providers listed, for example:

 Providers: number : 2
 Provider 0: id: 0x7d cap: 0xb, Source Output, Sink Output, Sink Offload crtcs: 3 outputs: 4 associated providers: 1 name:Intel
 Provider 1: id: 0x56 cap: 0xf, Source Output, Sink Output, Source Offload, Sink Offload crtcs: 6 outputs: 1 associated providers: 1 name:radeon

   In order to be able to run a GLX application on a discrete GPU, you will
   need to run the following command, where <provider> is the more powerful
   discrete card, and <sink> is the card which has a display connected:

 xrandr --setprovideroffloadsink <provider> <sink>

  Note

   With newer Xorg drivers, such as modesetting or intel, which are DRI3
   capable, the above command is no longer necessary. It does no harm
   however.

   Then, you will need to export the DRI_PRIME=1 environment variable each
   time you want the powerful GPU to be used. For example,

 DRI_PRIME=1 glxinfo | egrep "(OpenGL vendor|OpenGL renderer|OpenGL version)"

   will show OpenGL vendor, renderer and version for the discrete GPU.

   If the last command reports same OpenGL renderer with and without
   DRI_PRIME=1, you will need to check your installation.

  Setting up Xorg Devices

   For most hardware configurations, modern Xorg will automatically get the
   server configuration correct without any user intervention. There are,
   however, some cases where auto-configuration will be incorrect. Following
   are some example manual configuration items that may be of use in these
   instances.

    Setting up X Input Devices

   For most input devices, no additional configuration will be necessary.
   This section is provided for informational purposes only.

   A sample default XKB setup could look like the following (executed as the
   root user):

 cat > /etc/X11/xorg.conf.d/xkb-defaults.conf << "EOF"
 Section "InputClass"
     Identifier "XKB Defaults"
     MatchIsKeyboard "yes"
     Option "XkbLayout" "fr"
     Option "XkbOptions" "terminate:ctrl_alt_bksp"
 EndSection
 EOF

   The âXkbLayoutâ line is an example for a French (AZERTY) keyboard. Change
   it to your keyboard model. That line is not needed for a QWERTY (US)
   keyboard.

    Fine Tuning Display Settings

   Again, with modern Xorg, little or no additional configuration is
   necessary. If you should need extra options passed to your video driver,
   for instance, you could use something like the following (again, executed
   as the root user):

 cat > /etc/X11/xorg.conf.d/videocard-0.conf << "EOF"
 Section "Device"
     Identifier  "Videocard0"
     Driver      "radeon"
     VendorName  "Videocard vendor"
     BoardName   "ATI Radeon 7500"
     Option      "NoAccel" "true"
 EndSection
 EOF

   Another common setup is having multiple server layouts for use in
   different environments. Though the server will automatically detect the
   presence of another monitor, it may get the order incorrect:

 cat > /etc/X11/xorg.conf.d/server-layout.conf << "EOF"
 Section "ServerLayout"
     Identifier     "DefaultLayout"
     Screen      0  "Screen0" 0 0
     Screen      1  "Screen1" LeftOf "Screen0"
     Option         "Xinerama"
 EndSection
 EOF

   Last updated on 2019-08-17 15:49:15 -0700

Tuning Fontconfig

  Overview of Fontconfig

   If you only read text in English, and are happy with the common libre
   fonts listed on the next page, you may never need to worry about the
   details of how fontconfig works. But there are many things which can be
   altered if they do not suit your needs.

   Although this page is long, it barely scratches the surface and you will
   be able to find many alternative views on the web (but please remember
   that some things have changed over the years, for example the autohinter
   is no longer the default). The aim here is to give you enough information
   to understand the changes you are making.

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/Fontconfig

  The Xft Font Protocol

   The Xft font protocol provides antialiased font rendering through
   freetype, and fonts are controlled from the client side using fontconfig
   (except for rxvt-unicode-9.22 which can use fonts listed in ~/.Xresources,
   and AbiWord-3.0.2 which only uses the specified font). The default search
   path is /usr/share/fonts and ~/.local/share/fonts although for the moment
   the old and deprecated location ~/.fonts still works. Fontconfig searches
   directories in its path recursively and maintains a cache of the font
   characteristics in each directory. If the cache appears to be out of date,
   it is ignored, and information is fetched from the fonts themselves (that
   can take a few seconds if you installed a lot of fonts).

   If you've installed Xorg in any prefix other than /usr, any X fonts were
   not installed in a location known to Fontconfig. Symlinks were created
   from the OTF and TTF X font directories to /usr/share/fonts/X11-{OTF,TTF}.
   This allows Fontconfig to use the OpenType and TrueType fonts provided by
   X, although many people will prefer to use more modern fonts.

   Fontconfig uses names to define fonts. Applications generally use generic
   font names such as "Monospace", "Sans" and "Serif". Fontconfig resolves
   these names to a font that has all characters that cover the orthography
   of the language indicated by the locale settings.

  Useful Commands

   The following commands may be helpful when working with fontconfig:

   fc-list | less : show a list of all available fonts (/path/to/filename:
   Font Name:style). If you installed a font more than 30 seconds ago but it
   does not show, then it or one of its directories is not readable by your
   user.

   fc-match 'Font Name' : will tell you which font will be used if the named
   font is requested. Typically you would use this to see what happens if a
   font you have not installed is requested, but you can also use it if the
   system is giving you a different font from what you expected (perhaps
   because fontconfig does not agree that the font supports your language).

   fc-match -a 'Type' | less : will provide a list of all fonts which can be
   used for that type (Monospace, Sans, Serif). Note that in-extremis
   fontconfig will take a glyph from any available font, even if it is not of
   the specified type, and unless it knows about the font's type it will
   assume it is Sans.

   If you wish to know which font will be used for a string of text (i.e. one
   or more glyphs, preceded by a space), paste the following command and
   replace the xyz by the text you care about:

   FC_DEBUG=4 pango-view --font=monospace -t xyz | grep family : this
   requires Pango-1.42.4 and ImageMagick-7.0.8-60 - it will invoke display to
   show the text in a tiny window, and after closing that the last line of
   the output will show which font was chosen. This is particularly useful
   for CJK languages, and you can also pass a language, e.g.
   PANGO_LANGUAGE=en;ja (English, then assume Japanese) or just zh-cn (or
   other variants - 'zh' on its own is not valid).

  The various files

   The main files are in /etc/fonts/conf.d/, which was intended to be a
   directory populated by symlinks to some of the files in
   /usr/share/fontconfig/conf.avail/. But many people, and some packages,
   create the files directly. Each file name must be in the form of two
   digits, a dash, somename.conf and they are read in sequence.

   By convention, the numbers are assigned as follows:

     * 00-09 extra font directories

     * 10-19 system rendering defaults (antialising etc)

     * 20-29 font rendering options

     * 30-39 family substitution

     * 40-49 map family to generic type

     * 50-59 load alternate config files

     * 60-69 generic aliases, map generic to family

     * 70-79 adjust which fonts are available

     * 80-89 match target scan (modify scanned patterns)

     * 90-99 font synthesis

   You can also have a personal fonts.conf in $XDG_CONFIG_HOME which is
   ~/.config/fontconfig/.

  The rules to choose a font

   If the requested font is installed, and provided it contains the
   codepoints required for the current language (in the source, see the .orth
   files in the fc-lang/ directory), it will be used.

   But if the document or page requested a font which is not installed (or,
   occasionally, does not contain all the required codepoints) the following
   rules come into play: First, 30-metric-aliases.conf is used to map aliases
   for some fonts with the same metrics (same size, etc). After that, an
   unknown font will be searched for in 45-latin.conf - if it is found it
   will be mapped as Serif or Monospace or Sans, otherwise it will be assumed
   to be Sans. Then 50-latin.conf provides ordered lists of the fallbacks -
   Dejavu fonts will be used if you installed them. Cyrillic and Greek appear
   to be treated in the same way. There are similar files with a 65- prefix
   for Persian and other non-latin writing systems. All of these files prefer
   commercial fonts if they are present, although modern libre fonts are
   often at least their equals.

   Since fontconfig-2.12.5 there is also generic family matching for some
   emoji and math fonts, see {45,60}-generic.conf.

   In the rare cases where a font does not contain all the expected
   codepoints, see 'Trial the First:' at I stared into the fontconfig for the
   long details.

  Hinting and Anti-aliasing

   It is possible to change how, or if, fonts are hinted. The following
   example file contains the default settings, but with comments. The
   settings are very much down to the user's preferences and to the choice of
   fonts, so a change which improves some pages may worsen others. The
   preferred location for this file is: ~/.config/fontconfig/fonts.conf

   To try out different settings, you may need to exit from Xorg and then
   rerun startx so that all applications use the new settings. And if you use
   Gnome or KDE their desktops can override these changes. To explore the
   possibilities, create a file for your user:

 mkdir -pv ~/.config/fontconfig &&
 cat > ~/.config/fontconfig/fonts.conf << "EOF"
 <?xml version='1.0'?>
 <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
 <fontconfig>

   <match target="font" >
     <!-- autohint was the old automatic hinter when hinting was patent
     protected, so turn it off to ensure any hinting information in the font
     itself is used, this is the default -->
     <edit mode="assign" name="autohint">  <bool>false</bool></edit>

     <!-- hinting is enabled by default -->
     <edit mode="assign" name="hinting">   <bool>true</bool></edit>
    
     <!-- for the lcdfilter see http://www.spasche.net/files/lcdfiltering/ -->
     <edit mode="assign" name="lcdfilter"> <const>lcddefault</const></edit>
    
     <!-- options for hintstyle:
     hintfull: is supposed to give a crisp font that aligns well to the
     character-cell grid but at the cost of its proper shape.

     hintmedium: poorly documented, maybe a synonym for hintfull.
     hintslight is the default: - supposed to be more fuzzy but retains shape.
    
     hintnone: seems to turn hinting off.
     The variations are marginal and results vary with different fonts -->
     <edit mode="assign" name="hintstyle"> <const>hintslight</const></edit>
    
     <!-- antialiasing is on by default and really helps for faint characters
     and also for 'xft:' fonts used in rxvt-unicode -->
     <edit mode="assign" name="antialias"> <bool>true</bool></edit>
    
     <!-- subpixels are usually rgb, see
     http://www.lagom.nl/lcd-test/subpixel.php -->
     <edit mode="assign" name="rgba">      <const>rgb</const></edit>
    
     <!-- thanks to the Arch wiki for the lcd and subpixel links -->
   </match>

 </fontconfig>
 EOF

   You will now need to edit the file in your preferred editor.

   For more examples see the blfs-support thread which started at
   /2016-September/078422, particularly 2016-September/078425, and the
   original poster's preferred solution at 2016-November/078658. There are
   other examples in Fontconfig in the Arch wiki and Fontconfig in the Gentoo
   wiki.

  Disabling Bitmap Fonts

   In previous versions of BLFS, the ugly old Xorg bitmap fonts were
   installed. Now, many people will not need to install any of them. But if
   for some reason you have installed one or more bitmap fonts, you can
   prevent them being used by fontconfig by creating the following file as
   the root user :

 cat > /etc/fonts/conf.d/70-no-bitmaps.conf << "EOF"
 <?xml version='1.0'?>
 <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
 <fontconfig>
 <!-- Reject bitmap fonts -->
  <selectfont>
   <rejectfont>
    <pattern>
      <patelt name="scalable"><bool>false</bool></patelt>
    </pattern>
   </rejectfont>
  </selectfont>
 </fontconfig>
 EOF

  Adding extra font directories

   Normally, system fonts and user fonts are installed in directories beneath
   the locations specified in The Xft Font Protocol and there is no obvious
   reason to put them elsewhere. However, a full BLFS install of
   texlive-20190410 puts many fonts in /opt/texlive/2019/texmf-dist/fonts/ in
   the opentype/ and truetype/ subdirectories. Although pulling in all of
   these files may appear useful (it allows you to use them in non TeX
   programs), there are several problems with such an approach:

    1. There are hundreds of files, which makes selecting the font hard.

    2. Some of the files do odd things, such as displaying semaphore flags
       instead of ASCII letters, or mapping cyrillic codepoints to character
       forms appropriate to Old Church Slavonic instead of the expected
       current shapes: fine if that is what you need, but painful for normal
       use.

    3. Several fonts have multiple sizes and impenetrable short names, which
       both make selecting the correct font even harder.

    4. When a font is added to CTAN, it is accompanied by TeX packages to use
       it in the old engines (xelatex does not normally need this), and then
       the version is often frozen whilst the font is separately maintained.
       Some of these fonts such as Dejavu fonts are probably already
       installed on your BLFS system in a newer version, and if you have
       multiple versions of a font it is unclear which one will be used by
       fontconfig.

   However, it is sometimes useful to look at these fonts in non-TeX
   applications, if only to see whether you wish to install a current
   version. If you have installed all of texlive, the following example will
   make one of the Arkandis Open Type fonts available to other applications,
   and all three of the ParaType TrueType fonts. Adjust or repeat the lines
   as desired, to either make all the opentype/ or truetypefonts available,
   or to select different font directories. As the root user:

 cat > /etc/fonts/conf.d/09-texlive.conf << "EOF"
 <?xml version='1.0'?>
 <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
 <fontconfig>
   <dir>/opt/texlive/2019/texmf-dist/fonts/opentype/arkandis/berenisadf</dir>
   <dir>/opt/texlive/2019/texmf-dist/fonts/truetype/paratype</dir>
 </fontconfig>
 EOF

   If you do this, remember to change all instances of the year in that file
   when you upgrade texlive to a later release.

  Preferring certain fonts

   There are many reasons why people may wish to have pages which specify a
   particular font use a different font, or prefer specific fonts in
   Monospace or Sans or Serif. As you will expect, there a number of
   different ways of achieving this.

    Fontconfig user docs

   Fontconfig installs user documentation that includes an example 'User
   configuration file' which among other things prefers WenQuanYi ZenHei (a
   Sans font) if a Serif font is requested for Chinese (this part might be
   anachronistic unless you have non-free Chinese fonts, because in
   65-nonlatin.conf this font is already among the preferred fonts when Serif
   is specified for Chinese) and to prefer the modern VL Gothic font if a
   Sans font is specified on a Japanese page (otherwise a couple of other
   fonts would be preferred if they have been installed).

   If you have installed the current version, the user documentation is
   available in html, PDF and text versions at
   /usr/share/doc/fontconfig-2.13.1/ : change the version if you installed a
   different one.

    Prefer a specific font

   As an example, if for some reason you wished to use the Nimbus Roman No9 L
   font wherever Times New Roman is referenced (it is metrically similar, and
   preferred for Times Roman, but the Serif font from Liberation fonts will
   be preferred for the Times New Roman font if installed), as an individual
   user you could install the font and then create the following file:

 mkdir -pv ~/.config/fontconfig/conf.d &&
 cat >  ~/.config/fontconfig/conf.d/35-prefer-nimbus-for-timesnew.conf << "EOF"
 <?xml version='1.0'?>
 <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
 <fontconfig>
 <!-- prefer Nimbus Roman No9 L for Times New Roman as well as for Times,
  without this Tinos and Liberation Serif take precedence for Times New Roman
  before fontconfig falls back to whatever matches Times -->
     <alias binding="same">
         <family>Times New Roman</family>
         <accept>
             <family>Nimbus Roman No9 L</family>
         </accept>
     </alias>
 </fontconfig>
 EOF

   This is something you would normally do in an individual user's settings,
   but the file in this case has been prefixed '35-' so that it could, if
   desired, be used system-wide in /etc/fonts/conf.d/.

    Prefer chosen CJK fonts

   The following example of a local configuration (i.e. one that applies for
   all users of the machine) does several things:

    1. If a Serif font is specified, it will prefer the UMing variants, so
       that in the zh-cn, zh-hk and zh-tw languages things should look good
       (also zh-sg which actually uses the same settings as zh-cn) without
       affecting Japanese.

    2. It prefers the Japanese IPAex fonts if they have been installed
       (although VL Gothic will take precedence for (Japanese) Sans if it has
       also been installed.

    3. Because WenQuanYi ZenHei covers Korean Hangul glyphs and is also
       preferred for Serif in 65-nonlatin.conf, if installed it will be used
       by default for Korean Serif. To get a proper Serif font, the UnBatang
       font is specified here - change that line if you installed a different
       Serif font from the choice of Korean fonts.

    4. The Monospace fonts are forced to the preferred Sans fonts. If the
       text is in Korean then WenQuanYi ZenHei will be used.

   In a non-CJK locale, the result is that suitable fonts will be used for
   all variants of Chinese, Japanese and Hangul Korean. All other languages
   should already work if a font is present. As the root user:

 cat > /etc/fonts/local.conf << "EOF"
 <?xml version='1.0'?>
 <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
 <fontconfig>
     <alias>
         <family>serif</family>
         <prefer>
             <family>AR PL UMing</family>
             <family>IPAexMincho</family>
             <!-- WenQuanYi is preferred as Serif in 65-nonlatin.conf,
             override that so a real Korean font can be used for Serif -->
             <family>UnBatang</family>
         </prefer>
     </alias>
     <alias>
          <family>sans-serif</family>
          <prefer>
              <family>WenQuanYi Zen Hei</family>
              <family>VL Gothic</family>
              <family>IPAexGothic</family>
          </prefer>
     </alias>
     <alias>
          <family>monospace</family>
          <prefer>
              <family>VL Gothic</family>
              <family>IPAexGothic</family>
              <family>WenQuanYi Zen Hei</family>
          </prefer>
     </alias>
 </fontconfig>
 EOF

  Editing Old-style conf files

   Some fonts, particularly Chinese fonts, ship with conf files which can be
   installed in /etc/fonts/conf.d. However, if you do that and then use a
   terminal to run any command which uses fontconfig you may see error
   messages such as :

   Fontconfig warning: "/etc/fonts/conf.d/69-odofonts.conf", line 14: Having
   multiple <family> in <alias> isn't supported and may not work as expected.

   In practice, these old rules do not work. For non-CJK users, fontconfig
   will usually do a good job without these rules. Their origin dates back to
   when CJK users needed handcrafted bitmaps to be legible at small sizes,
   and those looked ugly next to antialiased Latin glyphs - they preferred to
   use the same CJK font for the Latin glyphs. There is a side-effect of
   doing this : the (Serif) font is often also used for Sans, and in such a
   situation the (English) text in Gtk menus will use this font - compared to
   system fonts, as well as being serif it is both faint and rather small.
   That can make it uncomfortable to read.

   Nevertheless, these old conf files can be fixed if you wish to use them.
   The following example is the first part of 64-arphic-uming.conf from UMing
   - there are a lot more similar items which also need changing :

      <match target="pattern">
          <test qual="any" name="lang" compare="contains">
              <string>zh-cn</string>
              <string>zh-sg</string>
          </test>
          <test qual="any" name="family">
              <string>serif</string>
          </test>
          <edit name="family" mode="prepend" binding="strong">
              <string>AR PL UMing CN</string>
          </edit>
       </match>

   The process to correct this is straightforward but tedious - for every
   item which produces an error message, using your editor (as the root user)
   edit the installed file to repeat the whole block as many times as there
   are multiple variables, then reduce each example to have only one of them.
   You may wish to work on one error at a time, save the file after each fix,
   and from a separate term run a command such as fc-list 2>&1 | less to see
   that the fix worked. For the block above, the fixed version will be :

      <match target="pattern">
          <test qual="any" name="lang" compare="contains">
              <string>zh-cn</string>
          </test>
          <test qual="any" name="family">
              <string>serif</string>
          </test>
          <edit name="family" mode="prepend" binding="strong">
              <string>AR PL UMing CN</string>
          </edit>
       </match>
      <match target="pattern">
          <test qual="any" name="lang" compare="contains">
              <string>zh-sg</string>
          </test>
          <test qual="any" name="family">
              <string>serif</string>
          </test>
          <edit name="family" mode="prepend" binding="strong">
              <string>AR PL UMing CN</string>
          </edit>
       </match>

  See Also

    I stared into the fontconfig ...

   The blog entries by Eevee are particularly useful if fontconfig does not
   think your chosen font supports your language, and for preferring some
   non-MS Japanese fonts when an ugly MS font is already installed.

    Fontconfig in the Arch wiki

   Arch has a lot of information in its wiki at font_configuration.

    Fontconfig in the Gentoo wiki

   Gentoo has some information in its wiki at Fontconfig although a lot of
   the details (what to enable, and Infinality) are specific to Gentoo.

   Last updated on 2018-08-09 14:49:29 -0700

TTF and OTF fonts

  About TTF and OTF fonts

   Originally, Xorg provided only bitmap fonts. Later, some scalable Type1
   fonts were added, but the desktop world moved on to using TrueType and
   Open Type fonts. To support these, Xorg uses Xft, the X FreeType interface
   library.

   These fonts can provide hints, which fontconfig uses to adjust them for
   maximum readability on computer monitors. On linux you should always
   prefer the hinted versions, if available (in general the latin, cyrillic
   and greek alphabets can use hints, most other writing systems do not use
   hinting).

   A few fonts are provided as collections (TTC or OTC) where font data is
   shared between different fonts, thus saving disk space. Treat these in
   exactly the same way as individual TTF or OTF files.

   If a font provides both TTF and OTF forms, prefer the OTF form in linux,
   it may provide more features for programs which know how to use them (such
   as xelatex).

   For some scripts pango is required to render things correctly, either by
   selecting different glyph forms, or by combining glyphs - in both cases,
   according to the context. This applies particularly to arabic and indic
   scripts.

   Standard scalable fonts that come with X provide very poor Unicode
   coverage. You may notice in applications that use Xft that some characters
   appear as a box with four binary digits inside. In this case, a font with
   the required glyphs has not been found. Other times, applications that
   don't use other font families by default and don't accept substitutions
   from Fontconfig will display blank lines when the default font doesn't
   cover the orthography of the user's language.

   The fonts available to a program are those which were present when it was
   started, so if you add an extra font and wish to use it in a program which
   is currently running, then you will have to close and restart that
   program.

   Some people are happy to have dozens, or even hundreds, of font files
   available, but if you ever wish to select a specific font in a desktop
   application (for example in a word processor) then scrolling through a lot
   of fonts to find the right one is slow and awkward - fewer is better. So,
   for some font packages you might decide to install only one of the fonts -
   but nevertheless install the different variants (italic, bold, etc) as
   these are all variations for the same font name.

   In the past, everybody recommended running fc-cache as the root user after
   installing or removing fonts, but this is no-longer necessary on linux,
   fontconfig will do it automatically if needed and if its caches are more
   than 30 seconds old. But if you add a font and want to immediately use it
   then you can run that command (as a normal user).

   There are several references below to CJK characters. This stands for
   Chinese, Japanese and Korean, although modern Korean is now almost all
   written using the phonetic Hangul glyphs (it used to sometimes use Hanja
   glyphs which are similar to Chinese and Japanese). Unicode decided to go
   for Han Unification and to map some Chinese and Japanese glyphs to the
   same codepoints. This was very unpopular in Japan, and the result is that
   different fonts will render some codepoints in quite different shapes. In
   addition, Simplified Chinese will sometimes use the same codepoint as
   Traditional Chinese but will show it differently, somewhat analogous to
   the different shapes used for the letters 'a' and 'g' in English
   (single-storey and two-storey), except that in a language context one will
   look "wrong" rather than just "different".

   Unlike most other packages in this book, the BLFS editors do not monitor
   the versions of the fonts on this page - once a font is good enough for
   general use, the typical additions in a new version are minor (e.g. new
   currency symbols, or glyphs not for a modern language, such as emojis or
   playing cards). Therefore, none of these fonts show version or md5
   information.

   The list below will not provide complete Unicode coverage. Unicode is
   updated every year, and most additions are now for historic writing
   systems. For almost-complete coverage you can install Noto fonts (about
   180 fonts when last checked) but that number of fonts makes it much less
   convenient to select a specific font in a document, and most people will
   regard many of them as a waste of space. We used to recommend the Unicode
   Font Guide, but that has not been updated since 2008 and many of its links
   are dead.

   Rendered examples of most of these fonts, and many others, with details of
   what languages they cover, some examples of latin fonts with the same
   metrics (listed as "Substitute latin fonts") and various files of dummy
   text to compare fonts of similar types, can be found at this font
   comparison page. That site also covers other current writing systems.

   Fonts are often supplied in zip files, requiring UnZip-6.0 to list and
   extract them, but even if the current release is a tarball you should
   still check to see if it will create a directory (scatterring the contents
   of a zipfile or tarball across the current directory can be very messy,
   and a few fonts create odd __MACOSX/ directories. In addition, many fonts
   are supplied with permissions which do not let 'other' read them - if a
   font is to be installed for system-wide use, any directories must be mode
   755 and all the files mode 644, so change them if necessary. If you
   forget, the root user may be able to see a particular font in fc-list but
   a normal user will not.

   As a font installation example, consider the installation of the Dejavu
   fonts. In this particular package, the TTF files are in a subdirectory.
   From the unpacked source directory, run the following commands as the root
   user:

 install -v -d -m755 /usr/share/fonts/dejavu &&
 install -v -m644 ttf/*.ttf /usr/share/fonts/dejavu &&
 fc-cache -v /usr/share/fonts/dejavu

   If you wish, you can also install any licenses or other documentation,
   either alongside the font or in a corresponding directory under
   /usr/share/doc/.

   A few fonts ship with source as well as with the completed TTF or OTF
   file(s). Unless you intend to modify the font, and have the correct tools
   (sometimes FontForge-20170731, but often commercial tools), the source
   will provide no benefit, so do not install it. One or two fonts even ship
   with Web Open Font Format (WOFF) files - useful if you run a webserver and
   want to use that font on it, but not useful for desktops.

   To provide greater Unicode coverage, you are recommended to install some
   of the following fonts, depending on what webistes and languages you wish
   to read. The next part of this page details some fonts which cover at
   least latin alphabets, the final part deals with come CJK issues.

  Note

   You are strongly recommended to install the Dejavu fonts.

    Caladea

   Caladea (created as a Chrome OS extra font, hence the 'crosextrafonts'
   tarball name) is metrically compatible with MS Cambria and can be used if
   you have to edit a document which somebody started in Microsoft Office
   using Cambria and then return it to them.

    Cantarell fonts

   Cantarell fonts - The Cantarell typeface family provides a contemporary
   Humanist sans serif. It is particularly optimised for legibility at small
   sizes and is the preferred font family for the GNOME-3 user interface.

    Carlito

   Carlito (created as another Chrome OS extra font, again the
   'crosextrafonts-' prefix in the tarball name) is metrically compatible
   with MS Calibri and can be used if you have to edit a document which
   somebody started in Microsoft Office using Calibri and then return it to
   them.

    DejaVu fonts

   DejaVu fonts - These fonts are an extension of, and replacement for, the
   Bitstream Vera fonts and provide Latin-based scripts with accents and
   punctuation such as "smart-quotes" and variant spacing characters, as well
   as Cyrillic, Greek, Arabic, Hebrew, Armenian, Georgian and some other
   glyphs. In the absence of the Bitstream Vera fonts (which had much less
   coverage), these are the default fallback fonts.

    GNU FreeFont

   GNU FreeFont - This set of fonts covers many non-CJK characters, in
   particular some of the variants of latin and cyrillic letters used in
   minority languages, but the glyphs are comparatively small (unlike DejaVu
   fonts which are comparatively large) and rather light weight ("less black"
   when black on white is used) which means that in some contexts such as
   terminals they are not visually pleasing, for example when most other
   glyphs are provided by another font. On the other hand, some fonts used
   primarily for printed output, and many CJK fonts, are also light weight.

    Gelasio

   Gelasio is metrically compatible with MS Georgia and fontconfig will use
   it if ever Georgia is requested but not installed.

    Liberation fonts

   The Liberation fonts provide libre substitutes for Arial, Courier New, and
   Times New Roman. Fontconfig will use them as substitutes for those fonts,
   and also for the similar Helvetica, Courier, Times Roman although for
   these latter it can prefer a different font (see the examples in the
   'Substitutes' PDFs at zarniwhoop.uk).

   Many people will find the Liberation fonts useful for pages where one of
   those fonts is requested.

    Microsoft Core Fonts

   The Microsoft Core fonts date from 2002. They were supplied with old
   versions of Microsoft Windows and were apparently made available for
   general use. You can extract them from the 'exe' files using bsd-tar from
   libarchive-3.4.0. Be sure to read the license before using them. At one
   time some of these fonts (particularly Arial, Times New Roman, and to a
   lesser extent Courier New) were widely specified on web pages. The full
   set contains Andale Mono, Arial, Arial Black, Comic Sans MS, Courier New,
   Georgia, Impact, Times New Roman, Trebuchet MS, Verdana and Webdings.

   Please note that if you only want to use a font with the same metrics
   (character size, etc) as Arial, Courier New, or Times New Roman you can
   use the libre Liberation Fonts (above), and similarly you can replace
   Georgia with Gelasio.

   Although many old posts recommend installing these fonts for
   better-looking output, there are more recent posts that these are ugly or
   'broken'. One suggestion is that they do not support anti-aliasing.

   The newer fonts which Microsoft made their defaults in later releases of
   MS Windows or MS Office (Calibri and Cambria) have never been freely
   available. But if you do not have them installed you can find metric
   equivalents (Carlito, Caladea) above.

    Noto fonts

   The Noto fonts ('No Tofu', i.e. avoiding boxes with dots [hex digits] when
   a glyph cannot be found) is a set of fonts which aim to cover every glyph
   in unicode, no matter how obscure. These fonts, or at least the Sans Serif
   fonts, are used by KF5 (initially only for gtk applications). If you want
   to cover historic languages, you can download all the fonts by clicking on
   the link at the top of that page.

   People using languages written in Latin, Greek or Cyrillic alphabets need
   only install Noto Sans itself, and perhaps Noto Sans Symbols for currency
   symbols. For more details on the CJK fonts see Noto Sans CJK below. There
   are also separate fonts for every other current writing system, but these
   too will also require Noto Sans (or Noto Serif) and perhaps Noto Symbols.

   However, you should be aware that fontconfig knows nothing about Noto
   fonts. The 'Noto Sans Something' fonts are each treated as separate fonts
   (and for Arabic there is not a specifically Sans name), so if you have
   other fonts installed then the choice of which font to use for missing
   glyphs where 'Noto Sans' is specified will be random, except that Sans
   fonts will be preferred over known Serif and Monospace fonts because Sans
   is the fallback for unknown fonts.

    Oxygen fonts

   When KDE Frameworks 5 was first released, it used the Oxygen fonts which
   were designed for integrated use with the KDE desktop. Those fonts are
   no-longer actively maintained, so KDE made a decision to switch to Noto
   fonts, but for the moment they are still required by 'startkde'.

   Originally these fonts were only supplied as source, needing CMake-3.15.2
   and FontForge-20170731 to create the TTF files. But for a while the source
   has also included the prepared TTF. The only unusual feature is that each
   TTF file is in its own subdirectory (oxygen-fonts/{*-?00}/) with the
   source in further subdirectories. You could just install the whole tarball
   if you prefer, although that will waste space.

    Source Code Pro

   This set of fonts from Adobe (seven different weights) includes what is
   now the preferred monospace font for those applications which use
   gsettings-desktop-schemas-3.32.0. The github release source-code-pro
   contains OTF (preferred) and TTF as well as the source and WOFF fonts.

   To use this in terminals, you probably only want the Regular font.

   There is also an older TTF version of this available from Google fonts but
   that has very limited coverage (adequate for most European languages using
   a latin alphabet).

    CJK fonts:

   As indicated earlier, usage of a combination of Chinese, Japanese and
   Korean can be tricky - each font only covers a subset of the available
   codepoints, the preferred shapes of the glyphs can differ between the
   languages, and many of the CJK fonts do not actually support modern
   Korean.

   Also, by default fontconfig prefers Chinese to Japanese. Tuning that is
   covered at Prefer chosen CJK fonts.

   Although Unicode has been extended to allow a very large number of CJK
   codepoints, those outside the Base Plane (greater than U+0xFFFF) are not
   commonly used in Mandarin (the normal form of written Chinese, whether
   Simplified (PRC) or Traditional (Taiwan)), or Japanese.

   For Hong Kong, which uses Traditional Chinese and where Cantonese is the
   dominant language, the Hong Kong Supplementary Character Set was added to
   Unicode in 2005 and revised in 2009 (it is part of CJK Extension B and
   contains more than 1900 characters). Earlier fonts will not be able to
   support either Cantonese or use of these characters where local names are
   written in Mandarin. The UMing HK, Noto Sans CJK HK and WenQuanYi Zen Hei
   fonts all seem to cover Hong Kong usage (fontconfig disagrees about Noto
   Sans CJK HK).

   The Han glyphs are double-width, other glyphs in the same font may be
   narrower. For their CJK content, all of these fonts can be regarded as
   monospaced (i.e. fixed width).

   If all you wish to do is to be able to render CJK glyphs, installing
   WenQuanYi ZenHei may be a good place to start if you do not already have a
   preference.

    Chinese fonts:

   In Chinese, there are three font styles in common use: Sung (also known as
   Song or Ming) which is the most-common ornamented ("serif") form, Kai
   ("brush strokes") which is an earlier ornamented style that looks quite
   different, and modern Hei ("sans"). Unless you appreciate the differences,
   you probably do not want to install Kai fonts.

      Noto Sans CJK

   Noto Sans CJK - Sans-Serif sets of all CJK fonts in a ttc - as the link
   says, you can choose to install the TTC and cover all the languages in all
   weights in a 110MB file, or you can download subsets. There are also
   Monospace versions.

      Opendesktop fonts

   A copy of version 1.4.2 of the opendesktop-fonts is preserved at Arch.
   This was a later development of fireflysung which BLFS used to recommend,
   adding Kai and Mono fonts. The name of the Sung font remains 'AR PL New
   Sung' so they cannot both be installed together.

   At one time there was a 1.6 release, and more recently some versions at
   github, which also included a Sans font (Odohei), but those have dropped
   off the web and it is unclear if there was a problem. Fontconfig does not
   know anything about the later fonts (AR PL New Kai, AR PL New Sung Mono)
   and will default to treating them as Sans.

      UMing

   UMing fonts - sets of Chinese Ming fonts (from Debian, use the '.orig'
   tarball) in a ttc which contain variations of Simplified and Traditional
   Chinese (Taiwanese, with second variant for different bopomofo, and
   Cantonese for Hong Kong). This ships with old-syntax files which you can
   install to /etc/fonts/conf.d/ but see Editing Old-Style conf files.

      WenQuanYi Zen Hei

   WenQuanYi Zen Hei provides a Sans-Serif font which covers all CJK scripts
   including Korean. Although it includes old-style conf files, these are not
   required: fontconfig will already treat these fonts (the 'sharp' contains
   bitmaps, the monospace appears not to be Mono in its ASCII part) as Sans,
   Serif, and Monospace. If all you wish to do is to be able to render Han
   and Korean text without worrying about the niceties of the shapes used,
   the main font from this package is a good font to use.

    Japanese fonts:

   In Japanese, Gothic fonts are Sans, Mincho are Serif. BLFS used to only
   mention the Kochi fonts, but those appear to now be the least-preferred of
   the Japanese fonts.

   Apart from the fonts detailed below, also consider Noto Sans CJK.

      IPAex fonts

   The IPAex fonts are the current version of the IPA fonts. Click on
   'English' at the link and then click on the Download icon to find IPAex
   Font Ver.003.01. Unfortunately, fontconfig only knows about the older
   IPAfonts and the forked IPA Mona font (which is not easily available and
   which apparently does not meet Debian's Free Software guidelines).
   Therefore if you install the IPAex fonts you may wish to make it known to
   fontconfig, see Prefer chosen CJK fonts for one possible way to do this.

      Kochi fonts

   The Kochi Substitute fonts were the first truly libre Japanese fonts (the
   earlier Kochi fonts were allegedly plagiarized from a commercial font).

      VL Gothic

   The VL Gothic font is a modern Japanese font in two variants with
   monotonic or proportional spacing for the non-Japanese characters.

    Korean fonts:

   In Korean, Batang or Myeongjo (the older name) are Serif, Dotum or Gothic
   are the main Sans fonts. BLFS previously recommended the Baekmuk fonts,
   but the Nanum and Un fonts are now preferred to Baekmuk by fontconfig
   because of user requests.

   A convenient place to see examples of these and many other Korean fonts is
   Free Korean Fonts. Click on 'Gothic Fonts' or 'All Categories -> Myeongjo
   Fonts', then click on the font example to see more details including the
   License, and click on the link to download it. For Nanum, you will need to
   be able to read Korean to find the download link on the page you get to.
   For Un there are direct links and you can find the un-fonts-core tarball
   in the releases/ directory.

   Alternatively, consider Noto Sans CJK (all of the variants cover Hangul)
   or WenQuanYi ZenHei.

   Last updated on 2019-08-06 13:15:13 -0700

Xorg Legacy

  Introduction to Xorg Legacy

   Xorg's ancestor (X11R1, in 1987) at first only provided bitmap fonts, with
   a tool (bdftopcf) to assist in their installation. With the introduction
   of xorg-server-1.19.0 and libXfont2 many people will not need them. There
   are still a few old packages which might require, or benefit from, these
   deprecated fonts and so the following packages are shown here.

  Note

   The font-adobe-100dpi package installs 100 dots per inch versions of
   Courier, Helvetica, New Century Schoolbook and Times fonts.

   The remaining font packages here provide 75dpi versions of those fonts,
   and various miscellaneous fonts - mostly for legacy encodings. Those are
   primarily to silence warnings when testing Xorg. In previous versions of
   BLFS a lot more legacy fonts were installed.

   Please consult the BLFS-7.10 book at
   http://www.linuxfromscratch.org/blfs/view/7.10/x/x7font.html if you wish
   to install any of those other fonts.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP): https://www.x.org/pub/individual/

     * Download (FTP): ftp://ftp.x.org/pub/individual/

     * Download size: 4.2 MB

     * Estimated disk space required: 30 MB

     * Estimated build time: 0.3 SBU

    Xorg Legacy Dependencies

      Required

   xcursor-themes-1.0.6

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/Xorg7Legacy

  Downloading Xorg Legacy

   First, create a list of files to be downloaded. This file will also be
   used to verify the integrity of the downloads when complete:

 cat > legacy.dat << "EOF"
 2a455d3c02390597feb9cefb3fe97a45 app/ bdftopcf-1.1.tar.bz2
 1347c3031b74c9e91dc4dfa53b12f143 font/ font-adobe-100dpi-1.0.3.tar.bz2
 6c9f26c92393c0756f3e8d614713495b font/ font-adobe-75dpi-1.0.3.tar.bz2
 cb7b57d7800fd9e28ec35d85761ed278 font/ font-jis-misc-1.0.3.tar.bz2
 0571bf77f8fab465a5454569d9989506 font/ font-daewoo-misc-1.0.3.tar.bz2
 a2401caccbdcf5698e001784dbd43f1a font/ font-isas-misc-1.0.3.tar.bz2
 EOF

   To download the needed files using wget, use the following commands:

 mkdir legacy &&
 cd legacy &&
 grep -v '^#' ../legacy.dat | awk '{print $2$3}' | wget -i- -c \
      -B https://www.x.org/pub/individual/ &&
 grep -v '^#' ../legacy.dat | awk '{print $1 " " $3}' > ../legacy.md5 &&
 md5sum -c ../legacy.md5

  Installation of Xorg Legacy

  Note

   When installing multiple packages in a script, the installation needs to
   be done as the root user. There are three general options that can be used
   to do this:

    1. Run the entire script as the root user (not recommended).

    2. Use the sudo command from the Sudo-1.8.27 package.

    3. Use su -c "command arguments" (quotes required) which will ask for the
       root password for every iteration of the loop.

   One way to handle this situation is to create a short bash function that
   automatically selects the appropriate method. Once the command is set in
   the environment, it does not need to be set again.

 as_root()
 {
   if   [ $EUID = 0 ];        then $*
   elif [ -x /usr/bin/sudo ]; then sudo $*
   else                            su -c \\"$*\\"
   fi
 }

 export -f as_root

   First, start a subshell that will exit on error:

 bash -e

   Install all of the packages by running the following commands:

 for package in $(grep -v '^#' ../legacy.md5 | awk '{print $2}')
 do
   packagedir=${package%.tar.bz2}
   tar -xf $package
   pushd $packagedir
     ./configure $XORG_CONFIG
     make
     as_root make install
   popd
   rm -rf $packagedir
   as_root /sbin/ldconfig
 done

   Finally, exit the shell that was started earlier:

 exit

  Contents

   Installed Programs: bdftopcf
   Installed Libraries: None
   Installed Directories: $XORG_PREFIX/share/fonts/100dpi,
   $XORG_PREFIX/share/fonts/75dpi, $XORG_PREFIX/share/fonts/misc

    Short Descriptions

   bdftopcf converts an X font from Bitmap Distribution Format to Portable    
            Compiled Format.                                                  

   Last updated on 2019-08-16 15:28:01 -0700

Chapter 25. X Libraries

   This chapter does not contain libraries that are required to run X. It
   does contain libraries that enhance X. In some cases the enhancement is as
   simple as font support. In others it is as complex as libraries that sit
   between X and applications that run on X whose purpose is to standardize
   the look and feel and inter-process communications for different
   applications. They also assist programmers by supplying common elements.

ATK-2.32.0

  Introduction to ATK

   ATK provides the set of accessibility interfaces that are implemented by
   other toolkits and applications. Using the ATK interfaces, accessibility
   tools have full access to view and control running applications.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/atk/2.32/atk-2.32.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/atk/2.32/atk-2.32.0.tar.xz

     * Download MD5 sum: c10b0b2af3c199e42caa6275b845c49d

     * Download size: 289 KB

     * Estimated disk space required: 7.6 MB

     * Estimated build time: less than 0.1 SBU

    ATK Dependencies

      Required

   GLib-2.60.6

      Recommended (Required if building GNOME)

   gobject-introspection-1.60.2

      Optional

   GTK-Doc-1.32

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/atk

  Installation of ATK

   Install ATK by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=/usr &&
 ninja

   This package does not come with a testsuite.

   Now, as the root user:

 ninja install

  Contents

   Installed Programs: None
   Installed Library: libatk-1.0.so
   Installed Directories: /usr/include/atk-1.0

    Short Descriptions

   libatk-1.0.so contains functions that are used by assistive technologies   
                 to interact with the desktop applications.                   

   Last updated on 2019-08-16 20:24:05 -0700

Atkmm-2.28.0

  Introduction to Atkmm

   Atkmm is the official C++ interface for the ATK accessibility toolkit
   library.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/atkmm/2.28/atkmm-2.28.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/atkmm/2.28/atkmm-2.28.0.tar.xz

     * Download MD5 sum: 6194ac577f15567adfa3c923944c6651

     * Download size: 872 KB

     * Estimated disk space required: 16 MB

     * Estimated build time: 0.2 SBU

    Atkmm Dependencies

      Required

   ATK-2.32.0 and GLibmm-2.60.0

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/atkmm

  Installation of Atkmm

   First, fix the documents directory name:

 sed -e '/^libdocdir =/ s/$(book_name)/atkmm-2.28.0/' \
     -i doc/Makefile.in

   Install Atkmm by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a testsuite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libatkmm-1.6.so
   Installed Directories: /usr/{include,lib}/atkmm-1.6 and
   /usr/share/{devhelp/books/atkmm-1.6,doc/atkmm-2.28.0}

    Short Descriptions

   libatkmm-1.6.so contains the ATK API classes. 

   Last updated on 2019-08-17 15:49:15 -0700

at-spi2-core-2.32.1

  Introduction to At-Spi2 Core

   The At-Spi2 Core package is a part of the GNOME Accessibility Project. It
   provides a Service Provider Interface for the Assistive Technologies
   available on the GNOME platform and a library against which applications
   can be linked.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/at-spi2-core/2.32/at-spi2-core-2.32.1.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/at-spi2-core/2.32/at-spi2-core-2.32.1.tar.xz

     * Download MD5 sum: 998fd9d858f8fa22c4c8c15567bf6254

     * Download size: 188 KB

     * Estimated disk space required: 6.7 MB (with tests)

     * Estimated build time: 0.1 SBU (with tests)

    At-Spi2 Core Dependencies

      Required

   dbus-1.12.16, GLib-2.60.6, and Xorg Libraries

      Optional (Required if building GNOME)

   gobject-introspection-1.60.2

      Optional

   GTK-Doc-1.32

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/at-spi2-core

  Installation of At-Spi2 Core

   Install At-Spi2 Core by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=/usr     \
       --sysconfdir=/etc \
       -Dsystemd_user_dir=no .. &&
 ninja

   A session bus address, normally available in an Xorg terminal, is
   necessary to run the tests. To test the results, issue: ninja test. The
   memory test is known to timeout.

   Now, as the root user:

 ninja install

  Command Explanations

   -Dsystemd_user_dir=no: This flag disables the installation of systemd unit
   files on SysV, where they are unable to be used.

  Contents

   Installed Programs: None
   Installed Library: libatspi.so
   Installed Directories: /usr/include/at-spi-2.0,
   /usr/share/defaults/at-spi2, and /usr/share/gtk-doc/html/libatspi

    Short Descriptions

   libatspi.so contains the At-Spi2 API functions. 

   Last updated on 2019-08-16 20:24:05 -0700

at-spi2-atk-2.32.0

  Introduction to At-Spi2 Atk

   The At-Spi2 Atk package contains a library that bridges ATK to At-Spi2
   D-Bus service.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/at-spi2-atk/2.32/at-spi2-atk-2.32.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/at-spi2-atk/2.32/at-spi2-atk-2.32.0.tar.xz

     * Download MD5 sum: 6a4b27bace3b9352721ed462b95f6291

     * Download size: 96 KB

     * Estimated disk space required: 8.1 MB (with tests)

     * Estimated build time: less than 0.1 SBU (with tests)

    At-Spi2 Atk Dependencies

      Required

   at-spi2-core-2.32.1 and ATK-2.32.0

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/at-spi2-atk

  Installation of At-Spi2 Atk

   Install At-Spi2 Atk by running the following commands:

 mkdir build &&
 cd build &&

 meson --prefix=/usr .. &&
 ninja

   To test the results, issue: ninja test. An already active graphical
   session with bus address is necessary to run the tests.

   Now, as the root user:

 ninja install

  Note

   If you installed the package to your system using a âDESTDIRâ method,
   /usr/share/glib-2.0/schemas/gschemas.compiled was not updated/created.
   Create (or update) the file using the following command as the root user:

 glib-compile-schemas /usr/share/glib-2.0/schemas

  Contents

   Installed Programs: None
   Installed Libraries: libatk-bridge-2.0.so and
   /usr/lib/gtk-2.0/modules/libatk-bridge.so
   Installed Directory: /usr/include/at-spi2-atk

    Short Descriptions

   libatk-bridge.so     is the Accessibility Toolkit GTK+ module.             
   libatk-bridge-2.0.so Contains the common functions used by GTK+            
                        Accessibility Toolkit Bridge.                         

   Last updated on 2019-08-16 20:24:05 -0700

Cairo-1.16.0

  Introduction to Cairo

   Cairo is a 2D graphics library with support for multiple output devices.
   Currently supported output targets include the X Window System, win32,
   image buffers, PostScript, PDF and SVG. Experimental backends include
   OpenGL, Quartz and XCB file output. Cairo is designed to produce
   consistent output on all output media while taking advantage of display
   hardware acceleration when available (e.g., through the X Render
   Extension). The Cairo API provides operations similar to the drawing
   operators of PostScript and PDF. Operations in Cairo include stroking and
   filling cubic BÃ©zier splines, transforming and compositing translucent
   images, and antialiased text rendering. All drawing operations can be
   transformed by any affine transformation (scale, rotation, shear, etc.).

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.cairographics.org/releases/cairo-1.16.0.tar.xz

     * Download MD5 sum: f19e0353828269c22bd72e271243a552

     * Download size: 41 MB

     * Estimated disk space required: 137 MB

     * Estimated build time: 0.4 SBU (using parallelism=4)

    Cairo Dependencies

      Required

   libpng-1.6.37 and Pixman-0.38.4

      Recommended

   Fontconfig-2.13.1, GLib-2.60.6 (required for most GUIs) and Xorg Libraries

      Optional

   Cogl-1.22.4, ghostscript-9.27, GTK+-3.24.10 and GTK+-2.24.32,
   GTK-Doc-1.32, libdrm-2.4.99, librsvg-2.44.14, LZO-2.10, Mesa-19.1.4,
   Poppler-0.79.0, Valgrind-3.15.0, DirectFB, jbig2dec, libspectre, Skia, and
   Qt4.

  Note

   There is a circular dependency between cairo and harfbuzz. If cairo is
   built before harbuzz, it is necessary to rebuild cairo after harfbuzz in
   order to build pango.

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/cairo

  Installation of Cairo

   Install Cairo by running the following commands:

 ./configure --prefix=/usr    \
             --disable-static \
             --enable-tee &&
 make

   This package does not have a working testsuite.

   Now, as the root user:

 make install

  Command Explanations

   --enable-tee: This switch enables the experimental tee surface backend
   which is required if using system-installed Cairo with Mozilla
   applications.

   --disable-static: This switch prevents installation of static versions of
   the libraries.

   --enable-xlib-xcb: This switch enables several experimental Xlib/XCB
   functions used by some window managers.

   --enable-gl: This switch enables Cairo's experimental OpenGL surface which
   is required for Wayland compositor and some other packages that are not
   part of BLFS.

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Contents

   Installed Programs: cairo-sphinx and cairo-trace
   Installed Libraries: libcairo.so, libcairo-gobject.so and
   libcairo-script-interpreter.so
   Installed Directories: /usr/{include,lib,share/gtk-doc/html}/cairo

    Short Descriptions

   cairo-sphinx                   is an internal utility for regression       
                                  analysis.                                   
   cairo-trace                    generates a log of all calls made by an     
                                  application to Cairo.                       
   libcairo.so                    contains the 2D graphics functions required 
                                  for rendering to the various output         
                                  targets.                                    
   libcairo-gobject.so            contains functions that integrate Cairo     
                                  with Glib's GObject type system.            
   libcairo-script-interpreter.so contains the script interpreter functions   
                                  for executing and manipulating Cairo        
                                  execution traces.                           

   Last updated on 2019-08-16 20:24:05 -0700

Cairomm-1.12.2

  Introduction to Cairomm

   The Cairomm package provides a C++ interface to Cairo.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.cairographics.org/releases/cairomm-1.12.2.tar.gz

     * Download MD5 sum: 9d2282ea34cf9aaa89208bb4bb911909

     * Download size: 1.3 MB

     * Estimated disk space required: 11 MB

     * Estimated build time: 0.1 SBU

    Cairomm Dependencies

      Required

   Cairo-1.16.0 and libsigc++-2.10.2

      Optional

   Boost-1.70.0 and Doxygen-1.8.16

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/cairomm

  Installation of Cairomm

   First, fix the documentation directory name:

 sed -e '/^libdocdir =/ s/$(book_name)/cairomm-1.12.2/' \
     -i docs/Makefile.in

   Install Cairomm by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libcairomm-1.0.so
   Installed Directories: /usr/{include,lib}/cairomm-1.0 and
   /usr/share/{devhelp/books/cairomm-1.0,doc/cairomm-1.12.2}

    Short Descriptions

   libcairomm-1.0.so contains the Cairo API classes. 

   Last updated on 2019-08-17 15:49:15 -0700

Cogl-1.22.4

  Introduction to Cogl

   Cogl is a modern 3D graphics API with associated utility APIs designed to
   expose the features of 3D graphics hardware using a direct state access
   API design, as opposed to the state-machine style of OpenGL.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/cogl/1.22/cogl-1.22.4.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/cogl/1.22/cogl-1.22.4.tar.xz

     * Download MD5 sum: 31755015a865c4af51ac84f6e53af8ab

     * Download size: 1.6 MB

     * Estimated disk space required: 55 MB

     * Estimated build time: 0.3 SBU (Using parallelism=4; add 0.5 SBU for
       tests)

    Cogl Dependencies

      Required

   Cairo-1.16.0, gdk-pixbuf-2.38.1, GLU-9.0.1, Mesa-19.1.4, Pango-1.42.4, and
   Wayland-1.17.0

      Recommended

   gobject-introspection-1.60.2

      Optional

   gst-plugins-base-1.16.0, GTK-Doc-1.32, SDL-1.2.15, and SDL2-2.0.10

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/cogl

  Installation of Cogl

   Install Cogl by running the following commands:

  Note

   This package may occasionally fail when building with multiple processors.
   See Using Multiple Processors for more information.

 ./configure --prefix=/usr --enable-gles1 --enable-gles2         \
     --enable-{kms,wayland,xlib}-egl-platform                    \
     --enable-wayland-egl-server                                 &&
 make

   To test the results, issue: make check. The tests should be run from an X
   terminal on the hardware accelerated Xorg Server. A few tests will use all
   CPUs in parallel, regardless of parallellism settings.

   Now, as the root user:

 make install

  Command Explanations

   --enable-gles1: This switch enables support for OpenGL ES 1.1.

   --enable-gles2: This switch enables support for OpenGL ES 2.0.

   --enable-{kms,wayland,xlib}-egl-platform: These switches enable support
   for KMS, Wayland and Xlib EGL platforms. They are required for GNOME
   Wayland support.

   --enable-wayland-egl-server: This switch enables Cogl's Wayland Server API
   which is required for GNOME Wayland support.

   --enable-cogl-gst: This switch enables gstreamer support.

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Contents

   Installed Programs: None
   Installed Libraries: libcogl-gles2.so, libcogl-pango.so, libcogl-path.so,
   and libcogl.so, and optional libraries libcogl-gst.so and
   /usr/lib/gstreamer-1.0/libgstcogl.so
   Installed Directories: /usr/include/cogl and /usr/share/cogl

    Short Descriptions

   libcogl-gles2.so is the OpenGL ES 2.0 integration library for Cogl.        
   libcogl-pango.so is the Pango integration library for Cogl.                
   libcogl.so       is an object oriented GL/GLES Abstraction/Utility Layer   
                    library.                                                  

   Last updated on 2019-08-23 21:03:19 -0700

Clutter-1.26.2

  Introduction to Clutter

   The Clutter package contains an open source software library used for
   creating fast, visually rich and animated graphical user interfaces.

   This package is known to build and work properly using an LFS-9.0
   platform.

  Note

   Anything built with this toolkit needs hardware 3D acceleration from the
   graphics driver at runtime. This is provided by Mesa (or by proprietary
   graphics drivers), but is not available for every graphics card nor for
   all virtual machines. You may wish to review Checking the DRI
   installation.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/clutter/1.26/clutter-1.26.2.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/clutter/1.26/clutter-1.26.2.tar.xz

     * Download MD5 sum: a03482cbacf735eca8c996f210a21ee5

     * Download size: 5.1 MB

     * Estimated disk space required: 85 MB (with tests)

     * Estimated build time: 1.2 SBU (with tests)

    Clutter Dependencies

      Required

   ATK-2.32.0, Cogl-1.22.4, and JSON-GLib-1.4.4

      Recommended

   gobject-introspection-1.60.2, GTK+-3.24.10, libgudev-233, libinput-1.14.0,
   libxkbcommon-0.8.4, and Wayland-1.17.0

      Optional

   GTK-Doc-1.32 and Tslib

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/clutter

  Installation of Clutter

   Install Clutter by running the following commands:

 ./configure --prefix=/usr               \
             --sysconfdir=/etc           \
             --enable-egl-backend        \
             --enable-evdev-input        \
             --enable-wayland-backend    \
             --enable-wayland-compositor &&
 make

   To test the results, issue: make -k check (you must be in an xterm or
   similar to do this, because it launches some windows). The test named
   actor-offscreen-redirect may hang.

   Now, as the root user:

 make install

  Command Explanations

   --enable-egl-backend: This switch enables the experimental EGL windowing
   backend.

   --enable-evdev-input: This switch enables the experimental Evdev input
   backend which is required for GNOME Wayland support.

   --enable-wayland and --enable-wayland-compositor: These switches enable
   the experimental Wayland API in Clutter which is required for GNOME
   Wayland support.

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Contents

   Installed Programs: None
   Installed Library: libclutter-1.0.so and libclutter-glx-1.0.so
   Installed Directories: /usr/include/clutter-1.0 and
   /usr/share/gtk-doc/html/{cally,clutter}

    Short Descriptions

   libclutter-1.0.so contains the Clutter API functions. 

   Last updated on 2019-08-24 09:01:41 -0700

clutter-gst-3.0.27

  Introduction to Clutter Gst

   The Clutter Gst package contains an integration library for using
   GStreamer with Clutter. Its purpose is to implement the ClutterMedia
   interface using GStreamer.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/clutter-gst/3.0/clutter-gst-3.0.27.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/clutter-gst/3.0/clutter-gst-3.0.27.tar.xz

     * Download MD5 sum: 2bf9d7ca146c9d71e86c45cd00e9a28e

     * Download size: 396 KB

     * Estimated disk space required: 10 MB

     * Estimated build time: 0.2 SBU

    Clutter Gst Dependencies

      Required

   Clutter-1.26.2, gst-plugins-base-1.16.0, and libgudev-233

      Recommended

   gobject-introspection-1.60.2 and gst-plugins-bad-1.16.0

      Optional

   GTK-Doc-1.32 and Cgc

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/clutter-gst

  Installation of Clutter Gst

   Install Clutter Gst by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a testsuite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libclutter-gst-3.0.so and
   /usr/lib/gstreamer-1.0/libgstclutter.so
   Installed Directories: /usr/include/clutter-gst-3.0 and
   /usr/share/gtk-doc/html/clutter-gst-3.0

    Short Descriptions

   libclutter-gst-3.0.so contains the Clutter Gst API functions. 

   Last updated on 2019-08-22 17:29:06 -0700

clutter-gtk-1.8.4

  Introduction to Clutter Gtk

   The Clutter Gtk package is a library providing facilities to integrate
   Clutter into GTK+ applications.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/clutter-gtk/1.8/clutter-gtk-1.8.4.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/clutter-gtk/1.8/clutter-gtk-1.8.4.tar.xz

     * Download MD5 sum: b363ac9878e2337be887b8ee9e1da00e

     * Download size: 324 KB

     * Estimated disk space required: 5.2 MB

     * Estimated build time: 0.1 SBU

    Clutter Gtk Dependencies

      Required

   Clutter-1.26.2 and GTK+-3.24.10

      Recommended

   gobject-introspection-1.60.2

      Optional

   GTK-Doc-1.32

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/clutter-gtk

  Installation of Clutter Gtk

   Install Clutter Gtk by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Contents

   Installed Programs: None
   Installed Library: libclutter-gtk-1.0.so
   Installed Directories: /usr/include/clutter-gtk-1.0 and
   /usr/share/gtk-doc/html/clutter-gtk-1.0

    Short Descriptions

   libclutter-gtk-1.0.so contains the Clutter Gtk API functions. 

   Last updated on 2019-08-22 17:29:06 -0700

colord-gtk-0.2.0

  Introduction to Colord GTK

   The Colord GTK package contains GTK+ bindings for Colord.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.freedesktop.org/software/colord/releases/colord-gtk-0.2.0.tar.xz

     * Download MD5 sum: 66d048803c8b89e5e63da4b461484933

     * Download size: 20 KB

     * Estimated disk space required: 41 MB

     * Estimated build time: less than 0.1 SBU

    Colord GTK Dependencies

      Required

   colord-1.4.4 and GTK+-3.24.10

      Recommended

   gobject-introspection-1.60.2 and Vala-0.44.7

      Optional

   DocBook-utils-0.6.14, GTK+-2.24.32 and GTK-Doc-1.32

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/colord-gtk

  Installation of Colord GTK

  Warning

   If building the documentation make -j1 must be used.

   Install Colord GTK by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=/usr  \
       -Dgtk2=true    \
       -Dvapi=true    \
       -Ddocs=false   \
       -Dman=false .. &&
 ninja

   To test the results, issue: ninja test. The tests need to be run from an X
   session, and may require a color profile for your primary display.

   Now, as the root user:

 ninja install

  Command Explanations

   -Dvapi=true: This switch enables building of the Vala bindings. Remove if
   you don't have Vala-0.44.7 installed.

   -Dgtk2=true: This switch enables building the GTK+-2 bindings for colord.

   -Ddocs=false: This switch disables building GTK-DOC based documentation.
   Even if GTK-DOC is installed, you will need the namespaced versions of the
   Docbook XSL stylesheets.

   -Dman=false: This switch disables generating the manual pages for this
   package. Remove this switch if you have namespaced versions of the Docbook
   XSL stylesheets installed.

  Contents

   Installed Programs: cd-convert
   Installed Libraries: libcolord-gtk.so and libcolord-gtk2.so
   Installed Directories: /usr/include/colord-1/colord-gtk and
   /usr/share/gtk-doc/html/colord-gtk

    Short Descriptions

   cd-convert        is a Color Manager Testing Tool.     
   libcolord-gtk.so  contains the Colord GTK+ bindings.   
   libcolord-gtk2.so contains the Colord GTK+-2 bindings. 

   Last updated on 2019-08-22 17:29:06 -0700

FLTK-1.3.5

  Introduction to FLTK

   FLTK (pronounced "fulltick") is a cross-platform C++ GUI toolkit. FLTK
   provides modern GUI functionality and supports 3D graphics via OpenGL and
   its built-in GLUT emulation libraries used for creating graphical user
   interfaces for applications.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://fltk.org/pub/fltk/1.3.5/fltk-1.3.5-source.tar.gz

     * Download MD5 sum: e85017defd5a03ae82e634311db87bbf

     * Download size: 5.1 MB

     * Estimated disk space required: 117 MB (with documentation)

     * Estimated build time: 0.2 SBU (Using parallelism=4)

    FLTK Dependencies

      Required

   Xorg Libraries

      Recommended

   hicolor-icon-theme-0.17, libjpeg-turbo-2.0.2, and libpng-1.6.37

      Optional

   alsa-lib-1.1.9, desktop-file-utils-0.24, Doxygen-1.8.16, GLU-9.0.1,
   Mesa-19.1.4, and texlive-20190410 (or install-tl-unx)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/fltk

  Installation of FLTK

  Note

   The tar extraction directory is fltk-1.3.5 and not fltk-1.3.5-source as
   indicated by the tarball name.

   Install FLTK by running the following commands:

 sed -i -e '/cat./d' documentation/Makefile       &&

 ./configure --prefix=/usr    \
             --enable-shared  &&
 make

   If you wish to create the API documentation, issue:

 make -C documentation html

   The tests for the package are interactive. To execute the tests, run
   test/unittests. In addition, there are 70 other executable test programs
   in the test directory that can be run individually.

   Now, as the root user:

 make docdir=/usr/share/doc/fltk-1.3.5 install

   If desired, install some example games built as a part of the tests, extra
   documentation and example programs. As the root user:

 make -C test          docdir=/usr/share/doc/fltk-1.3.5 install-linux &&
 make -C documentation docdir=/usr/share/doc/fltk-1.3.5 install-linux

  Command Explanations

   sed ... documentation/Makefile: Avoid installing pages in
   /usr/share/man/cat*.

  Contents

   Installed Programs: blocks, checkers, fltk-config, fluid, and sudoku
   Installed Libraries: libfltk.{a,so}, libfltk_forms.{a,so},
   libfltk_gl.{a,so}, and libfltk_images.{a,so}
   Installed Directories: /usr/include/FL and /usr/share/doc/fltk-1.3.5

    Short Descriptions

   blocks      is a FLTK-based block elimination game.                        
   checkers    is a FLTK-based version of the game of checkers.               
   fltk-config is a utility script that can be used to get information about  
               the current version of FLTK that is installed on the system.   
   fluid       is an interactive GUI designer for FLTK.                       
   sudoku      is an implementation of the popular Sudoku game.               
   libfltk.so  contains functions that provide an API to implement graphical  
               user interfaces.                                               

   Last updated on 2019-08-20 19:30:55 -0700

Freeglut-3.0.0

  Introduction to Freeglut

   Freeglut is intended to be a 100% compatible, completely opensourced clone
   of the GLUT library. GLUT is a window system independent toolkit for
   writing OpenGL programs, implementing a simple windowing API, which makes
   learning about and exploring OpenGL programming very easy.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://downloads.sourceforge.net/freeglut/freeglut-3.0.0.tar.gz

     * Download MD5 sum: 90c3ca4dd9d51cf32276bc5344ec9754

     * Download size: 412 KB

     * Estimated disk space required: 14 MB

     * Estimated build time: 0.2 SBU

    Freeglut Dependencies

      Required

   CMake-3.15.2 and Mesa-19.1.4

      Recommended

   GLU-9.0.1

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/freeglut

  Installation of Freeglut

   Install Freeglut by running the following commands:

 mkdir build &&
 cd    build &&

 CMAKE_LIBRARY_PATH=$XORG_PREFIX/lib     \
 CMAKE_INCLUDE_PATH=$XORG_PREFIX/include \
 cmake -DCMAKE_INSTALL_PREFIX=/usr       \
       -DCMAKE_BUILD_TYPE=Release        \
       -DFREEGLUT_BUILD_DEMOS=OFF        \
       -DFREEGLUT_BUILD_STATIC_LIBS=OFF  \
       .. &&

 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   -DFREEGLUT_BUILD_DEMOS=OFF: Disable building optional demo programs. Note
   that if you choose to build them, their installation must be done
   manually. The demo programs are limited and installation is not
   recommended.

   -DFREEGLUT_BUILD_STATIC_LIBS=OFF: Do not build the static library.

  Contents

   Installed Programs: None
   Installed Library: libglut.so
   Installed Directories: None

    Short Descriptions

   libglut.so contains functions that implement the OpenGL Utility Toolkit. 

   Last updated on 2019-08-19 21:51:38 -0700

gdk-pixbuf-2.38.1

  Introduction to Gdk Pixbuf

   The Gdk Pixbuf package is a toolkit for image loading and pixel buffer
   manipulation. It is used by GTK+ 2 and GTK+ 3 to load and manipulate
   images. In the past it was distributed as part of GTK+ 2 but it was split
   off into a separate package in preparation for the change to GTK+ 3.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gdk-pixbuf/2.38/gdk-pixbuf-2.38.1.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gdk-pixbuf/2.38/gdk-pixbuf-2.38.1.tar.xz

     * Download MD5 sum: f6ba2195acd18c5c9555421f30c31cc1

     * Download size: 5.3 MB

     * Estimated disk space required: 37 MB (with tests)

     * Estimated build time: 0.4 SBU (Using parallelism=4; with tests)

    Gdk Pixbuf Dependencies

      Required

   GLib-2.60.6, libjpeg-turbo-2.0.2, libpng-1.6.37, and shared-mime-info-1.12

      Recommended

   librsvg-2.44.14 (runtime dependency, needed for loading symbolic icons),
   LibTIFF-4.0.10, and Xorg Libraries (Many GTK+ applications require
   gdk-pixbuf-xlib).

      Optional (Required if building GNOME)

   gobject-introspection-1.60.2

      Optional

   JasPer-2.0.14 and GTK-Doc-1.32

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gdk-pixbuf

  Installation of Gdk Pixbuf

   Install Gdk Pixbuf by running the following commands:

 mkdir build &&
 cd build &&

 meson --prefix=/usr .. &&
 ninja

   To test the results, issue: ninja test. The tests make a heavy use of
   disk.

   Now, as the root user:

 ninja install

  Note

   If you installed the package on to your system using a âDESTDIRâ method,
   an important file was not installed and should be copied and/or generated.
   Generate it using the following command as the root user:

 gdk-pixbuf-query-loaders --update-cache

  Command Explanations

   -Ddocs=true: Use this parameter if GTK-Doc is installed and you wish to
   rebuild and install the API documentation.

   -Djasper=true: If you've installed JasPer-2.0.14 and you want Gdk Pixbuf
   to use it to compile a JPEG2000 image loader, pass this switch to meson.

  Contents

   Installed Programs: gdk-pixbuf-csource, gdk-pixbuf-pixdata,
   gdk-pixbuf-query-loaders, and gdk-pixbuf-thumbnailer,
   Installed Libraries: libgdk_pixbuf-2.0.so and libgdk_pixbuf_xlib-2.0.so
   Installed Directories: /usr/{include,lib}/gdk-pixbuf-2.0,
   /usr/share/installed-tests/gdk-pixbuf, /usr/share/gtk-doc/html/gdk-pixbuf,
   and /usr/share/thumbnailers

    Short Descriptions

   gdk-pixbuf-csource        is a small utility that generates C code         
                             containing images, used for compiling images     
                             directly into programs.                          
   gdk-pixbuf-pixdata        is a tool used to convert GdkPixbuf to           
                             GdkPixdata.                                      
   gdk-pixbuf-query-loaders  collects information about loadable modules for  
                             Gdk Pixbuf and writes it to the default cache    
                             file location, or to stdout.                     
   gdk-pixbuf-thumbnailer    creates thumbnails of pictures for use in other  
                             applications.                                    
   libgdk_pixbuf-2.0.so      contains functions used to load and render       
                             images.                                          
   libgdk_pixbuf_xlib-2.0.so contains functions used to manipulate images and 
                             interfaces with Xlib.                            

   Last updated on 2019-08-16 20:24:05 -0700

GLEW-2.1.0

  Introduction to GLEW

   GLEW is the OpenGL Extension Wrangler Library.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP): https://downloads.sourceforge.net/glew/glew-2.1.0.tgz

     * Download MD5 sum: b2ab12331033ddfaa50dc39345343980

     * Download size: 747 KB

     * Estimated disk space required: 16 MB

     * Estimated build time: less than 0.1 SBU

    glew Dependencies

      Required

   Mesa-19.1.4

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/GLEW

  Installation of GLEW

   Install GLEW by running the following commands:

 sed -i 's%lib64%lib%g' config/Makefile.linux &&
 sed -i -e '/glew.lib.static:/d' \
        -e '/0644 .*STATIC/d'    \
        -e 's/glew.lib.static//' Makefile     &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install.all

  Command Explanations

   sed -i 's%lib64%lib%g' ...: This ensures that the library is installed in
   /usr/lib.

   sed -i -e '/glew.lib.static:/d' ...: This suppresses the static library.

   make install.all: This installs the programs as well as the library.

  Contents

   Installed Programs: glewinfo, visualinfo.
   Installed Library: libGLEW.so.
   Installed Directory: /usr/include/GL.

    Short Descriptions

   glewinfo   provides information about the supported extensions. 
   visualinfo is an extended version of glxinfo.                   
   libGLEW.so provides functions to access OpenGL extensions.      

   Last updated on 2019-08-22 17:29:06 -0700

GLU-9.0.1

  Introduction to GLU

   This package provides the Mesa OpenGL Utility library.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * GLU Download (FTP):
       ftp://ftp.freedesktop.org/pub/mesa/glu/glu-9.0.1.tar.xz

     * GLU Download MD5 sum: 151aef599b8259efe9acd599c96ea2a3

     * GLU Download size: 428 KB

     * Estimated GLU disk space required: 13 MB

     * Estimated GLU build time: 0.2 SBU

    GLU Dependencies

      Required

   Mesa-19.1.4

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/glu

  Installation of GLU

   Install GLU by running the following commands:

 ./configure --prefix=$XORG_PREFIX --disable-static &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   --disable-static: This switch prevents installation of static versions of
   the libraries.

  Contents

   Installed Programs: None
   Installed Library: libGLU.so
   Installed Directories: None

    Short Descriptions

   libGLU.so is the Mesa OpenGL Utility library. 

   Last updated on 2019-08-17 15:49:15 -0700

GOffice-0.10.45

  Introduction to GOffice

   The GOffice package contains a library of GLib/GTK document centric
   objects and utilities. This is useful for performing common operations for
   document centric applications that are conceptually simple, but complex to
   implement fully. Some of the operations provided by the GOffice library
   include support for plugins, load/save routines for application documents
   and undo/redo functions.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/goffice/0.10/goffice-0.10.45.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/goffice/0.10/goffice-0.10.45.tar.xz

     * Download MD5 sum: 93c70ae02724ccc4155dc7d5c38cb4d4

     * Download size: 2.3 MB

     * Estimated disk space required: 81 MB (with tests)

     * Estimated build time: 0.4 SBU (Using parallelism=4; add 1.0 SBU for
       tests)

    GOffice Dependencies

      Required

   GTK+-3.24.10, libgsf-1.14.46, librsvg-2.44.14, libxslt-1.1.33, and
   Which-2.21

      Optional

   gobject-introspection-1.60.2, ghostscript-9.27,
   gsettings-desktop-schemas-3.32.0, GTK-Doc-1.32, Lasem, and libspectre

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/goffice010

  Installation of GOffice

   Install GOffice by running the following commands:

 ./configure --prefix=/usr &&
 make

   If you wish to run the tests, issue: make check.

   Now, as the root user:

 make install

  Command Explanations

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Contents

   Installed Programs: None
   Installed Libraries: libgoffice-0.10.so
   Installed Directories: /usr/include/libgoffice-0.10,
   /usr/{lib,share}/goffice, and /usr/share/gtk-doc/html/goffice-0.10

    Short Descriptions

   libgoffice-0.10.so contains API functions to provide support for document  
                      centric objects and utilities.                          

   Last updated on 2019-08-22 17:29:06 -0700

GTK+-2.24.32

  Introduction to GTK+ 2

   The GTK+ 2 package contains libraries used for creating graphical user
   interfaces for applications.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gtk+/2.24/gtk+-2.24.32.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gtk+/2.24/gtk+-2.24.32.tar.xz

     * Download MD5 sum: d5742aa42275203a499b59b4c382a784

     * Download size: 12 MB

     * Estimated disk space required: 275 MB

     * Estimated build time: 1.0 SBU (using parallelism=4; add 0.1 SBU for
       tests)

    GTK+ 2 Dependencies

      Required

   ATK-2.32.0, gdk-pixbuf-2.38.1 and Pango-1.42.4

      Recommended

   hicolor-icon-theme-0.17

      Optional

   Cups-2.2.12, DocBook-utils-0.6.14, gobject-introspection-1.60.2 and
   GTK-Doc-1.32

  Note

   If gobject-introspection-1.60.2 was installed after ATK-2.32.0,
   gdk-pixbuf-2.38.1, and/or Pango-1.42.4, those packages will have to be
   rebuilt before this package can be built.

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gtk+2

  Installation of GTK+ 2

   Install GTK+ 2 by running the following commands:

 sed -e 's#l \(gtk-.*\).sgml#& -o \1#' \
     -i docs/{faq,tutorial}/Makefile.in      &&

 ./configure --prefix=/usr --sysconfdir=/etc &&

 make

   To test the results, issue: make check. Note that you must run the tests
   from a session with X Window Display capability (i.e., not a text-based
   terminal/console) as the tests attempt to open an X window, and the tests
   can take an excessively long time. Using an X Window, the tests should
   take less than 0.3 SBU.

   Now, as the root user:

 make install

  Note

   If you installed the package on to your system using a âDESTDIRâ method,
   an important file was not installed and must be copied and/or generated.
   Generate it using the following command as the root user:

 gtk-query-immodules-2.0 --update-cache

  Command Explanations

   sed -i 's#l \(gtk-.*\).sgml#& -o \1#' docs/{faq,tutorial}/Makefile.in: If
   you have DocBook-utils-0.6.14 installed (specifically, if configure finds
   db2html) then it will try to use it to rebuild some of its HTML
   documentation and fail due to bugs in some of the Makefiles. This sed
   fixes the Makefiles.

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Configuring GTK+ 2

    Config Files

   ~/.gtkrc-2.0, /etc/gtk-2.0/gtkrc, and /usr/share/gtk-2.0/gtkrc

    Configuration Information

   GTK+ 2 themes change the way a GTK+ 2 application looks. A GTK+ 2 icon
   theme can be used to change the icons that appear on the application's
   toolbar. If you have installed a GTK+ 2 theme (such as gnome-themes or GTK
   Engines-2.20.2), a GTK+ icon theme (such as adwaita-icon-theme-3.32.0) you
   can set your preferences in ~/.gtkrc-2.0:

 cat > ~/.gtkrc-2.0 << "EOF"
 include "/usr/share/themes/Glider/gtk-2.0/gtkrc"
 gtk-icon-theme-name = "hicolor"
 EOF

   There are many more themes available at Gnome-Look.org and other places.

   Once you've settled on themes you like, you can (as the root user) make
   them the default system wide:

 cat > /etc/gtk-2.0/gtkrc << "EOF"
 include "/usr/share/themes/Clearlooks/gtk-2.0/gtkrc"
 gtk-icon-theme-name = "elementary"
 EOF

   LXAppearance-0.6.3 is a GTK+ 2 application that can help you choose the
   themes you like.

  Contents

   Installed Programs: gtk-builder-convert, gtk-demo,
   gtk-query-immodules-2.0, and gtk-update-icon-cache
   Installed Libraries: libgailutil.so, libgdk-x11-2.0.so, and
   libgtk-x11-2.0.so
   Installed Directories: /etc/gtk-2.0,
   /usr/include/{gail-1.0,gtk-2.0,gtk-unix-print-2.0}, /usr/lib/gtk-2.0,
   /usr/share/doc/gtk+-2.24.32, /usr/share/gtk-2.0,
   /usr/share/gtk-doc/html/{gail-libgail-util,gdk2,gtk2}, and
   /usr/share/themes/{Default,Emacs,Raleigh}

    Short Descriptions

   gtk-builder-convert     converts glade files into XML files which can be   
                           loaded with GtkBuilder.                            
   gtk-demo                demonstrates GTK+ 2 functionality and provides     
                           code for the examples.                             
   gtk-query-immodules-2.0 collects information about loadable input method   
                           modules for GTK+ 2 and writes it to standard       
                           output.                                            
   gtk-update-icon-cache   creates mmap()able cache files for icon themes.    
                           Starting with gtk+-2.24.24, add the flag           
                           â--include-image-dataâ to this command, if you     
                           wish previous behavior, with image data in the     
                           cache.                                             
   libgdk-x11-2.0.so       contains functions that act as a wrapper around    
                           the low-level drawing and windowing functions      
                           provided by the underlying graphics system.        
   libgtk-x11-2.0.so       contains functions that provide an API to          
                           implement graphical user interfaces.               

   Last updated on 2019-08-16 20:24:05 -0700

GTK+-3.24.10

  Introduction to GTK+ 3

   The GTK+ 3 package contains libraries used for creating graphical user
   interfaces for applications.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gtk+/3.24/gtk+-3.24.10.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gtk+/3.24/gtk+-3.24.10.tar.xz

     * Download MD5 sum: 1b9f49a500a104a3e40f8d8eb7e6ce96

     * Download size: 20 MB

     * Estimated disk space required: 459 MB (including tests; add 2 MB for
       tests)

     * Estimated build time: 0.8 SBU (using parallelism=4, add 0.1 SBU for
       tests)

    GTK+ 3 Dependencies

      Required

   at-spi2-atk-2.32.0, FriBidi-1.0.5, gdk-pixbuf-2.38.1, libepoxy-1.5.3, and
   Pango-1.42.4

      Recommended

   adwaita-icon-theme-3.32.0 (default for some gtk+3 settings keys, also
   needed for tests), hicolor-icon-theme-0.17 (needed for tests), ISO
   Codes-4.3, libxkbcommon-0.8.4, sassc-3.6.1, Wayland-1.17.0, and
   wayland-protocols-1.18

      Recommended (Required if building GNOME)

   gobject-introspection-1.60.2

      Optional

   colord-1.4.4, Cups-2.2.12, DocBook-utils-0.6.14, GTK-Doc-1.32,
   JSON-GLib-1.4.4, PyAtSpi2-2.32.1 (for tests), rest-0.8.1, and PAPI

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gtk3

  Installation of GTK+ 3

  Caution

   If you are upgrading from a version of GTK+3 prior to 3.24.9, you must run
   the remove-la-files.sh script from Libtool archive (.la) files after
   installing GTK+.

   Install GTK+ 3 by running the following commands:

 cd build &&
 meson --prefix=/usr     \
       -Dcolord=yes      \
       -Dgtk_doc=false   \
       -Dman=true        \
       -Dbroadway_backend=true .. &&
 ninja

   Some tests fail if /usr/share/glib-2.0/schemas/gschemas.compiled is not
   found. If you wish to run the test suite, create (or update) the file
   using the following command as the root user: glib-compile-schemas
   /usr/share/glib-2.0/schemas.

   To test the results you need a graphical session, then issue ninja test.
   six tests are known to fail in the a11y suite.

   Now, as the root user:

 ninja install

  Note

   If you installed the package on to your system using a âDESTDIRâ method,
   an important file was not installed and must be copied and/or generated.
   Generate it using the following command as the root user:

 gtk-query-immodules-3.0 --update-cache

  Note

   If you installed the package to your system using a âDESTDIRâ method,
   /usr/share/glib-2.0/schemas/gschemas.compiled was not updated/created.
   Create (or update) the file using the following command as the root user:

 glib-compile-schemas /usr/share/glib-2.0/schemas

  Command Explanations

   -Dbroadway_backend=true: This switch enables the HTML5 GTK backend.

   -Dcolord=yes: This switch allows color support in the GTK+ printing
   backend.

   -Dman=true: This switch allows generating manual pages.

   -Dgtk_doc=false: This switch disables building documentation. Replace with
   -Dgtk_doc=true if you have GTK-Doc-1.32 installed and wish to generate
   documentation.

  Configuring GTK+ 3

    Config Files

   ~/.config/gtk-3.0/settings.ini and /etc/gtk-3.0/settings.ini

    Configuration Information

   GTK+ 3 themes change the way a GTK+ 3 application looks. An icon theme can
   be used to change the icons that appear on the application's toolbar. If
   you have installed a GTK+ 3 theme (e.g. gnome-themes-extra-3.28), an icon
   theme (such as oxygen-icons5-5.61.0) and/or a font (Dejavu fonts), you can
   set your preferences in ~/.config/gtk-3.0/settings.ini, or the default
   system wide configuration file (as the root user), in
   /etc/gtk-3.0/settings.ini. For the local user an example is:

 mkdir -vp ~/.config/gtk-3.0
 cat > ~/.config/gtk-3.0/settings.ini << "EOF"
 [Settings]
 gtk-theme-name = Adwaita
 gtk-icon-theme-name = oxygen
 gtk-font-name = DejaVu Sans 12
 gtk-cursor-theme-size = 18
 gtk-toolbar-style = GTK_TOOLBAR_BOTH_HORIZ
 gtk-xft-antialias = 1
 gtk-xft-hinting = 1
 gtk-xft-hintstyle = hintslight
 gtk-xft-rgba = rgb
 gtk-cursor-theme-name = Adwaita
 EOF

   There are many settings keys, some with default values. You can find them
   at Settings: GTK+ 3 Reference Manual. There are many more themes available
   at http://gnome-look.org/ and other places.

  Contents

   Installed Programs: broadwayd, gtk3-demo, gtk3-demo-application,
   gtk3-icon-browser, gtk3-widget-factory, gtk-builder-tool,
   gtk-encode-symbolic-svg, gtk-launch, gtk-query-immodules-3.0,
   gtk-query-settings, and gtk-update-icon-cache
   Installed Libraries: libgailutil-3.so, libgdk-3.so, and libgtk-3.so
   Installed Directories: /etc/gtk-3.0, /usr/include/{gail,gtk}-3.0,
   /usr/{lib,share}/gtk-3.0,
   /usr/share/gtk-doc/html/{gail-libgail-util,gdk,gtk}3, and
   /usr/share/themes/{Default,Emacs}/gtk-3.0

    Short Descriptions

   broadwayd               provides support for displaying GTK+ 3             
                           applications in a web browser, using HTML5 and web 
                           sockets.                                           
   gtk3-demo               is a simple program that demonstrates some of the  
                           tasks that can be done with GTK+ 3                 
   gtk3-demo-application   is a simple GTK+ 3 application.                    
   gtk3-icon-browser       is a utility to explore the icons in the current   
                           icon theme. It shows icons in various sizes, their 
                           symbolic variants where available, as well as a    
                           description of the icon and its context.           
   gtk3-widget-factory     is a program to view GTK+ 3 themes and widgets.    
   gtk-builder-tool        can perform various operations on GtkBuilder .ui   
                           files.                                             
   gtk-encode-symbolic-svg converts symbolic svg icons into specially         
                           prepared png files. GTK+ 3 can load and recolor    
                           these pngs, just like original svgs, but loading   
                           them is much faster.                               
   gtk-launch              launches an application using the given name. The  
                           name should match the application desktop file     
                           name, as residing in /usr/share/applications, with 
                           or without the '.desktop' suffix.                  
   gtk-query-immodules-3.0 collects information about loadable input method   
                           modules for GTK+ 3 and writes it to the default    
                           cache file location, or to standard output.        
   gtk-query-settings      provides a complete listing of all settings        
                           related to GTK+ 3                                  
   gtk-update-icon-cache   is an icon theme caching utility that creates      
                           mmap()able cache files for icon themes.            
   libgailutil-3.so        contains functions that implement the              
                           accessibility interfaces defined by the GNOME      
                           Accessibility Toolkit.                             
   libgdk-3.so             contains functions that act as a wrapper around    
                           the low-level drawing and windowing functions      
                           provided by the underlying graphics system.        
   libgtk-3.so             contains functions that provide an API to          
                           implement graphical user interfaces.               

   Last updated on 2019-08-16 20:24:05 -0700

GTK Engines-2.20.2

  Introduction to GTK Engines

   The GTK Engines package contains eight themes/engines and two additional
   engines for GTK2.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gtk-engines/2.20/gtk-engines-2.20.2.tar.bz2

     * Download (FTP):
       http://ftp.gnome.org/pub/gnome/sources/gtk-engines/2.20/gtk-engines-2.20.2.tar.bz2

     * Download MD5 sum: 5deb287bc6075dc21812130604c7dc4f

     * Download size: 676 KB

     * Estimated disk space required: 19 MB

     * Estimated build time: 0.4 SBU

    GTK Engines Dependencies

      Required

   GTK+-2.24.32

      Optional

   Lua-5.3.5 and Which-2.21 (required for test suite)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gtk-engines

  Installation of GTK Engines

   Install GTK Engines by running the following commands:

 ./configure --prefix=/usr &&
 make

   To test the results, issue: make check.

   Now, as the root user:

 make install

  Command Explanations

   --enable-lua --with-system-lua: Use these switches if you installed Lua
   and want to build Lua theming engine.

  Contents

   Installed Programs: None
   Installed Libraries: libclearlooks.so, libcrux-engine.so, libglide.so,
   libhcengine.so, libindustrial.so, libmist.so, libredmond95.so and
   libthinice.so (GTK-2 engines libraries)
   Installed Directories: /usr/lib/gtk-2.0/2.10.0/engines,
   /usr/share/gtk-engines, /usr/share/themes/Clearlooks,
   /usr/share/themes/Crux, /usr/share/themes/Industrial,
   /usr/share/themes/Mist, /usr/share/themes/Redmond and
   /usr/share/themes/ThinIce
   Installed Themes: Clearlooks, Crux, Industrial, Mist, Redmond and ThinIce

    Short Descriptions

   engine libraries are manager systems for specific themes. 

   Last updated on 2019-08-20 12:21:40 -0700

Gtkmm-2.24.5

  Introduction to Gtkmm

   The Gtkmm package provides a C++ interface to GTK+ 2. It can be installed
   alongside Gtkmm-3.24.1 (the GTK+ 3 version) with no namespace conflicts.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gtkmm/2.24/gtkmm-2.24.5.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gtkmm/2.24/gtkmm-2.24.5.tar.xz

     * Download MD5 sum: 6c59ae8bbff48fad9132f23af347acf1

     * Download size: 11 MB

     * Estimated disk space required: 426 MB (with tests)

     * Estimated build time: 3.4 SBU (with tests)

    Gtkmm Dependencies

      Required

   Atkmm-2.28.0, GTK+-2.24.32 and Pangomm-2.42.0

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gtkmm2

  Installation of Gtkmm

   First, fix the documents directory name:

 sed -e '/^libdocdir =/ s/$(book_name)/gtkmm-2.24.5/' \
     -i docs/Makefile.in

   Install Gtkmm by running the following commands:

 ./configure --prefix=/usr &&
 make

   To test the results, issue: make check.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: libgdkmm-2.4.so and libgtkmm-2.4.so
   Installed Directories: /usr/include/gdkmm-2.4, /usr/include/gtkmm-2.4,
   /usr/lib/gdkmm-2.4, /usr/lib/gtkmm-2.4, and
   /usr/share/{devhelp/books/gtkmm-2.4,doc/gtkmm-2.24.5}

    Short Descriptions

   libgdkmm-2.4.so contains the GDK API classes.  
   libgtkmm-2.4.so contains the GTK+ API classes. 

   Last updated on 2019-08-17 15:49:15 -0700

Gtkmm-3.24.1

  Introduction to Gtkmm

   The Gtkmm package provides a C++ interface to GTK+ 3.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gtkmm/3.24/gtkmm-3.24.1.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gtkmm/3.24/gtkmm-3.24.1.tar.xz

     * Download MD5 sum: 9524ed4e5c821d13eeda49ba2a78f024

     * Download size: 12 MB

     * Estimated disk space required: 406 MB (with tests)

     * Estimated build time: 2.0 SBU (Using parallelism=4; with tests)

    Gtkmm Dependencies

      Required

   Atkmm-2.28.0, GTK+-3.24.10, and Pangomm-2.42.0

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gtkmm3

  Installation of Gtkmm

   First, fix the documentation directory name:

 sed -e '/^libdocdir =/ s/$(book_name)/gtkmm-3.24.1/' \
     -i docs/Makefile.in

   Install Gtkmm by running the following commands:

 ./configure --prefix=/usr &&
 make

   To test the results, issue: make check. Note that you must be in a
   graphical environment, as the tests try to open some windows.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: libgdkmm-3.0.so and libgtkmm-3.0.so
   Installed Directories: /usr/include/gdkmm-3.0, /usr/include/gtkmm-3.0,
   /usr/lib/gdkmm-3.0, /usr/lib/gtkmm-3.0, and
   /usr/share/{devhelp/books/gtkmm-3.0,doc/gtkmm-3.24.1}

    Short Descriptions

   libgdkmm-3.0.so contains the GDK API classes.    
   libgtkmm-3.0.so contains the GTK+ 3 API classes. 

   Last updated on 2019-08-17 15:49:15 -0700

gtk-vnc-1.0.0

  Introduction to Gtk VNC

   The Gtk VNC package contains a VNC viewer widget for GTK+. It is built
   using coroutines allowing it to be completely asynchronous while remaining
   single threaded.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gtk-vnc/1.0/gtk-vnc-1.0.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gtk-vnc/1.0/gtk-vnc-1.0.0.tar.xz

     * Download MD5 sum: ff2e531525f6200be613643b9ee87fbf

     * Download size: 212 KB

     * Estimated disk space required: 8.6 MB

     * Estimated build time: 0.2 SBU

    Gtk VNC Dependencies

      Required

   GnuTLS-3.6.9, GTK+-3.24.10 and libgcrypt-1.8.5

      Recommended

   gobject-introspection-1.60.2, Python-2.7.16, and Vala-0.44.7

      Optional

   Cyrus SASL-2.1.27 and PulseAudio-12.2

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gtk-vnc

  Installation of Gtk VNC

   Install Gtk VNC by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=/usr .. &&
 ninja

   This package does not come with a testsuite.

   Now, as the root user:

 ninja install

  Command Explanations

   -Dwith-vala=false: This switch disables building of the Vala bindings. Add
   this if you decide to build gtk-vnc without vala installed.

  Contents

   Installed Program: gvnccapture
   Installed Libraries: libgtk-vnc-2.0.so, libgvnc-1.0.so and
   libgvncpulse-1.0.so
   Installed Directories: /usr/include/gtk-vnc-2.0, /usr/include/gvnc-1.0 and
   /usr/include/gvncpulse-1.0

    Short Descriptions

   gvnccapture         is used to capture image from VNC server.  
   libgtk-vnc-2.0.so   contains the GTK+ 3 bindings for Gtk VNC.  
   libgvnc-1.0.so      contains the GObject bindings for Gtk VNC. 
   libgvncpulse-1.0.so is the PulseAudio bridge for Gtk VNC.      

   Last updated on 2019-08-22 17:29:06 -0700

gtksourceview-3.24.11

  Introduction to GtkSourceView

   The GtkSourceView package contains libraries used for extending the GTK+
   text functions to include syntax highlighting.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gtksourceview/3.24/gtksourceview-3.24.11.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gtksourceview/3.24/gtksourceview-3.24.11.tar.xz

     * Download MD5 sum: b748da426a7d64e1304f0c532b0f2a67

     * Download size: 1.4 MB

     * Estimated disk space required: 80 MB (with tests)

     * Estimated build time: 0.2 SBU (using parallelism=4; with tests)

    GtkSourceView Dependencies

      Required

   GTK+-3.24.10

      Recommended

   gobject-introspection-1.60.2

      Optional

   Vala-0.44.7, Valgrind-3.15.0, GTK-Doc-1.32, itstool-2.0.6, fop-2.3 (or
   dblatex), and Glade

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gtksourceview

  Installation of GtkSourceView

   Install GtkSourceView by running the following commands:

 ./configure --prefix=/usr &&
 make

   To test the results, issue make check. The tests need to be run in a
   graphical environment.

   Now, as the root user:

 make install

  Command Explanations

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Contents

   Installed Programs: None
   Installed Library: libgtksourceview-3.0.so
   Installed Directories:
   /usr/{include,share,share/gtk-doc/html}/gtksourceview-3.0

    Short Descriptions

   libgtksourceview-3.0.so contains function extensions for the GtkTextView   
                           widget.                                            

   Last updated on 2019-08-22 17:29:06 -0700

gtksourceview4-4.2.0

  Introduction to GtkSourceView

   The GtkSourceView package contains libraries used for extending the GTK+
   text functions to include syntax highlighting.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gtksourceview/4.2/gtksourceview-4.2.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gtksourceview/4.2/gtksourceview-4.2.0.tar.xz

     * Download MD5 sum: c9e6913c2fd30ca2fcdd71482faf8b99

     * Download size: 1.3 MB

     * Estimated disk space required: 88 MB (with tests)

     * Estimated build time: 0.5 SBU (with tests)

    GtkSourceView Dependencies

      Required

   GTK+-3.24.10

      Recommended

   gobject-introspection-1.60.2

      Optional

   Vala-0.44.7, Valgrind-3.15.0, GTK-Doc-1.32, itstool-2.0.6, fop-2.3 (or
   dblatex), and Glade

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gtksourceview4

  Installation of GtkSourceView

   Install GtkSourceView by running the following commands:

 ./configure --prefix=/usr &&
 make

   To test the results, issue make check. The tests need to be run in a
   graphical environment.

   Now, as the root user:

 make install

  Command Explanations

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Contents

   Installed Programs: None
   Installed Library: libgtksourceview-4.so
   Installed Directories:
   /usr/{include,share,share/gtk-doc/html}/gtksourceview-4

    Short Descriptions

   libgtksourceview-4.so contains function extensions for the GtkTextView     
                         widget.                                              

   Last updated on 2019-08-22 17:29:06 -0700

imlib2-1.5.1

  Introduction to imlib2

   imlib2 is a graphics library for fast file loading, saving, rendering and
   manipulation.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://downloads.sourceforge.net/enlightenment/imlib2-1.5.1.tar.bz2

     * Download MD5 sum: 390aa207693e051bb692f2db650c694b

     * Download size: 900 KB

     * Estimated disk space required: 11 MB

     * Estimated build time: 0.2 SBU

    imlib2 Dependencies

      Required

   Xorg Libraries

      Optional

   libpng-1.6.37, libjpeg-turbo-2.0.2, LibTIFF-4.0.10, giflib-5.2.1, and
   libid3tag

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/imlib2

  Installation of imlib2

   Install imlib2 by running the following commands:

 ./configure --prefix=/usr --disable-static &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install &&
 install -v -m755 -d /usr/share/doc/imlib2-1.5.1 &&
 install -v -m644    doc/{*.gif,index.html} \
                     /usr/share/doc/imlib2-1.5.1

  Command Explanations

   --disable-static: This switch prevents installation of static versions of
   the libraries.

  Contents

   Installed Programs: imlib2_bumpmap, imlib2_colorspace, imlib2-config,
   imlib2_conv, imlib2_grab, imlib2_poly, imlib2_show, imlib2_test, and
   imlib2_view
   Installed Libraries: libImlib2.so and various filters and image loader
   modules.
   Installed Directories: /usr/lib/imlib2, /usr/share/doc/imlib2-1.5.1, and
   /usr/share/imlib2

    Short Descriptions

   imlib2_bumpmap    is to test the imlib2 bumpmap function.                  
   imlib2_colorspace is to test the imlib2 colorspace function.               
   imlib2-config     is a script used to obtain imlib2 building informations. 
   imlib2_poly       is to test the imlib2 poly function.                     
   imlib2_conv       converts images between formats.                         
   imlib2_grab       take screenshots.                                        
   imlib2_show       is an imlib2 program test.                               
   imlib2_test       is an imlib2 program test.                               
   imlib2_view       diplays images files.                                    
   libImlib2.so      provides the functions for programs to deal with various 
                     image data formats.                                      

   Last updated on 2019-08-17 18:15:25 -0700

keybinder-0.3.1

  Introduction to keybinder

   The keybinder package contains a utility library registering global X
   keyboard shortcuts.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://github.com/kupferlauncher/keybinder/releases/download/v0.3.1/keybinder-0.3.1.tar.gz

     * Download MD5 sum: a6d7caae0dcb040b08692b008a68a507

     * Download size: 384 KB

     * Estimated disk space required: 2.8 MB

     * Estimated build time: less than 0.1 SBU

    keybinder Dependencies

      Required

   GTK+-2.24.32

      Recommended

   gobject-introspection-1.60.2 and PyGTK-2.24.0

      Optional

   GTK-Doc-1.32 and Lua-5.3.5 (currently broken, because older lua version is
   required)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/keybinder

  Installation of keybinder

   Install keybinder by running the following commands:

 ./configure --prefix=/usr --disable-lua &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   --disable-lua: Use this switch to disable Lua-5.3.5 bindings (currently
   broken, because older lua version is required).

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Contents

   Installed Programs: None
   Installed Library: libkeybinder.so and
   /usr/lib/python2.7/site-packages/keybinder/_keybinder.so
   Installed Directories: /usr/lib/python2.7/site-packages/keybinder and
   /usr/share/gtk-doc/html/keybinder

    Short Descriptions

   libkeybinder.so is the library that registers global X keyboard shortcuts. 

   Last updated on 2019-08-17 18:15:25 -0700

libdazzle-3.32.3

  Introduction to libdazzle

   libdazzle is a companion library to GObject and GTK+ that adds APIs for
   special graphical effects.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/libdazzle/3.32/libdazzle-3.32.3.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/libdazzle/3.32/libdazzle-3.32.3.tar.xz

     * Download MD5 sum: b6da085649dcda2795e6980a84667950

     * Download size: 432 KB

     * Estimated disk space required: 34 MB (with tests)

     * Estimated build time: 0.2 SBU (uning parallelism=4; with tests)

    libdazzle Dependencies

      Required

   GTK+-3.24.10

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libdazzle

  Installation of libdazzle

   Install libdazzle by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=/usr .. &&
 ninja

   To test the results, issue: ninja test.

   Now, as the root user:

 ninja install

  Contents

   Installed Program: dazzle-list-counters
   Installed Library: libdazzle-1.0.so
   Installed Directory: /usr/include/libdazzle-1.0

    Short Descriptions

   dazzle-list-counters lists counters that are in use by a process. 
   libdazzle-1.0.so     contains API functions for graphical effects 

   Last updated on 2019-08-22 17:29:06 -0700

libdrm-2.4.99

  Introduction to libdrm

   libdrm provides a user space library for accessing the DRM, direct
   rendering manager, on operating systems that support the ioctl interface.
   libdrm is a low-level library, typically used by graphics drivers such as
   the Mesa DRI drivers, the X drivers, libva and similar projects.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://dri.freedesktop.org/libdrm/libdrm-2.4.99.tar.bz2

     * Download MD5 sum: 72539626815b35159a63d45bc4c14ee6

     * Download size: 836 KB

     * Estimated disk space required: 12 MB (with tests)

     * Estimated build time: less than 0.1 SBU (add 0.8 SBU for tests)

    libdrm Dependencies

      Recommended

   Xorg Libraries (for Intel KMS API support required by Mesa)

      Optional

   Cairo-1.16.0 (for tests), CMake-3.15.2 (could be used to find dependencies
   without pkgconfig files), docbook-xml-4.5, docbook-xsl-1.79.2 and
   libxslt-1.1.33 (to build manual pages), libatomic_ops-7.6.10 (required by
   architectures without native atomic operations), Valgrind-3.15.0, and
   CUNIT (for AMDGPU tests)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libdrm

  Installation of libdrm

   Install libdrm by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=$XORG_PREFIX -Dudev=true &&
 ninja

   To check the results, issue ninja test. One test, 'threaded' in the
   nouveau subdirectory, is known to fail with a 30 second timeout.

   Now, as the root user:

 ninja install

  Command Explanations

   -Dudev=true: This parameter enables support for using Udev instead of
   mknod.

  Contents

   Installed Programs: None
   Installed Libraries: libdrm_amdgpu.so, libdrm_intel.so, libdrm_nouveau.so,
   libdrm_radeon.so, libdrm.so, and libkms.so
   Installed Directories: /usr/include/libdrm, /usr/include/libkms, and
   /usr/share/libdrm

    Short Descriptions

   libdrm_amdgpu.so  contains the AMDGPU specific Direct Rendering Manager    
                     functions.                                               
   libdrm_intel.so   contains the Intel specific Direct Rendering Manager     
                     functions.                                               
   libdrm_nouveau.so contains the open source nVidia (Nouveau) specific       
                     Direct Rendering Manager functions.                      
   libdrm_radeon.so  contains the AMD Radeon specific Direct Rendering        
                     Manager functions.                                       
   libdrm.so         contains the Direct Rendering Manager API functions.     
   libkms.so         contains API functions for kernel mode setting           
                     abstraction.                                             

   Last updated on 2019-08-16 15:28:01 -0700

libepoxy-1.5.3

  Introduction to libepoxy

   libepoxy is a library for handling OpenGL function pointer management.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://github.com/anholt/libepoxy/releases/download/1.5.3/libepoxy-1.5.3.tar.xz

     * Download MD5 sum: e2845de8d2782b2d31c01ae8d7cd4cbb

     * Download size: 216 KB

     * Estimated disk space required: 34 MB (with tests)

     * Estimated build time: 0.1 SBU (with tests)

    libepoxy Dependencies

      Required

   Mesa-19.1.4

      Optional

   Doxygen-1.8.16 (for documentation, also requires -Ddocs=true to be set)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libepoxy

  Installation of libepoxy

   Install libepoxy by running the following commands:

 mkdir build &&
 cd build &&

 meson --prefix=/usr .. &&
 ninja

   To test the results, issue: ninja test.

   Now, as the root user:

 ninja install

  Contents

   Installed Programs: None
   Installed Libraries: libepoxy.so
   Installed Directories: /usr/include/epoxy

    Short Descriptions

   libepoxy.so contains API functions for handling OpenGL function pointer    
               management.                                                    

   Last updated on 2019-08-16 15:28:01 -0700

libglade-2.6.4

  Introduction to libglade

   The libglade package contains libglade libraries. These are useful for
   loading Glade interface files in a program at runtime.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/libglade/2.6/libglade-2.6.4.tar.bz2

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/libglade/2.6/libglade-2.6.4.tar.bz2

     * Download MD5 sum: d1776b40f4e166b5e9c107f1c8fe4139

     * Download size: 348 KB

     * Estimated disk space required: 5 MB

     * Estimated build time: 0.1 SBU

    libglade Dependencies

      Required

   libxml2-2.9.9 and GTK+-2.24.32

      Optional

   Python-2.7.16 and GTK-Doc-1.32

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libglade

  Installation of libglade

   Install libglade by running the following commands:

 sed -i '/DG_DISABLE_DEPRECATED/d' glade/Makefile.in &&
 ./configure --prefix=/usr --disable-static &&
 make

   To test the results, issue: make check. One of the tests, test-convert, is
   known to fail.

   Now, as the root user:

 make install

  Command Explanations

   sed -i '/DG_DISABLE_DEPRECATED/d': Some of the glib functions that
   libglade uses were declared deprecated in glib-2.30. This sed removes the
   G_DISABLE_DEPRECATED CFLAG.

   --disable-static: This switch prevents installation of static versions of
   the libraries.

   --enable-gtk-doc: Use this parameter if GTK-Doc is installed and you wish
   to rebuild and install the API documentation.

  Contents

   Installed Program: libglade-convert (requires python)
   Installed Library: libglade-2.0.so
   Installed Directories:
   /usr/{include/libglade-2.0/glade,share/{gtk-doc/html/libglade,
   xml/libglade}}

    Short Descriptions

   libglade-convert is used to convert old Glade interface files to Glade-2.0 
                    standards.                                                
   libglade-2.0.so  contains the functions necessary to load Glade interface  
                    files.                                                    

   Last updated on 2019-08-17 18:15:25 -0700

libnotify-0.7.8

  Introduction to libnotify

   The libnotify library is used to send desktop notifications to a
   notification daemon, as defined in the Desktop Notifications spec. These
   notifications can be used to inform the user about an event or display
   some form of information without getting in the user's way.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/libnotify/0.7/libnotify-0.7.8.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/libnotify/0.7/libnotify-0.7.8.tar.xz

     * Download MD5 sum: babb4b07b5f21bef42a386d3d7019599

     * Download size: 108 KB

     * Estimated disk space required: 3.2 MB

     * Estimated build time: 0.1 SBU

    libnotify Dependencies

      Required

   GTK+-3.24.10

      Optional (Required if building GNOME)

   gobject-introspection-1.60.2

      Optional

   GTK-Doc-1.32

      Required (runtime)

   notification-daemon-3.20.0 or xfce4-notifyd-0.4.4

  Note

   GNOME Shell and KDE KWin provide their own notification daemons.

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libnotify

  Installation of libnotify

   Install libnotify by running the following commands:

 mkdir build &&
 cd build &&

 meson --prefix=/usr -Dgtk_doc=false .. &&
 ninja

   This package does not come with a test suite.

   Now, as the root user:

 ninja install

  Command Explanations

   -Dgtk_doc=false: Remove this parameter if GTK-Doc is installed and you
   wish to rebuild and install the API documentation.

  Contents

   Installed Program: notify-send
   Installed Library: libnotify.so
   Installed Directories: /usr/include/libnotify and
   /usr/share/gtk-doc/html/libnotify

    Short Descriptions

   notify-send  is a command used to send notifications. 
   libnotify.so contains the libnotify API functions.    

   Last updated on 2019-08-17 15:49:15 -0700

libxklavier-5.4

  Introduction to libxklavier

   The libxklavier package contains a utility library for X keyboard.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://people.freedesktop.org/~svu/libxklavier-5.4.tar.bz2

     * Download MD5 sum: 13af74dcb6011ecedf1e3ed122bd31fa

     * Download size: 384 KB

     * Estimated disk space required: 5.2 MB

     * Estimated build time: less than 0.1 SBU

    libxklavier Dependencies

      Required

   GLib-2.60.6, ISO Codes-4.3, libxml2-2.9.9 and Xorg Libraries

      Recommended

   gobject-introspection-1.60.2

      Optional

   GTK-Doc-1.32 and Vala-0.44.7

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/libxklavier

  Installation of libxklavier

   Install libxklavier by running the following commands:

 ./configure --prefix=/usr --disable-static &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   --disable-static: This switch prevents installation of static versions of
   the libraries.

   --enable-gtk-doc: This parameter is normally used if GTK-Doc is installed
   and you wish to rebuild and install the API documentation. It is broken
   for this package due to the use of a long deprecated gtk-doc program that
   is no longer available.

  Contents

   Installed Programs: None
   Installed Library: libxklavier.so
   Installed Directories: /usr/include/libxklavier and
   /usr/share/gtk-doc/html/libxklavier

    Short Descriptions

   libxklavier.so contains XKB utility functions. 

   Last updated on 2019-08-17 15:49:15 -0700

Pango-1.42.4

  Introduction to Pango

   Pango is a library for laying out and rendering of text, with an emphasis
   on internationalization. It can be used anywhere that text layout is
   needed, though most of the work on Pango so far has been done in the
   context of the GTK+ widget toolkit.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/pango/1.42/pango-1.42.4.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/pango/1.42/pango-1.42.4.tar.xz

     * Download MD5 sum: deb171a31a3ad76342d5195a1b5bbc7c

     * Download size: 816 KB

     * Estimated disk space required: 18 MB (with tests)

     * Estimated build time: 0.1 SBU (with tests)

    Pango Dependencies

      Required

   Fontconfig-2.13.1 (must be built with FreeType-2.10.1 using
   HarfBuzz-2.6.0), FriBidi-1.0.5, and GLib-2.60.6

      Recommended

   Cairo-1.16.0, gobject-introspection-1.60.2 (Required if building GNOME),
   and Xorg Libraries

      Optional

   Cantarell fonts (for tests), GTK-Doc-1.32, help2man, and libthai

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/pango

  Installation of Pango

   Install Pango by running the following commands:

 mkdir build &&
 cd    build &&

 meson --prefix=/usr --sysconfdir=/etc .. &&
 ninja

   To test the results, issue: ninja test. Two tests, test-layout and
   test-itemize, are known to fail.

   Now, as the root user:

 ninja install

  Command Explanations

   -Denable-docs: Use this switch if gtk-doc is installed and you wish to
   rebuild and install the API documentation.

   -Dgir=false: Use this switch if you do not want to use
   gobject-introspection-1.60.2.

  Configuring Pango

    Config Files

   /etc/pango/pangorc, ~/.pangorc and the file specified in the environment
   variable PANGO_RC_FILE

  Contents

   Installed Programs: pango-list and pango-view
   Installed Libraries: libpango-1.0.so, libpangocairo-1.0.so,
   libpangoft2-1.0.so, and libpangoxft-1.0.so
   Installed Directories: /usr/include/pango-1.0,
   /usr/share/installed-tests/pango, and /usr/share/gtk-doc/html/pango

    Short Descriptions

   pango-list      displays a list of fonts that Pango can use that are       
                   currently installed on the system.                         
   pango-view      renders a given text file through Pango for viewing        
                   purposes.                                                  
   libpango-1.0.so contains low level layout rendering routines, a high level 
                   driver for laying out entire blocks of text, and routines  
                   to assist in editing internationalized text.               

   Last updated on 2019-08-16 20:24:05 -0700

Pangomm-2.42.0

  Introduction to Pangomm

   The Pangomm package provides a C++ interface to Pango.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/pangomm/2.42/pangomm-2.42.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/pangomm/2.42/pangomm-2.42.0.tar.xz

     * Download MD5 sum: 6cffedf2225c4e72645a7d757fb5b832

     * Download size: 836 KB

     * Estimated disk space required: 16 MB

     * Estimated build time: 0.3 SBU

    Pangomm Dependencies

      Required

   Cairomm-1.12.2, GLibmm-2.60.0 and Pango-1.42.4

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/pangomm

  Installation of Pangomm

   First, fix the documentation directory name:

 sed -e '/^libdocdir =/ s/$(book_name)/pangomm-2.42.0/' \
     -i docs/Makefile.in

   Install Pangomm by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: libpangomm-1.4.so
   Installed Directories: /usr/include/pangomm-1.4, /usr/lib/pangomm-1.4, and
   /usr/share/{devhelp/books/pangomm-1.4,doc/pangomm-2.42.0}

    Short Descriptions

   libpangomm-1.4.so contains the Pango API classes. 

   Last updated on 2019-08-17 15:49:15 -0700

Qt-5.13.0

  Introduction to Qt5

   Qt5 is a cross-platform application framework that is widely used for
   developing application software with a graphical user interface (GUI) (in
   which cases Qt5 is classified as a widget toolkit), and also used for
   developing non-GUI programs such as command-line tools and consoles for
   servers. One of the major users of Qt is KDE Frameworks 5 (KF5).

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://download.qt.io/archive/qt/5.13/5.13.0/single/qt-everywhere-src-5.13.0.tar.xz

     * Download MD5 sum: 3c168d9a3a08248ff36f4f54c82e437f

     * Download size: 481 MB

     * Estimated disk space required: 12.5 GB (245 MB installed)

     * Estimated build time: 46 SBU (using parallelism=4)

    Additional Downloads

     * Required Patch:
       http://www.linuxfromscratch.org/patches/blfs/9.0/qt-5.13.0-upstream_fixes-1.patch

    Qt5 Dependencies

      Required

   Xorg Libraries

      Recommended

   alsa-lib-1.1.9, make-ca-1.4, Cups-2.2.12, GLib-2.60.6,
   gst-plugins-base-1.16.0 (QtMultimedia backend), HarfBuzz-2.6.0, ICU-64.2,
   JasPer-2.0.14, libjpeg-turbo-2.0.2, libmng-2.0.3, libpng-1.6.37,
   LibTIFF-4.0.10, libwebp-1.0.3, libxkbcommon-0.8.4, Mesa-19.1.4,
   mtdev-1.1.5, pcre2-10.33, SQLite-3.29.0, Wayland-1.17.0 (Mesa must be
   built with Wayland EGL backend), xcb-util-image-0.4.0,
   xcb-util-keysyms-0.4.0, xcb-util-renderutil-0.3.9, and xcb-util-wm-0.4.1

      Optional

   BlueZ-5.50 (for sdpscanner, and at runtime for QtConnectivity module),
   ibus-1.5.20, libinput-1.14.0, MariaDB-10.4.7 or MySQL, pciutils-3.6.2
   (required for QtWebEngine), PostgreSQL-11.5, Python-2.7.16 (required for
   QtWebEngine), PulseAudio-12.2, SDL2-2.0.10, unixODBC-2.3.7, Firebird, and
   libproxy

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/qt5

  Setting the installation prefix

    Installing in /opt/qt5

   The BLFS editors recommend installing Qt5 in a directory other than /usr,
   ie /opt/qt5. To do this, set the following environment variable:

 export QT5PREFIX=/opt/qt5

  Tip

   Sometimes, the installation paths are hardcoded into installed files. This
   is the reason why /opt/qt5 is used as installation prefix instead of
   /opt/qt-5.13.0. To create a versioned Qt5 directory, you may rename the
   directory and create a symlink:

 mkdir /opt/qt-5.13.0
 ln -sfnv qt-5.13.0 /opt/qt5

   Later on, you may want to install other versions of Qt5. To do that, just
   remove the symlink and use /opt/qt5 as the prefix again. Which version of
   Qt5 you use depends only on where the symlink points.

  Note

   If qca-2.2.1 has been installed and you are reinstalling or updating this
   package, then qca will need to be reinstalled.

  Installation of Qt5

  Warning

   If Qt5 is being reinstalled into the same directory as an existing
   instance, run the commands done by root, such as make install, from a
   console or non-Qt5 based window manager. It overwrites Qt5 libraries that
   should not be in use during the install process.

  Caution

   If you did not install some of the recommended dependencies, examine
   ./configure --help output to check how to disable them or use internal
   versions bundled in the source tarball.

  Note

   The build time and space required for the full Qt5 is quite long. The
   instructions below do not build the tutorials and examples. Removing the
   -nomake line will create a complete build.

  Note

   The BLFS editors do not recommend installing Qt5 into the /usr hierarchy
   because it becomes difficult to find components and to update to a new
   version. If you do want to install Qt5 in /usr, the directories need to be
   specified explicitly. In this case, set QT5PREFIX=/usr and add the
   following to the configure arguments below:

             -archdatadir    /usr/lib/qt5                \
             -bindir         /usr/bin                    \
             -plugindir      /usr/lib/qt5/plugins        \
             -importdir      /usr/lib/qt5/imports        \
             -headerdir      /usr/include/qt5            \
             -datadir        /usr/share/qt5              \
             -docdir         /usr/share/doc/qt5          \
             -translationdir /usr/share/qt5/translations \
             -examplesdir    /usr/share/doc/qt5/examples

   First fix some issues found upstream:

 patch -Np1 -i ../qt-5.13.0-upstream_fixes-1.patch &&

   Install Qt5 by running the following commands:

 sed -i 's/python /python3 /' qtdeclarative/qtdeclarative.pro \
                              qtdeclarative/src/3rdparty/masm/masm.pri &&

 ./configure -prefix $QT5PREFIX                        \
             -sysconfdir /etc/xdg                      \
             -confirm-license                          \
             -opensource                               \
             -dbus-linked                              \
             -openssl-linked                           \
             -system-harfbuzz                          \
             -system-sqlite                            \
             -nomake examples                          \
             -no-rpath                                 \
             -skip qtwebengine                         &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

   Remove references to the build directory from installed library dependency
   (prl) files by running the following command as the root user:

 find $QT5PREFIX/ -name \*.prl \
    -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' {} \;

   Install images and create the menu entries for installed applications. The
   QT5BINDIR variable is used here to point to the directory for the
   executable programs. If you have changed the bindir above, QT5BINDIR will
   need to be adjusted below. Be sure that the QT5BINDIR variable is defined
   in root's environment and as the root user:

 QT5BINDIR=$QT5PREFIX/bin

 install -v -dm755 /usr/share/pixmaps/                  &&

 install -v -Dm644 qttools/src/assistant/assistant/images/assistant-128.png \
                   /usr/share/pixmaps/assistant-qt5.png &&

 install -v -Dm644 qttools/src/designer/src/designer/images/designer.png \
                   /usr/share/pixmaps/designer-qt5.png  &&

 install -v -Dm644 qttools/src/linguist/linguist/images/icons/linguist-128-32.png \
                   /usr/share/pixmaps/linguist-qt5.png  &&

 install -v -Dm644 qttools/src/qdbus/qdbusviewer/images/qdbusviewer-128.png \
                   /usr/share/pixmaps/qdbusviewer-qt5.png &&

 install -dm755 /usr/share/applications &&

 cat > /usr/share/applications/assistant-qt5.desktop << EOF
 [Desktop Entry]
 Name=Qt5 Assistant
 Comment=Shows Qt5 documentation and examples
 Exec=$QT5BINDIR/assistant
 Icon=assistant-qt5.png
 Terminal=false
 Encoding=UTF-8
 Type=Application
 Categories=Qt;Development;Documentation;
 EOF

 cat > /usr/share/applications/designer-qt5.desktop << EOF
 [Desktop Entry]
 Name=Qt5 Designer
 GenericName=Interface Designer
 Comment=Design GUIs for Qt5 applications
 Exec=$QT5BINDIR/designer
 Icon=designer-qt5.png
 MimeType=application/x-designer;
 Terminal=false
 Encoding=UTF-8
 Type=Application
 Categories=Qt;Development;
 EOF

 cat > /usr/share/applications/linguist-qt5.desktop << EOF
 [Desktop Entry]
 Name=Qt5 Linguist
 Comment=Add translations to Qt5 applications
 Exec=$QT5BINDIR/linguist
 Icon=linguist-qt5.png
 MimeType=text/vnd.trolltech.linguist;application/x-linguist;
 Terminal=false
 Encoding=UTF-8
 Type=Application
 Categories=Qt;Development;
 EOF

 cat > /usr/share/applications/qdbusviewer-qt5.desktop << EOF
 [Desktop Entry]
 Name=Qt5 QDbusViewer
 GenericName=D-Bus Debugger
 Comment=Debug D-Bus applications
 Exec=$QT5BINDIR/qdbusviewer
 Icon=qdbusviewer-qt5.png
 Terminal=false
 Encoding=UTF-8
 Type=Application
 Categories=Qt;Development;Debugger;
 EOF

   Some packages such as VLC-3.0.8 look for certain executables with a -qt5
   suffix. Run the following command as the root user to create the necessary
   symlinks:

 for file in moc uic rcc qmake lconvert lrelease lupdate; do
   ln -sfrvn $QT5BINDIR/$file /usr/bin/$file-qt5
 done

  Command Explanations

   sed ...: Allows using Python 3 instead of Python 2. This command destroys
   the build for QtWebEngine, so do not use it if you remove the -skip
   qtwebengine switch.

   -confirm-license: Accept license without prompting user during
   configuration.

   -opensource: Install the opensource version of Qt.

   -nomake examples: This switch disables building of the example programs
   included in the source tarball. Remove it if you want to build them.

   -system-sqlite: This switch enables use of the system version of SQLite.

   -dbus-linked -openssl-linked: These switches enable explicit linking of
   the D-Bus and OpenSSL libraries into Qt5 libraries instead of dlopen()-ing
   them.

   -skip qtwebengine: This switch disables building the QtWebEngine. The BLFS
   editors have chosen to build qtwebengine-5.13.0 separately.

   -system-harfbuzz: This switch enables use of the system version of
   Harfbuzz.

  Configuring Qt5

    Configuration Information

   If you installed Qt5 in /usr, create an environment variable needed by
   certain packages. As the root user:

 cat > /etc/profile.d/qt5.sh << "EOF"
 # Begin /etc/profile.d/qt5.sh

 QT5DIR=/usr
 export QT5DIR
 pathappend $QT5DIR/bin

 # End /etc/profile.d/qt5.sh
 EOF

   If Sudo-1.8.27 is installed, QT5DIR should be available to the super user
   as well. Execute the following commands as the root user:

 cat > /etc/sudoers.d/qt << "EOF"
 Defaults env_keep += QT5DIR
 EOF

   If you installed Qt5 in a location other than /usr, you need to update the
   following configuration files so that Qt5 is correctly found by other
   packages and system processes.

   As the root user, update the /etc/ld.so.conf file and the dynamic linker's
   run-time cache file:

 cat >> /etc/ld.so.conf << EOF
 # Begin Qt addition

 /opt/qt5/lib

 # End Qt addition
 EOF

 ldconfig

   As the root user, create the /etc/profile.d/qt5.sh file:

 cat > /etc/profile.d/qt5.sh << "EOF"
 # Begin /etc/profile.d/qt5.sh

 QT5DIR=/opt/qt5

 pathappend $QT5DIR/bin           PATH
 pathappend $QT5DIR/lib/pkgconfig PKG_CONFIG_PATH

 export QT5DIR

 # End /etc/profile.d/qt5.sh
 EOF

  Contents

   Installed Programs: assistant, canbusutil, designer, fixqt4headers.pl,
   lconvert, linguist, lrelease, lupdate, moc, pixeltool,
   qcollectiongenerator, qdbuscpp2xml, qdbus, qdbusviewer, qdbusxml2cpp,
   qdoc, qdistancefieldgenerator, qgltf, qhelpgenerator, qlalr, qmake,
   qmlcachegen, qmleasing, qmlimportscanner, qmllint, qmlmin, qmlplugindump,
   qmlpreview, qmlprofiler, qml, qmlscene, qmltestrunner, qscxmlc, qtdiag,
   qtpaths, qtattributionscanner, qtplugininfo, qtwaylandscanner, qvkgen,
   rcc, repc, sdpscanner, syncqt.pl, uic, xmlpatterns, and
   xmlpatternsvalidator
   Installed Libraries: libQt5AccessibilitySupport.a, libQt53DAnimation.so,
   libQt53DCore.so, libQt53DExtras.so, libQt53DInput.so, libQt53DLogic.so,
   libQt53DQuick.so, libQt53DQuickAnimation.so, libQt53DQuickExtras.so,
   libQt53DQuickInput.so, libQt53DQuickRender.so, libQt53DQuickScene2D.so,
   libQt53DRender.so, libQt5Bluetooth.so, libQt5Bootstrap.a,
   libQt53DCharts.so, libQt5Concurrent.so, libQt5Core.so,
   libQt5DataVisualization.so, libQt5DBus.so, libQt5DesignerComponents.so,
   libQt5Designer.so, libQt5DeviceDiscoverySupport.a, libQt5EdidSupport.a,
   libQt5EglFSDeviceIntegration.so, libQt5EglFsKmsSupport.so,
   libQt5EglSupport.a, libQt5EventDispatcher.a, libQt5FbSupport.a,
   libQt5FontDatabaseSupport.a, libQt5Gamepad.so, libQt5Glx.a,
   libQt5Gui.so,libQt5Help.so, libQt5InputSupport.a, libQt5KmsSupport.a,
   libQt5LinuxAccessibilitySupport.a, libQt5Location.so, libQt5Multimedia.so,
   libQt5MultimediaQuick.so, libQt5MultimediaGstTools.so,
   libQt5MultimediaWidgets.so, libQt5Network.so, libQt5NetworkAuth.so,
   libQt5Nfc.so, libQt5OpenGLExtensions.a, libQt5OpenGL.so,
   libQt5PacketProtocol.a, libQt5PlatformCompositiorSupport.a,
   libQt5Positioning.so, libQt5PositioningQuick.so, libQt5PrintSupport.so,
   libQt5Purchasing.so, libQt5QmlDebug.a, libQt5QmlDevTools.a, libQt5Qml.so,
   libQt5QuickControls2.so, libQt5QuickParticles.so, libQt5Quick.so,
   libQt5QuickShapes.so, libQt5QuickTemplates2.so, libQt5QuickTest.so,
   libQt5QuickWidgets.so, libQt5RemoteObjects.so, libQt5Script.so,
   libQt5ScriptTools.so, libQt5Scxml.so, libQt5Sensors.so,
   libQt5SerialBus.so, libQt5SerialPort.so, libQt5ServiceSupport.a,
   libQt5Sql.so, libQt5Svg.so, libQt5Test.so, libQt5TextToSpeech.so,
   libQt5ThemeSupport.a, libQt5UiTools.a, libQt5VirtualKeyboard.so,
   libQt5WaylandClient.so, libQt5WaylandCompositor.so, libQt5WebChannel.so,
   libQt5WebSockets.so, libQt5WebView.so, libQt5Widgets.so,
   libQt5X11Extras.so, libQt5XmlPatterns.so, libQt5Xml.so, and several
   plugins under /opt/qt5/{plugins,qml}
   Installed Directories: /usr/include/qt5, /usr/lib/qt5, /usr/share/doc/qt5,
   and /usr/share/qt5 OR /opt/qt5 and /opt/qt-5.13.0

    Short Descriptions

   assistant               is a tool for presenting on-line documentation.    
   canbustil               is a tool to deal with arbitrary CAN bus frames. A 
                           Controller Area Network (CAN) is a vehicle bus     
                           standard designed to allow microcontrollers and    
                           devices to communicate with each other in          
                           applications without a host computer.              
   designer                is a full-fledged GUI builder. It includes         
                           powerful features such as preview mode, automatic  
                           widget layout, support for custom widgets, and an  
                           advanced property editor.                          
   fixqt4headers.pl        is a script to replace all Qt 4 style includes     
                           with Qt 5 includes.                                
   lconvert                is part of Qt5's Linguist tool chain. It can be    
                           used as a standalone tool to convert and filter    
                           translation data files.                            
   linguist                provides support for translating applications into 
                           local languages.                                   
   lrelease                is a simple command line tool. It reads a Qt       
                           project file and produces message files used by    
                           the application.                                   
   lupdate                 reads a Qt project file, finds the translatable    
                           strings in the specified source, header and Qt     
                           Designer interface files, and produces or updates  
                           the translation files listed in the project file.  
   moc                     generates Qt meta object support code.             
   pixeltool               is a desktop magnifier and as you move your mouse  
                           around the screen it will show the magnified       
                           contents in its window.                            
   qcollectiongenerator    processes and converts Qt help files.              
   qdbuscpp2xml            takes a C++ source file and generates a D-Bus XML  
                           definition of the interface.                       
   qdbus                   lists available services, object paths, methods,   
                           signals, and properties of objects on a bus.       
   qdbusviewer             is a graphical D-Bus browser.                      
   qdbusxml2cpp            is a tool that can be used to parse interface      
                           descriptions and produce static code representing  
                           those interfaces,                                  
   qdoc                    is a tool used by Qt Developers to generate        
                           documentation for software projects.               
   qdistancefieldgenerator allows a font cache to be pregenerated for         
                           Text.QtRendering to speed up an application's      
                           startup if the user interface has a lot of text,   
                           or multiple fonts, or a large amount of distinct   
                           characters, e.g. in CJK writing systems.           
   qgltf                   imports a a variety of 3D model formats and        
                           exports into fast-to-load, optimized glTF assets   
                           embedded into Qt resource files.                   
   qhelpgenerator          is a tool used to generate a Qt compressed help    
                           file.                                              
   qlalr                   is a tool used to generate code from grammar       
                           specifications.                                    
   qmake                   uses information stored in project files to        
                           determine what should go in the makefiles it       
                           generates.                                         
   qmlcachegen             supports the creation of cache files at build      
                           time.                                              
   qmleasing               is a tool used to define the easing curves using   
                           an interactive curve editor.                       
   qmlimportscanner        is a tool used to import QML files from a          
                           directory.                                         
   qmllint                 is a syntax checker for QML files.                 
   qmlmin                  removes comments and layout characters from a QML  
                           file.                                              
   qmlplugindump           is a tool to create a qmltypes file.               
   qmlpreview              is a tool used to analyze QML applications.        
   qmlprofiler             is a tool which watches QML and JavaScript files   
                           on disk and updates the application live with any  
                           changes.                                           
   qmlscene                is a utility that loads and displays QML documents 
                           even before the application is complete.           
   qmltestrunner           is a tool used to make tests.                      
   qscxml                  converts an input.scxml file to a header and cpp   
                           file.                                              
   qtattributionsscanner   processes qt_attribution.json files in Qt sources. 
   qtdiag                  is a tool for reporting diagnostic information     
                           about Qt and its environment.                      
   qtpaths                 is a tool to query Qt path information.            
   qtplugininfo            dumps meta-data about Qt plugins in JSON format.   
   rcc                     is a resource compiler used in conjunction with    
                           designer.                                          
   repc                    is the Replica Compiler, which generates QObject   
                           header files based on an API definition file.      
   sdpscanner              performs a Session Description Protocol scan on a  
                           remote device, using the SDP server represented by 
                           the local Bluetooth device.                        
   syncqt.pl               is a script to create the forwarding headers in    
                           the include directories. It is an internal         
                           development tool.                                  
   uic                     is a Qt user interface compiler.                   
   xmlpatterns             provides support for XPath, XQuery, XSLT, and XML  
                           Schema validation.                                 
   xmlpatternsvalidator    is a tool used to validate XML documents.          

   Last updated on 2019-08-18 13:33:32 -0700

QtWebEngine-5.13.0

  Introduction to QtWebEngine

   QtWebEngine integrates chromium's web capabilities into Qt. It ships with
   its own copy of ninja which it uses for the build if it cannot find a
   system copy, and various copies of libraries from ffmpeg, icu, libvpx, and
   zlib (including libminizip) which have been forked by the chromium
   developers.

   This package is known to build and work properly using an LFS-9.0
   platform.

  Note

   By default, ninja will use all online CPUs +2 (if at least 4 exist), even
   if they are not available to the current task because the build terminal
   has been restricted with 'taskset'. To work around this, see the Command
   Explanations below.

   Unusually, the shipped GN build system (used to create the Ninja files)
   requires a static libstdc++.a although the installed libraries correctly
   use the shared version. If that static library is not present, the build
   will fail quite quickly. Please note that if you try to build webengine as
   part of Qt and the static library is not available, that build will either
   complete without installing webengine, or else fail during the install
   (both variants have been observed in 5.12.0).

    Package Information

     * Download (HTTP):
       https://download.qt.io/archive/qt/5.13/5.13.0/submodules/qtwebengine-everywhere-src-5.13.0.tar.xz

     * Download MD5 sum: 235ecc14211ba03ae7331c175c1b7c78

     * Download size: 245 MB

     * Estimated disk space required: 3.5 GB (135 MB installed)

     * Estimated build time: 62 SBU (using 4 cores)

    Additional Downloads

     * Required patch:
       http://www.linuxfromscratch.org/patches/blfs/9.0/qtwebengine-5.13.0-background_rendering_fix-1.patch

    qtwebengine Dependencies

      Required

   NSS-3.45, Python-2.7.16, and Qt-5.13.0

      Recommended

  Note

   If these packages are not installed, the build process will compile and
   install its own (perhaps older) version, with the side effect of
   increasing build and installed disk space and build time.

   either alsa-lib-1.1.9 or PulseAudio-12.2 (or both), FFmpeg-4.2, ICU-64.2,
   libwebp-1.0.3, libxslt-1.1.33, and Opus-1.3.1

      Optional

   libevent-2.1.11, Poppler-0.79.0, jsoncpp, libsrtp, snappy

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/qtwebengine

  Installation of qtwebengine

   First, ensure that the local headers are available when not building as
   part of the complete Qt-5.13.0:

 find -type f -name "*.pr[io]" |
   xargs sed -i -e 's|INCLUDEPATH += |&$$QTWEBENGINE_ROOT/include |'

   Next, apply a patch that fixes background rendering issues in Falkon, and
   crashes on multimedia-heavy sites.

 patch -Np1 -i ../qtwebengine-5.13.0-background_rendering_fix-1.patch

   If an older version of the package's main library has been installed, when
   the package is built separately it will link to that in preference to its
   own not-yet-installed version, and fail because of missing symbols.
   Prevent that by, as the root user, moving the symlink out of the way.:

 if [ -e ${QT5DIR}/lib/libQt5WebEngineCore.so ]; then
   mv -v ${QT5DIR}/lib/libQt5WebEngineCore.so{,.old}
 fi

   Install qtwebengine by running the following commands:

 mkdir build &&
 cd    build &&

 qmake .. -- -system-ffmpeg -webengine-icu &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

   Remove references to the build directory from installed library dependency
   (prl) files by running the following commands as the root user:

 find $QT5DIR/ -name \*.prl \
    -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' {} \;

  Command Explanations

   qmake: This will build the included copy of ninja if it is not already
   installed and use it to configure the build.

   -- -system-ffmpeg -webengine-icu: If any options are passed to qmake they
   must come after '--' which must follow '..' that points to the main
   directory. The options here cause it to use system ffmpeg and system icu.
   If built as part of full Qt5, the system icu is automatically used (only)
   by Qt5Core if it is available, but unless this option is used webengine
   will always use its shipped copy of icu, adding time and space to the
   build.

   NINJAJOBS=4 make: If you patched system ninja in LFS to recognize the
   NINJAJOBS environment variable, this command will run system ninja with
   the specified number of jobs (i.e. 4). There are several reasons why you
   might want to do this:

     * Building on a subset of CPUs allows measuring the build time for that
       number of processors or to run other CPU-intensive tasks on other
       cores.

     * Improving the build speed on a less-well endowed 4-core machine. On a
       machine with a powerful CPU and plenty of RAM, running N+2 jobs (the
       ninja default for 4+ cores) for the large working sets of the C++
       compiles in this package is typically only marginally faster than
       running N jobs at a time. But for a machine with less memory it can be
       much slower.

     * Reducing the number of cores being used on long running, CPU intensive
       packages may alleviate heat problems.

  Configuring QtWebEngine

    Configuration Information

   If you are upgrading from an older minor version of this application, for
   some webpages to load you may need to clear the browser caches, e.g. for
   falkon they will be found in ~/.cache/falkon/. You will need to do this if
   the browser starts to render the page and then changes to a blank tab with
   a message that something went wrong, and a button to Retry. Even after
   removing the old caches, you may need to retry a few times for each
   affected tab.

  Contents

   Installed Programs: qtwebengine_convert_dict and QtWebEngineProcess
   Installed Libraries: libQt5WebEngineCore.so, libQt5WebEngine.so, and
   libQt5WebEngineWidgets.so
   Installed Directories: $QT5PREFIX/includeQtWebEngine,
   $QT5PREFIX/include/QtWebEngineCore, and
   $QT5PREFIX/include/QtWebEngineWidgets

    Short Descriptions

   qtwebengine_convert_dict converts hunspell dictionaries (.dic) to chromium 
                            format (.bdic)                                    
   QtWebEngineProcess       is a libexec program which runs a zygote process  
                            (one that listens for spawn requests from a       
                            master process and will fork itself in response). 
   libQtWebEngine.so        provides QML types for rendering web content      
                            within a QML application.                         
   libQtWebEngineCore.so    provides public API shared by both QtWebEngine    
                            and QtWebEngineWidgets.                           
   libQtWebEngineWidgets.so provides a web browser engine as well as C++      
                            classes to render and interact with web content.  

   Last updated on 2019-08-21 15:14:27 -0700

startup-notification-0.12

  Introduction to startup-notification

   The startup-notification package contains startup-notification libraries.
   These are useful for building a consistent manner to notify the user
   through the cursor that the application is loading.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://www.freedesktop.org/software/startup-notification/releases/startup-notification-0.12.tar.gz

     * Download MD5 sum: 2cd77326d4dcaed9a5a23a1232fb38e9

     * Download size: 347 KB

     * Estimated disk space required: 4 MB

     * Estimated build time: less than 0.1 SBU

    startup-notification Dependencies

      Required

   Xorg Libraries and xcb-util-0.4.0

   User Notes:
   http://wiki.linuxfromscratch.org/blfs/wiki/startup-notification

  Installation of startup-notification

   Install startup-notification by running the following commands:

 ./configure --prefix=/usr --disable-static &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install &&
 install -v -m644 -D doc/startup-notification.txt \
     /usr/share/doc/startup-notification-0.12/startup-notification.txt

  Command Explanations

   --disable-static: This switch prevents installation of static versions of
   the libraries.

  Contents

   Installed Programs: None
   Installed Library: libstartup-notification-1.so
   Installed Directories: /usr/include/startup-notification-1.0 and
   /usr/share/doc/startup-notification-0.12

    Short Descriptions

   libstartup-notification-1.so provides the functions to assist applications 
                                in communicating with the cursor system to    
                                provide feedback to the user that the         
                                application is loading.                       

   Last updated on 2019-08-16 20:24:05 -0700

WebKitGTK+-2.24.4

  Introduction to WebKitGTK+

   The WebKitGTK+ package is a port of the portable web rendering engine
   WebKit to the GTK+ 3 and GTK+ 2 platforms.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://webkitgtk.org/releases/webkitgtk-2.24.4.tar.xz

     * Download MD5 sum: c214963d8c0e7d83460da04a0d8dda87

     * Download size: 17 MB

     * Estimated disk space required: 845 MB (158 MB installed)

     * Estimated build time: 22 SBU (using parallelism=4, 75 SBUs using one
       core)

    WebKitGTK+ Dependencies

      Required

   Cairo-1.16.0, CMake-3.15.2, gst-plugins-base-1.16.0,
   gst-plugins-bad-1.16.0, GTK+-2.24.32, GTK+-3.24.10, ICU-64.2,
   libgudev-233, libsecret-0.18.8, libsoup-2.66.2, libwebp-1.0.3,
   Mesa-19.1.4, OpenJPEG-2.3.1, Ruby-2.6.4, SQLite-3.29.0, and Which-2.21

      Recommended

   enchant-2.2.5, GeoClue-2.5.3, gobject-introspection-1.60.2,
   hicolor-icon-theme-0.17, and libnotify-0.7.8

      Optional

   GTK-Doc-1.32, HarfBuzz-2.6.0, LLVM-8.0.1, Wayland-1.17.0, Hyphen, MathML,
   and woff2

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/webkitgtk

  Installation of WebKitGTK+

    Installation of WebKitGTK+

   Install WebKitGTK+ by running the following commands:

 mkdir -vp build &&
 cd        build &&

 CFLAGS=-Wno-expansion-to-defined  \
 CXXFLAGS=-Wno-expansion-to-defined \
 cmake -DCMAKE_BUILD_TYPE=Release  \
       -DCMAKE_INSTALL_PREFIX=/usr \
       -DCMAKE_SKIP_RPATH=ON       \
       -DPORT=GTK                  \
       -DLIB_INSTALL_DIR=/usr/lib  \
       -DUSE_LIBHYPHEN=OFF         \
       -DENABLE_MINIBROWSER=ON     \
       -DUSE_WOFF2=OFF             \
       -Wno-dev -G Ninja .. &&
 ninja

   This package does not have a working testsuite. However, there is a usable
   basic graphical web browser in the build directory, build/bin/MiniBrowser.
   If launching it fails, there is a problem with the build.

  Note

   When installing, the Makefile does some additional compiling and linking.
   If you do not have Xorg in /usr, the LIBRARY_PATH and PKG_CONFIG_PATH
   variables need to be defined for the root user. If using sudo to assume
   root, use the -E option to pass your current environment variables for the
   install process.

   Now, as the root user:

 ninja install &&

 install -vdm755 /usr/share/gtk-doc/html/webkit{2,dom}gtk-4.0 &&
 install -vm644  ../Documentation/webkit2gtk-4.0/html/*   \
                 /usr/share/gtk-doc/html/webkit2gtk-4.0       &&
 install -vm644  ../Documentation/webkitdomgtk-4.0/html/* \
                 /usr/share/gtk-doc/html/webkitdomgtk-4.0

  Command Explanations

   -DUSE_LIBHYPHEN=OFF: This switch disables default automatic hyphenation
   implementation. You need to install Hyphen, if you wish to enable it
   (replacing OFF with ON or just removing the switch).

   -DENABLE_MINIBROWSER=ON: This switch enables the Mini Browser compilation
   and install.

   -DUSE_LIBNOTIFY=OFF: Use this switch if you do not have libnotify
   installed.

   -DUSE_SYSTEM_MALLOC=ON: This switch enables building against the system
   installed malloc.

   -DENABLE_GEOLOCATION=OFF: Use this switch if you don't want to install
   GeoClue-2.5.3.

   -DENABLE_GTKDOC=ON: Use this switch if GTK-Doc-1.32 is installed and you
   wish to rebuild and install the API documentation.

   -DUSE_WOFF2=ON: Use this switch if the optional package woff2 is
   installed.

  Contents

   Installed Program: jsc, MiniBrowser, and WebKitWebDriver
   Installed Libraries: libjavascriptcoregtk-4.0.so and libwebkit2gtk-4.0.so
   Installed Directories: /usr/include/webkitgtk-4.0,
   /usr/lib{,exec}/webkit2gtk-4.0, and
   /usr/share/gtk-doc/html/webkit{2,dom}gtk-4.0

    Short Descriptions

   jsc                         is a command-line utility that allows you to   
                               run JavaScript programs outside of the context 
                               of a web browser.                              
   MiniBrowser                 is a very simple graphical browser.            
   WebKitWebDriver             allows debugging and automation of web pages   
                               and browsers.                                  
   libjavascriptcoregtk-4.0.so contains core JavaScript API functions used by 
                               jsc and libwebkit2gtk-4.0.                     
   libwebkit2gtk-4.0.so        contains the WebKit2 API functions.            

   Last updated on 2019-08-31 05:13:11 -0700

Chapter 26. Display Managers

Introduction

   Display Managers are graphical programs used for starting the graphical
   display (currently, the X server) and providing a login capability for a
   Window Manager or Desktop Environment.

   There are many Display Managers available. Some of the more well known
   include: GDM, KDM (deprecated), LightDM, LXDM, Slim, and SDDM.

   Among the Desktop Environments available for Linux you find:
   Enlightenment, GNOME, KDE, LXDE, LXQt, and XFce.

   Choosing a Display Manager or Desktop Environment is highly subjective.
   The choice depends on the look and feel of the packages, the resources
   (memory and disk space) required, and the utilities included.

   In this chapter, the installation instructions of some Display Managers
   are presented. Later in the book, you will find other ones, which are
   provided as part of some Desktop Environments.

   Last updated on 2018-01-05 14:14:37 -0800

lightdm-1.30.0

  Introduction to Lightdm

   The lightdm package contains a lightweight display manager based upon GTK.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Lightdm Package Information

     * Download (HTTP):
       https://github.com/CanonicalLtd/lightdm/releases/download/1.30.0/lightdm-1.30.0.tar.xz

     * Download MD5 sum: c566ea595f2b81e68684be9f8dbcbb42

     * Download size: 500 KB

     * Estimated disk space required: 21 MB

     * Estimated build time: 0.2 SBU

    Additional download

  Note

   The greeter is a program to present a graphical login screen. There are
   several alternative greeters, but the gtk+ package is the reference
   implementation. For a list of other greeters, see
   https://en.wikipedia.org/wiki/LightDM.

     * Download (HTTP):
       https://launchpad.net/lightdm-gtk-greeter/2.0/2.0.6/+download/lightdm-gtk-greeter-2.0.6.tar.gz

     * Download MD5 sum: 36dc961f14cc3b0baef3ddb1c494eb16

     * Download size: 564 KB

     * Estimated disk space required: 5.0 MB

     * Estimated build time: less than 0.1 SBU

    Lightdm Dependencies

      Required

   GTK+-3.24.10, libgcrypt-1.8.5, Linux-PAM-1.3.1, and PCRE-8.43

      Recommended

   gobject-introspection-1.60.2, libxklavier-5.4, and Vala-0.44.7

      Optional

   at-spi2-core-2.32.1, Exo-0.12.8, GTK-Doc-1.32, itstool-2.0.6, Qt-5.13.0,
   libido, and libindicator

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/lightdm

  Installation of Lightdm

   First, create a dedicated user and group to take control of the lightdm
   daemon after it is started. Issue the following commands as the root user:

 groupadd -g 65 lightdm       &&
 useradd  -c "Lightdm Daemon" \
          -d /var/lib/lightdm \
          -u 65 -g lightdm    \
          -s /bin/false lightdm

   Install lightdm by running the following commands:

 ./configure                          \
        --prefix=/usr                 \
        --libexecdir=/usr/lib/lightdm \
        --localstatedir=/var          \
        --sbindir=/usr/bin            \
        --sysconfdir=/etc             \
        --disable-static              \
        --disable-tests               \
        --with-greeter-user=lightdm   \
        --with-greeter-session=lightdm-gtk-greeter \
        --docdir=/usr/share/doc/lightdm-1.30.0 &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install                                                  &&
 cp tests/src/lightdm-session /usr/bin                         &&
 sed -i '1 s/sh/bash --login/' /usr/bin/lightdm-session        &&
 rm -rf /etc/init                                              &&
 install -v -dm755 -o lightdm -g lightdm /var/lib/lightdm      &&
 install -v -dm755 -o lightdm -g lightdm /var/lib/lightdm-data &&
 install -v -dm755 -o lightdm -g lightdm /var/cache/lightdm    &&
 install -v -dm770 -o lightdm -g lightdm /var/log/lightdm

   Now build the greeter:

 tar -xf ../lightdm-gtk-greeter-2.0.6.tar.gz &&
 cd lightdm-gtk-greeter-2.0.6 &&

 ./configure                      \
    --prefix=/usr                 \
    --libexecdir=/usr/lib/lightdm \
    --sbindir=/usr/bin            \
    --sysconfdir=/etc             \
    --with-libxklavier            \
    --enable-kill-on-sigterm      \
    --disable-libido              \
    --disable-libindicator        \
    --disable-static              \
    --docdir=/usr/share/doc/lightdm-gtk-greeter-2.0.6 &&

 make

   Now, as the root user:

 make install

  Command Explanations

   sed ... /usr/bin/lightdm-session: This command ensures that the initial
   login via the greeter sources /etc/profile and ~/.bash_profile. Without
   this, commands that depend on different environment variables may not work
   as expected.

  Configuring lightdm

    Config Files

   /etc/lightdm/{lightdm,users,keys}.conf

    Boot Script

   Install the /etc/rc.d/init.d/lightdm init script from the
   blfs-bootscripts-20190609

 make install-lightdm

    Starting lightdm

   If the lightdm bootscript has been installed, start lightdm by running, as
   the root user:

 /etc/rc.d/init.d/lightdm start

   By convention, X should be executed at runlevel 5, consequently, the same
   is true for lightdm. However, LFS default runlevel is 3. Changing to
   runlevel 5, from a console terminal, as root user, starts the lightdm
   bootscript, bringing up the greeter screen:

 init 5

   In order to permanently set the default to 5, starting the lightdm greeter
   screen automatically, modify /etc/inittab. As the root user:

 cp -v /etc/inittab{,-orig} &&
 sed -i '/initdefault/ s/3/5/' /etc/inittab

    Available Sessions

   The greeter offers a list of available sessions, depending on the Window
   Managers and Desktop Environments installed. The list includes sessions
   which have a corresponding .desktop file installed under
   /usr/share/xsessions. Most of the Window Managers and Desktop Environments
   automatically provide those files, but if necessary, you may include a
   custom one.

  Contents

   Installed Programs: dm-tool, lightdm, and lightdm-gtk-greeter
   Installed Libraries: liblightdm-gobject-1.so
   Installed Directories: /etc/lightdm, /etc/apparmor.d, /usr/lib/lightdm,
   /usr/include/lightdm-gobject-1, /usr/share/help/C/lightdm
   /usr/share/gtk-doc/html/lightdm-gobject-1,
   /usr/share/doc/lightdm-gtk-greeter-2.0.6, /var/lib/lightdm,
   /var/lib/lightdm-data, /var/cache/lightdm, and /var/log/lightdm

    Short Descriptions

   lightdm             is a display and login manager.                        
   lightdm-gtk-greeter is an auxiliary process that displays the greeter, a   
                       graphical user interface that performs user            
                       authentication and initiates the selected window       
                       manager or display environment.                        

   Last updated on 2019-08-23 14:05:06 -0700

lxdm-0.5.3

  Introduction to LXDM

   The LXDM is a lightweight Display Manager for the LXDE desktop. It can
   also be used as an alternative to other Display Managers such as GNOME's
   GDM or LightDM.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://downloads.sourceforge.net/lxdm/lxdm-0.5.3.tar.xz

     * Download MD5 sum: 061caae432634e6db38bbdc84bc6ffa0

     * Download size: 236 KB

     * Estimated disk space required: 5.6 MB

     * Estimated build time: less than 0.1 SBU

    LXDM Dependencies

      Required

   GTK+-2.24.32, ISO Codes-4.3, and librsvg-2.44.14 (runtime, for default
   theme background)

      Recommended

   LXSession-0.5.4 (for lxpolkit) or polkit-gnome-0.105

      Optional

   GTK+-3.24.10

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/lxdm

  Installation of LXDM

   First, some fixes.

 cat > pam/lxdm << "EOF"
 # Begin /etc/pam.d/lxdm

 auth     requisite      pam_nologin.so
 auth     required       pam_env.so
 auth     required       pam_succeed_if.so uid >= 1000 quiet
 auth     include        system-auth

 account  include        system-account

 password include        system-password

 session  required       pam_limits.so
 session  include        system-session

 # End /etc/pam.d/lxdm
 EOF

 sed -i 's:sysconfig/i18n:profile.d/i18n.sh:g' data/lxdm.in &&
 sed -i 's:/etc/xprofile:/etc/profile:g' data/Xsession &&
 sed -e 's/^bg/#&/'        \
     -e '/reset=1/ s/# //' \
     -e 's/logou$/logout/' \
     -e "/arg=/a arg=$XORG_PREFIX/bin/X" \
     -i data/lxdm.conf.in

   Install LXDM by running the following commands:

 ./configure --prefix=/usr     \
             --sysconfdir=/etc \
             --with-pam        \
             --with-systemdsystemunitdir=no &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   cat > pam/lxdm << "EOF" ...: Replace default /etc/pam.d/lxdm by another
   one appropriate for BLFS.

   sed -i ... data/lxdm.conf.in: Modifications in the default configuration:
   (1) fix the background to the default one; (2) restart X when session is
   close; (3) typo; and (4) include XORG_PREFIX, which may be different from
   /usr.

   sed -i ... data/Xsession: Source /etc/profile, instead of other file,
   according to BLFS standard.

   sed -i ... data/lxdm.in: Fix greeter's locale for BLFS specification.

   --with-pam: This parameter enables use of pam authentication.

   --with-systemdsystemunitdir=no: BLFS does not support systemd.

  Configuring LXDM

    Config Files

   /etc/lxdm/lxdm.conf

    Boot Script

   Install the /etc/rc.d/init.d/lxdm init script from the
   blfs-bootscripts-20190609 package.

 make install-lxdm

    Configuration Information

   The LXDM daemon configuration file (/etc/lxdm/lxdm.conf) specifies options
   that include numlock on/off, background image (bg), session, etc. You can
   set a default session by uncommenting the line: session=/usr/bin/startlxde
   and replacing startlxde with your session of choice. For GNOME
   session=/usr/bin/gnome-session. For OPENBOX
   session=/usr/bin/openbox-session and for XFCE session=/usr/bin/startxfce4.

   It is also possible to set the preferred session on a per-user basis by
   editing the ~/.dmrc file for each user and adding:

 [Desktop]
         Session=xfce

   You can replace the default dummy face in the greeting screen by another
   image representing your user. For that, copy or symlink the desired image
   to your home directory with the name .face.

    Starting lxdm

   You can manually start lxdm, e.g, if the bootscript has been installed, by
   running, as root user:

 /etc/rc.d/init.d/lxdm start

   By convention, X should be executed at runlevel 5, consequently, the same
   is true for lxdm. However, the LFS default runlevel is 3. Changing to
   runlevel 5, from the console (as root user) starts the lxdm bootscript and
   presents the greeter screen:

 init 5

   In order to permanently set the default to 5, starting the lxdm greeter
   screen automatically, you can modify /etc/inittab. As the root user:

 cp -v /etc/inittab{,-orig} &&
 sed -i '/initdefault/ s/3/5/' /etc/inittab

   You should also disable default elogind power management:

 cat >> /etc/elogind/logind.conf << "EOF"
 AllowSuspend=no
 AllowHibernation=no
 EOF

  Note

   One important script, executed after login is /etc/lxdm/Xsession which we
   have fixed to fit BLFS specifications.

  Contents

   Installed Programs: lxdm, lxdm-binary and lxdm-config
   Installed Libraries: None
   Installed Directories: /etc/lxdm and /usr/share/lxdm

    Short Descriptions

   lxdm        is a script to execute lxdm-binary                             
   lxdm-binary is the actual Display Manager; needs to be executed with       
               option -d to daemonize                                         
   lxdm-config is a graphical customizing program                             

   Last updated on 2019-08-23 14:05:06 -0700

Chapter 27. Window Managers

Introduction

   Window Managers and Desktop Environments are the primary user interfaces
   into the X Window System. A window manager is a program that controls the
   appearance of windows and provides the means by which the user can
   interact with them. A Desktop Environment provides a more complete
   interface to the operating system, and provides a range of integrated
   utilities and applications.

   There are many Window Managers available. Some of the more well known ones
   include fvwm2, Window Maker, AfterStep, Enlightenment, Sawfish, and
   Blackbox.

   The Desktop Environments available for Linux are GNOME, KDE, and XFce.

   Choosing a Window Manager or Desktop Environment is highly subjective. The
   choice depends on the look and feel of the packages, the resources (RAM,
   disk space) required, and the utilities included. One web site that
   provides a very good summary of what is available, screenshots, and their
   respective features is Window Managers for X.

   In this chapter, the installation instructions of several Window Managers
   and one lightweight Desktop Environment are presented. Later in the book,
   both KDE and GNOME have their own sections.

   Last updated on 2013-03-08 15:46:06 -0800

Fluxbox-1.3.7

  Introduction to Fluxbox

   The Fluxbox package contains a window manager.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://downloads.sourceforge.net/fluxbox/fluxbox-1.3.7.tar.xz

     * Download MD5 sum: b44afd10ee1e64624c23115aa51dcd55

     * Download size: 772 KB

     * Estimated disk space required: 101 MB

     * Estimated build time: 0.9 SBU

    Fluxbox Dependencies

      Required

   X Window System

      Optional

   dbus-1.12.16 (runtime), FriBidi-1.0.5, and imlib2-1.5.1 (if you wish to
   use other image formats in addition to XPM)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/fluxbox

  Installation of Fluxbox

   Install Fluxbox by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not have a working testsuite.

   Now, as the root user:

 make install

  Configuring Fluxbox

    Config Files

   ~/.fluxbox/init, ~/.fluxbox/keys, and ~/.fluxbox/menu

    Configuration Information

   If Fluxbox is the only Window Manager you want to use, you can start it
   with an .xinitrc file in your home folder. Be sure to backup your current
   .xinitrc before proceeding.

 echo startfluxbox > ~/.xinitrc

   Or alternatively, if you use a login manager like GDM or LightDM and would
   like to be able to choose Fluxbox at the login prompt, create a
   fluxbox.desktop file like this.

   As root:

 mkdir -pv /usr/share/xsessions &&
 cat > /usr/share/xsessions/fluxbox.desktop << "EOF"
 [Desktop Entry]
 Encoding=UTF-8
 Name=Fluxbox
 Comment=This session logs you into Fluxbox
 Exec=startfluxbox
 Type=Application
 EOF

   If you didn't install GDM, SDDM, or LightDM in /usr, then change that
   command to fit the prefix you chose.

   Now create the Fluxbox configuration files:

 mkdir -v ~/.fluxbox &&
 cp -v /usr/share/fluxbox/init ~/.fluxbox/init &&
 cp -v /usr/share/fluxbox/keys ~/.fluxbox/keys

   To generate the application menu, first you may wish to run
   fluxbox-generate_menu -h, in order to choose any <user_options>, then
   issue:

 cd ~/.fluxbox &&
 fluxbox-generate_menu <user_options>

   Alternately, copy a pregenerated menu:

 cp -v /usr/share/fluxbox/menu ~/.fluxbox/menu

   Menu items are added by editing ~/.fluxbox/menu. The syntax is explained
   on the fluxbox man page.

   If you want to use an image as your desktop background, copy the theme you
   like into ~/.fluxbox. Then add a line to make it use the correct image. In
   the following command, change <theme> for the name of the theme you want
   and change </path/to/nice/image.ext> to point to the actual image you want
   to use, where ext must be âxpmâ, if imlib2-1.5.1 is not installed to allow
   other image formats.

 cp /usr/share/fluxbox/styles/<theme> ~/.fluxbox/theme &&

 sed -i 's,\(session.styleFile:\).*,\1 ~/.fluxbox/theme,' ~/.fluxbox/init &&

 [ -f ~/.fluxbox/theme ] &&
 echo "background.pixmap: </path/to/nice/image.ext>" >> ~/.fluxbox/theme ||
 [ -d ~/.fluxbox/theme ] &&
 echo "background.pixmap: </path/to/nice/image.ext>" >> ~/.fluxbox/theme/theme.cfg

   In some locales the font specified in the theme may not contain the needed
   characters. This results in menus with blank items. You can fix this by
   editing ~/.fluxbox/theme with a text editor and altering it so that it
   names a suitable font.

  Contents

   Installed Programs: fluxbox, fbsetbg, fbsetroot, fluxbox-generate_menu,
   startfluxbox, fbrun, fluxbox-remote, and fluxbox-update_configs
   Installed Libraries: None
   Installed Directories: /usr/share/fluxbox and ~/.fluxbox

    Short Descriptions

   fluxbox                is a window manager for X11 based on Blackbox       
                          0.61.0.                                             
   fbsetbg                is a utility that sets the background image. It     
                          requires one of the following at runtime: Esetroot, 
                          wmsetbg, feh, hsetroot, chbg, display, qiv, xv,     
                          xsri, xli, or xsetbg. It also requires which if     
                          Esetroot is found.                                  
   fbsetroot              is a utility to change root window appearance based 
                          on the Blackbox application bsetroot.               
   fluxbox-generate_menu  is a utility that generates a menu by scanning your 
                          PATH.                                               
   startfluxbox           is a session startup script that allows for command 
                          executions prior to fluxbox starting.               
   fbrun                  displays a run dialog window.                       
   fluxbox-remote         provides command line access to key commands for    
                          Fluxbox.                                            
   fluxbox-update_configs use to manage config files (reload, update, test).  

   Last updated on 2019-08-19 11:11:15 -0700

IceWM-1.6.1

  Introduction to IceWM

   IceWM is a window manager with the goals of speed, simplicity, and not
   getting in the user's way.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://github.com/ice-wm/icewm/archive/1.6.1/icewm-1.6.1.tar.gz

     * Download MD5 sum: 7b4ebb3080239c649e7e9d408d075e14

     * Download size: 2.0 MB

     * Estimated disk space required: 31 MB

     * Estimated build time: 0.3 SBU (Using parallelixm=4)

    IceWM Dependencies

      Required

   X Window System and gdk-pixbuf-2.38.1

      Optional

   FriBidi-1.0.5 (for languages written right to left), librsvg-2.44.14,
   libsndfile-1.0.28 and alsa-lib-1.1.9 (for the experimental icesound
   program)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/icewm

  Installation of IceWM

   Install IceWM by running the following commands:

 sed -i "s/nullptr/NULL/" src/{wmconfig.cc,icewmhint.cc} &&

 mkdir build &&
 cd    build &&

 cmake -DCMAKE_INSTALL_PREFIX=/usr \
       -DCMAKE_BUILD_TYPE=Release  \
       -DCFGDIR=/etc               \
       -DCMAKE_EXE_LINKER_FLAGS='-lXrandr -lXinerama' \
       -DDOCDIR=/usr/share/doc/icewm-1.6.1  \
       ..
 make

   This package does not have a working testsuite.

   Now, as the root user:

 make install         &&
 rm /usr/share/xsessions/icewm.desktop

  Command Explanations

   rm /usr/share/xsessions/icewm.desktop: The package ships with both
   icewm.desktop and icewm-xsession.desktop. The former has apparently been
   used in the past, but it will hang if used with a modern desktop-manager
   such as lightdm-1.30.0.

  Configuring IceWM

    Config Files

   ~/.icewm/keys, ~/.icewm/menu, and ~/.icewm/preferences, and
   ~/.icewm/toolbar, and ~/.icewm/winoptions. The default versions are
   installed in /usr/share/icewm/ and will be used if you have not copied
   them to ~/.icewm.

    Configuration Information

   If IceWM is the only Window Manager you want to use, you can start it with
   an .xinitrc file in your home folder. Be sure to backup your current
   .xinitrc before proceeding.

 echo icewm-session > ~/.xinitrc

   Now create the IceWM configuration files:

 mkdir -v ~/.icewm                                       &&
 cp -v /usr/share/icewm/keys ~/.icewm/keys               &&
 cp -v /usr/share/icewm/menu ~/.icewm/menu               &&
 cp -v /usr/share/icewm/preferences ~/.icewm/preferences &&
 cp -v /usr/share/icewm/toolbar ~/.icewm/toolbar         &&
 cp -v /usr/share/icewm/winoptions ~/.icewm/winoptions

   You can now edit these files to meet your requirements. In particular,
   review the preferences file. You can use Logout -> Restart-IceWM on the
   main menu to load your changed preferences, but changes to the background
   only take effect when IceWM is started.

   At this point you can either modify the traditional menu files to suit
   your requirements, or use the newer icewm-menu-fdo described later.

   The syntax of the menus is explained in the help files, which you can
   access by running help from the menu, but some of the detail is out of
   date and the default selections in the menus (a few old applications on
   the main menu, everything else on the Programs menu) will benefit from
   being updated to meet your needs. The following examples are provided to
   encourage you to think about how you wish to organise your menus. Please
   note the following:

     * If a program listed in the menu has not been installed, it will not
       appear when the menu is displayed. Similarly, if the program exists
       but the specified icon does not, no icon will be displayed in the
       menu.

     * The icons can be either .xpm or .png files, and there is no need to
       specify the extension. If the icon is located in the "library"
       (/usr/share/icewm/icons) there is no need to specifiy the path.

     * Most programs are in sub-menus, and the main menu will always append
       entries for windows, help, settings, logout at the bottom.

     * An icon for firefox was copied to the library directory and given a
       meaningful name. The icon for xine is xine.xpm which was installed to
       a pixmap directory.

     * The default toolbar is not altered.

   If you wish to use this traditional method, there are more examples in
   previous releases of this book (e.g. BLFS-7.8).

   Alternatively, you can create a menu which conforms to the FDO Desktop
   Menu Specifications, where programs can be found because they have a
   .desktop file in the XDG_DATA_HOME or XDG_DATA_DIR directories. Unlike
   most windowmanagers, icewm does not search for programs when the menu is
   invoked, so if you take this route you will need to rerun the following
   command after installing or removing programs:

 icewm-menu-fdo >~/.icewm/menu

   If you wish to put icons on your desktop, you will need to install a
   program such as Rox-Filer-2.11 which provides a pinboard. If you do that
   you will no longer be able to access the menu by right-clicking on the
   desktop, you will have to use the IceWM button. To ensure that the rox
   pinboard is running, the following commands will put it in the startup
   file:

 cat > ~/.icewm/startup << "EOF"
 rox -p Default &
 EOF &&
 chmod +x ~/.icewm/startup

  Tip

   There are a number of keyboard shortcuts in IceWM:

     * Ctrl + Alt + FN : go to ttyN.

     * Ctrl + Alt + N : go to desktop number N

     * Ctrl + Alt + Space : open a box on the taskbar where you can key in
       the name of an application and run it.

  Contents

   Installed Programs: icehelp, icesh, icesound, icewm, icewm-menu-fdo,
   icewm-session, icewm-set-gnomewm, icewmbg, icewmhint, icewmtray
   Installed Libraries: None
   Installed Directories: /usr/share/doc/icewm-1.6.1, /usr/share/icewm and
   ~/.icewm

    Short Descriptions

   icehelp           is used to display the html manual.                      
   icesh             is a command-line window manager which can be used in    
                     ~/.icewm/startup.                                        
   icesound          plays audio files on GUI events raised by IceWM.         
   icewm             is the window manager.                                   
   icewm-menu-fdo    can create a file in a format suitable for an IceWM      
                     menu, which lists those programs currently installed in  
                     a layout conforming to the FDO Desktop Menu              
                     Specifications.                                          
   icewm-session     runs icewmbg, icewm, icewmtray, startup, shutdown (i.e.  
                     startup and shutdown scripts are run if installed).      
   icewm-set-gnomewm is a script to set the GNOMEwindowmanager to icewm using 
                     gconftool.                                               
   icewmbg           is used to set the background, according to the various  
                     DesktopBackground settings in the preferences.           
   icewmhint         is used internally.                                      
   icewmtray         provides the tray.                                       

   Last updated on 2019-08-27 10:19:50 -0700

openbox-3.6.1

  Introduction to openbox

   Openbox is a highly configurable desktop window manager with extensive
   standards support. It allows you to control almost every aspect of how you
   interact with your desktop.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP): http://openbox.org/dist/openbox/openbox-3.6.1.tar.gz

     * Download MD5 sum: b72794996c6a3ad94634727b95f9d204

     * Download size: 944 KB

     * Estimated disk space required: 21 MB

     * Estimated build time: 0.3 SBU

    Openbox Dependencies

      Required

   X Window System and Pango-1.42.4 (compiled with support for libXft)

      Optional

   dbus-1.12.16 (runtime), imlib2-1.5.1 (to enable icons in the right click
   menu), ImageMagick-7.0.8-60 (to show desktop backgrounds as seen in the
   Configuration Information section below), PyXDG-0.25,
   startup-notification-0.12, and librsvg-2.44.14

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/openbox

  Installation of Openbox

  Note

   If XORG_PREFIX is not /usr, tell gcc about it:

 export LIBRARY_PATH=$XORG_PREFIX/lib

   If you only installed the Python 3 PyXDG module convert one of the scripts
   to Python 3:

 2to3-3.7 -w data/autostart/openbox-xdg-autostart &&
 sed 's/python/python3/' -i data/autostart/openbox-xdg-autostart

   Install Openbox by running the following commands:

 ./configure --prefix=/usr     \
             --sysconfdir=/etc \
             --disable-static  \
             --docdir=/usr/share/doc/openbox-3.6.1 &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   --sysconfdir=/etc: This option puts Openbox's configuration files in
   /etc/xdg/openbox instead of /usr/etc/xdg/openbox.

   --docdir=/usr/share/doc/openbox-3.6.1: this puts a few files in a
   versioned directory in /usr/share/doc.

   --disable-static: This switch prevents installation of static versions of
   the libraries.

  Configuring Openbox

    Config Files

   /etc/xdg/openbox/autostart, /etc/xdg/openbox/menu.xml,
   /etc/xdg/openbox/rc.xml, ~/.config/openbox/autostart,
   ~/.config/openbox/menu.xml and ~/.config/openbox/rc.xml

    Configuration Information

   Openbox's right click menu can be used to launch programs. The menu itself
   is configured with 2 files, /etc/xdg/openbox/menu.xml and
   ~/.config/openbox/menu.xml. To make changes to the menu, copy
   /etc/xdg/openbox/menu.xml to ~/.config/openbox/menu.xml and edit it:

 cp -rf /etc/xdg/openbox ~/.config

   ~/.config/openbox/menu.xml can be edited with a text editor or you can
   install Obmenu (requires pyxml and PyGTK-2.24.0).

   To have icons in your right click menu requires installing imlib2-1.5.1
   before you install Openbox. To set an icon for an entry in the menu edit
   ~/.config/openbox/menu.xml and add an icon to the <item> tag like this:

 <item label="Mplayer" icon="/usr/share/pixmaps/mplayer.png">

   Many other aspects of Openbox's behaviour are configured with
   ~/.config/openbox/rc.xml such as what keybindings are used to launch
   programs or which mouse button launches the main menu.

   Details of the theme that Openbox applies to window decorations are
   configured in ~/.config/openbox/rc.xml. You can get a list of the
   available themes with the command:

 ls -d /usr/share/themes/*/openbox-3 | sed 's#.*es/##;s#/o.*##'

    Starting Openbox

   To automatically start openbox when you start Xorg:

 echo openbox > ~/.xinitrc

   If you want to set a background image to your desktop you can use display
   and launch it from ~/.xinitrc just before openbox:

 cat > ~/.xinitrc << "EOF"
 display -backdrop -window root /path/to/beautiful/picture.jpeg
 exec openbox
 EOF

   Or if you like a bit of variety, put a selection of images in a folder (in
   this example, the directory ~/.config/backgrounds) and choose one at
   random each time you xinit:

 cat > ~/.xinitrc << "EOF"
 # make an array which lists the pictures:
 picture_list=(~/.config/backgrounds/*)
 # create a random integer between 0 and the number of pictures:
 random_number=$(( ${RANDOM} % ${#picture_list[@]} ))
 # display the chosen picture:
 display -backdrop -window root "${picture_list[${random_number}]}"
 exec openbox
 EOF

   If you like to have the numlock key set whan you start Xorg, install
   Numlockx and add that to your xinitrc. Another useful application is
   dbus-1.12.16:

 cat > ~/.xinitrc << "EOF"
 . /etc/profile
 picture_list=(~/.config/backgrounds/*)
 random_number=$(( ${RANDOM} % ${#picture_list[*]} ))
 display -backdrop -window root "${picture_list[${random_number}]}"
 numlockx
 eval $(dbus-launch --auto-syntax --exit-with-session)
 lxpanel &
 exec openbox
 EOF

  Contents

   Installed Programs: gdm-control, gnome-panel-control, obxprop, openbox,
   openbox-gnome-session, openbox-kde-session and openbox-session
   Installed Libraries: libobrender.so and libobt.so
   Installed Directories: /etc/xdg/openbox, /usr/include/openbox,
   /usr/share/doc/openbox-3.6.1 and /usr/share/themes.

    Short Descriptions

   gdm-control           is a command line tool to send signals to GDM.       
   gnome-panel-control   is a command line utility to invoke the Gnome Panel  
                         run dialog/menu.                                     
   obxprop               is a tool for displaying the properties on an x      
                         window. It has a similar functionality to xprop, but 
                         allows you to see UTF-8 strings as text.             
   openbox               is a standards compliant, highly configurable,       
                         window manager.                                      
   openbox-gnome-session is a script to launch an Gnome session with Openbox  
                         as your window manager from your ~/.xinitrc.         
   openbox-kde-session   is a script to launch an KDE session with Openbox as 
                         your window manager from your ~/.xinitrc.            
   openbox-session       is a script to launch an Openbox session from your   
                         ~/.xinitrc.                                          
   libobrender.so        contains the functions used by Openbox for theme     
                         rendering.                                           
   libobt.so             is the Openbox toolkit library.                      

   Last updated on 2019-08-17 18:15:25 -0700

sawfish-1.12.0

  Introduction to sawfish

   The sawfish package contains a window manager. This is useful for
   organizing and displaying windows where all window decorations are
   configurable and all user-interface policy is controlled through the
   extension language.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://download.tuxfamily.org/sawfish/sawfish_1.12.0.tar.xz

     * Download MD5 sum: 074446085b2518a07cf0e0c8c8b6df41

     * Download size: 2.7 MB

     * Estimated disk space required: 53 MB

     * Estimated build time: 0.4 SBU

    sawfish Dependencies

      Required

   rep-gtk-0.90.8.3 and Which-2.21

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/sawfish

  Installation of sawfish

   Install sawfish by running the following commands:

 ./configure --prefix=/usr --with-pango  &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Configuring sawfish

    Configuration Information

   Be sure to backup your current .xinitrc before proceeding.

 cat >> ~/.xinitrc << "EOF"
 exec sawfish
 EOF

   Optionally, you can use a Display Manager, such as lxdm-0.5.3.

   From the developers: âThe default menu binding is somewhat obscure; you
   must middle-click on the background to bring up the menus. (If you have a
   two-button mouse, try clicking both buttons simultaneously)â. You can find
   this at sawfish's FAQ.

  Contents

   Installed Programs: sawfish, sawfish-about, sawfish-client,
   sawfish-config, sawfish-kde4-session, sawfish-kde5-session,
   sawfish-lumina-session, sawfish-mate-session, and sawfish-xfce-session
   Installed Libraries: Several internal modules under /usr/lib/sawfish tree
   Installed Directory: /usr/include/sawfish, /usr/lib/sawfish,
   /usr/lib/rep/sawfish, and /usr/share/sawfish

    Short Descriptions

   sawfish                is the extensible window manager using a Lisp-based 
                          scripting language.                                 
   sawfish-about          is the sawfish about window.                        
   sawfish-client         allows you to connect to a window manager process   
                          and evaluate arbitrary Lisp forms.                  
   sawfish-config         is the sawfish configuration manager.               
   sawfish-kde4-session   is a script to run KDE4 using sawfish.              
   sawfish-kde5-session   is a script to run Plasma 5 using sawfish           
   sawfish-mate-session   is a script to run mate using sawfish.              
   sawfish-lumina-session is a script to run Lumina using sawfish.            
   sawfish-xfce-session   is a script to run xfce using sawfish.              

   Last updated on 2019-08-19 21:51:38 -0700

Other Window Managers

   twm is the Tab Window Manager. This is the default window manager
   installed by the X Window System packages.

   mwm is the MotifÂ® Window Manager. It is an OSF/MotifÂ® clone packaged and
   installed with LessTif.

   Last updated on 2012-05-06 08:26:39 -0700

Chapter 28. Icons

Introduction

   Window Managers and Desktop Environments can use icons from different
   sources. Generally icons are installed in /usr/share/icons and are
   independent of distribution.

   Last updated on 2018-10-09 13:28:20 -0700

adwaita-icon-theme-3.32.0

  Introduction to Adwaita Icon Theme

   The Adwaita Icon Theme package contains an icon theme for Gtk+ 3
   applications.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/adwaita-icon-theme/3.32/adwaita-icon-theme-3.32.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/adwaita-icon-theme/3.32/adwaita-icon-theme-3.32.0.tar.xz

     * Download MD5 sum: 4b16278cfed860a86c8221de62eec151

     * Download size: 18 MB

     * Estimated disk space required: 134 MB

     * Estimated build time: 0.6 SBU

    Adwaita Icon Theme Dependencies

      Optional

   git-2.23.0, GTK+-2.24.32 or GTK+-3.24.10 (if present, librsvg-2.44.14 is
   also required, and gtk-update-icon-cache and gtk-encode-symbolic-svg are
   run after installing), Inkscape-0.92.4 and Icon Tools

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/adwaita-icon-theme

  Installation of Adwaita Icon Theme

   Install Adwaita Icon Theme by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Library: None
   Installed Directory: /usr/share/icons/Adwaita

   Last updated on 2019-08-16 20:24:05 -0700

breeze-icons-5.61.0

  Introduction to Breeze Icons

   The Breeze Icons package contains the default icons for KDE Plasma 5
   applications, but it can be used for other window environments.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://download.kde.org/stable/frameworks/5.61/breeze-icons-5.61.0.tar.xz

     * Download MD5 sum: bd2441e04540b82849fc3144dcd6dbca

     * Download size: 2.4 MB

     * Estimated disk space required: 237 MB

     * Estimated build time: 0.1 SBU

    Breeze Icons Dependencies

      Required

   extra-cmake-modules-5.61.0 and Qt-5.13.0

      Optional

   KDE Frameworks-5.61.0

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/breeze-icons

  Installation of Breeze Icons

   Install Breeze Icons by running the following commands:

 mkdir build &&
 cd    build &&

 cmake -DCMAKE_INSTALL_PREFIX=/usr \
       -DBUILD_TESTING=OFF         \
       -Wno-dev ..

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   -DBUILD_TESTING=OFF: This parameter disables building the testing
   framework, which requires some modules from KDE Frameworks-5.61.0.

  Contents

   Installed Programs: None
   Installed Library: None
   Installed Directory: /usr/share/icons/breeze{,-dark}

   Last updated on 2019-08-19 10:20:58 -0700

gnome-icon-theme-3.12.0

  Introduction to GNOME Icon Theme

   The GNOME Icon Theme package contains an assortment of non-scalable icons
   of different sizes and themes.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gnome-icon-theme/3.12/gnome-icon-theme-3.12.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gnome-icon-theme/3.12/gnome-icon-theme-3.12.0.tar.xz

     * Download MD5 sum: f14bed7f804e843189ffa7021141addd

     * Download size: 17 MB

     * Estimated disk space required: 85 MB

     * Estimated build time: 0.5 SBU

    GNOME Icon Theme Dependencies

      Required

   GTK+-3.24.10 or GTK+-2.24.32, hicolor-icon-theme-0.17, and
   icon-naming-utils-0.8.90

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gnome-icon-theme

  Installation of GNOME Icon Theme

   Install GNOME Icon Theme by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directory: /usr/share/icons/gnome

   Last updated on 2019-08-17 15:49:15 -0700

gnome-icon-theme-extras-3.12.0

  Introduction to GNOME Icon Theme Extras

   The GNOME Icon Theme Extras package contains extra icons for the GNOME
   Desktop.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gnome-icon-theme-extras/3.12/gnome-icon-theme-extras-3.12.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gnome-icon-theme-extras/3.12/gnome-icon-theme-extras-3.12.0.tar.xz

     * Download MD5 sum: 91f8f7e35a3d8d926716d88b8b1e9a29

     * Download size: 1.7 MB

     * Estimated disk space required: 12 MB

     * Estimated build time: less than 0.1 SBU

    GNOME Icon Theme Extras Dependencies

      Required

   gnome-icon-theme-3.12.0

   User Notes:
   http://wiki.linuxfromscratch.org/blfs/wiki/gnome-icon-theme-extras

  Installation of GNOME Icon Theme Extras

   Install GNOME Icon Theme Extras by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

   Last updated on 2019-08-21 18:00:23 -0700

gnome-icon-theme-symbolic-3.12.0

  Introduction to GNOME Icon Theme Symbolic

   The GNOME Icon Theme Symbolic package contains symbolic icons for the
   default GNOME icon theme.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gnome-icon-theme-symbolic/3.12/gnome-icon-theme-symbolic-3.12.0.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gnome-icon-theme-symbolic/3.12/gnome-icon-theme-symbolic-3.12.0.tar.xz

     * Download MD5 sum: 3c9c0e6b9fa04b3cbbb84da825a26fd9

     * Download size: 228 KB

     * Estimated disk space required: 6.8 MB

     * Estimated build time: less than 0.1 SBU

    GNOME Icon Theme Symbolic Dependencies

      Required

   gnome-icon-theme-3.12.0

   User Notes:
   http://wiki.linuxfromscratch.org/blfs/wiki/gnome-icon-theme-symbolic

  Installation of GNOME Icon Theme Symbolic

   Install GNOME Icon Theme Symbolic by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directories: /usr/share/icons/gnome/scalable

   Last updated on 2019-08-21 18:00:23 -0700

gnome-themes-extra-3.28

  Introduction to GNOME Themes Extra

   The GNOME Themes Extra package, formerly known as GNOME Themes Standard,
   contains various components of the default GNOME theme.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://ftp.gnome.org/pub/gnome/sources/gnome-themes-extra/3.28/gnome-themes-extra-3.28.tar.xz

     * Download (FTP):
       ftp://ftp.gnome.org/pub/gnome/sources/gnome-themes-extra/3.28/gnome-themes-extra-3.28.tar.xz

     * Download MD5 sum: f9f2c6c521948da427f702372e16f826

     * Download size: 2.8 MB

     * Estimated disk space required: 40 MB

     * Estimated build time: 0.3 SBU

    GNOME Themes Extra Dependencies

      Required

   GTK+-2.24.32 or GTK+-3.24.10 with librsvg-2.44.14 or both

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/gnome-themes-extra

  Installation of GNOME Themes Extra

   Install GNOME Themes Extra by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Command Explanations

   --disable-gtk2-engine: This switch disables the GTK+-2 theming engine.

   --disable-gtk3-engine: This switch disables the GTK+-3 theming engine.

  Contents

   Installed Programs: None
   Installed Library: libadwaita.so
   Installed Directories: /usr/lib/gtk-2.0/2.10.0/engines,
   /usr/share/icons/HighContrast, /usr/share/themes/Adwaita,
   /usr/share/themes/Adwaita-dark, and /usr/share/themes/HighContrast

    Short Descriptions

   libadwaita.so is the Adwaita GTK+-2 engine theme. 

   Last updated on 2019-08-21 18:00:23 -0700

hicolor-icon-theme-0.17

  Introduction to hicolor-icon-theme

   The hicolor-icon-theme package contains a default fallback theme for
   implementations of the icon theme specification.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://icon-theme.freedesktop.org/releases/hicolor-icon-theme-0.17.tar.xz

     * Download MD5 sum: 84eec8d6f810240a069c731f1870b474

     * Download size: 52 KB

     * Estimated disk space required: 340 KB

     * Estimated build time: less than 0.1 SBU

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/hicolor-icon-theme

  Installation of hicolor-icon-theme

   Install hicolor-icon-theme by running the following commands:

 ./configure --prefix=/usr

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directory: /usr/share/icons/hicolor

    Short Descriptions

   /usr/share/icons/hicolor/* contains icon definitions used as defaults. 

   Last updated on 2019-08-16 20:24:05 -0700

icon-naming-utils-0.8.90

  Introduction to icon-naming-utils

   The icon-naming-utils package contains a Perl script used for maintaining
   backwards compatibility with current desktop icon themes, while migrating
   to the names specified in the Icon Naming Specification.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://tango.freedesktop.org/releases/icon-naming-utils-0.8.90.tar.bz2

     * Download MD5 sum: dd8108b56130b9eedc4042df634efa66

     * Download size: 57 KB

     * Estimated disk space required: 440 KB

     * Estimated build time: less than 0.1 SBU

    icon-naming-utils Dependencies

      Required

   XML-Simple-2.25

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/icon-naming-utils

  Installation of icon-naming-utils

   Install icon-naming-utils by running the following commands:

 ./configure --prefix=/usr &&
 make

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: icon-name-mapping
   Installed Libraries: None
   Installed Directories: /usr/share/dtds and /usr/share/icon-naming-utils

    Short Descriptions

   icon-name-mapping is a Perl script used for maintaining backwards          
                     compatibility with current desktop icon themes, while    
                     migrating to the names specified in the Icon Naming      
                     Specification.                                           

   Last updated on 2019-08-17 15:49:15 -0700

lxde-icon-theme-0.5.1

  Introduction to LXDE Icon Theme

   The LXDE Icon Theme package contains nuoveXT 2.2 Icon Theme for LXDE.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       https://downloads.sourceforge.net/lxde/lxde-icon-theme-0.5.1.tar.xz

     * Download MD5 sum: 7467133275edbbcc79349379235d4411

     * Download size: 4.3 MB

     * Estimated disk space required: 18 MB

     * Estimated build time: less than 0.1 SBU

    LXDE Icon Theme Dependencies

      Optional

   GTK+-2.24.32 or GTK+-3.24.10 (for gtk-update-icon-cache command)

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/lxde-icon-theme

  Installation of LXDE Icon Theme

   Install LXDE Icon Theme by running the following commands:

 ./configure --prefix=/usr

   This package does not come with a test suite.

   Now, as the root user:

 make install

   If you have installed one of the optional dependencies, run the following
   command as the root user:

 gtk-update-icon-cache -qf /usr/share/icons/nuoveXT2

  Contents

   Installed Programs: None
   Installed Libraries: None
   Installed Directory: /usr/share/icons/nuoveXT2

   Last updated on 2019-08-17 15:49:15 -0700

oxygen-icons5-5.61.0

  Introduction to oxygen-icons5

   The oxygen icons 5 theme is a photo-realistic icon style, with a high
   standard of graphics quality.

   This package is known to build and work properly using an LFS-9.0
   platform.

    Package Information

     * Download (HTTP):
       http://download.kde.org/stable/frameworks/5.61/oxygen-icons5-5.61.0.tar.xz

     * Download MD5 sum: a08326c6e10855f47e5f1b63c31f2f0e

     * Download size: 223 MB

     * Estimated disk space required: 443 MB

     * Estimated build time: less than 0.1 SBU

    oxygen-icons5 Dependencies

      Required

   extra-cmake-modules-5.61.0 and Qt-5.13.0

   User Notes: http://wiki.linuxfromscratch.org/blfs/wiki/oxygen-icons5

  Installation of oxygen-icons5

   First, enable scalable icons:

 sed -i '/( oxygen/ s/)/scalable )/' CMakeLists.txt

   Install oxygen-icons5 by running the following commands:

 mkdir build &&
 cd    build &&

 cmake -DCMAKE_INSTALL_PREFIX=/usr -Wno-dev ..

   This package does not come with a test suite.

   Now, as the root user:

 make install

  Contents

   Installed Programs: none
   Installed Libraries: none
   Installed Directory: /usr/share/icons/oxygen

   Last updated on 2019-08-19 10:20:58 -0700

